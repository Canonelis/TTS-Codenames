{
  "SaveName": "Codenames (BETA)",
  "EpochTime": 1625936036,
  "Date": "7/10/2021 12:53:56 PM",
  "VersionNumber": "v13.1.1",
  "GameMode": "Codenames",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 1.0,
  "Table": "Table_None",
  "Sky": "Sky_Museum",
  "SkyURL": "http://cloud-3.steamusercontent.com/ugc/779618900062886433/01951DBD50DD7796BEFE22198FC7165072ABC8C4/",
  "Note": "",
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 1.0,
    "ySize": 1.5,
    "PosOffset": {
      "x": 0.43,
      "y": 1.0,
      "z": -0.4
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 1,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0,
    "LutURL": ""
  },
  "Hands": {
    "Enable": false,
    "DisableUnused": false,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": []
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "CameraStates": [
    {
      "Position": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "Rotation": {
        "x": 70.0,
        "y": 0.0,
        "z": 0.0
      },
      "Distance": 70.0,
      "Zoomed": false,
      "AbsolutePosition": {
        "x": 0.0,
        "y": 65.0,
        "z": -24.0
      }
    },
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  ],
  "DecalPallet": [],
  "LuaScript": "--[[\n  TTS-Codenames: A LUA script for Codenames on Tabletop Simulator for Steam.\n  Copyright (C) 2021  Ryan6578 (https://ryan6578.com)\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program. If not, see <http://www.gnu.org/licenses/>.\n]]\n\nchatDisclaimer =\n[[\n\n                  [da1918]ANALYTICS DISCLAIMER[-]\n[-]This mod collects certain data to improve the\nexperience and provide meaningful insight\ninto usage and play. By continuing, you\nacknowledge and accept this in accordance\nwith the privacy policy outlined below.\n\nMore info:\n[8bb5ff]https://tts-codenames.com/privacy[-]\n\n]]\n\nredColor  = {0.856, 0.1, 0.094}\nblueColor = {0.118, 0.53, 1}\ndealCards_WaitId = nil\n\n-- Color = Blue/Red/Black/White\ncards = {\n  -- Row 1 (cards 1-5)\n  {position = {x = -11.4, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 2 (cards 6-10)\n  {position = {x = -11.4, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 3 (cards 11-15)\n  {position = {x = -11.4, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 4 (cards 16-20)\n  {position = {x = -11.4, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 5 (cards 21-25)\n  {position = {x = -11.4, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false}\n}\n\nagents = {\n  -- Assassain\n  ['b97df2'] = {position = {x = 0.04, y = 2, z = -17.84 }, color = \"Black\", covering = nil, enabled = true},\n\n  -- Blue agents\n  ['1e9282'] = {position = {x = 0.04, y = 2, z = -14 }, color = \"Blue\", covering = nil, enabled = false},\n  ['7fdaee'] = {position = {x = 12.34, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['99832c'] = {position = {x = 18.07, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['d9324a'] = {position = {x = 23.77, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['19b2d5'] = {position = {x = 29.47, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['0f0ec0'] = {position = {x = 12.34, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n  ['d9054c'] = {position = {x = 18.07, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n  ['4de840'] = {position = {x = 23.77, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n  ['05c73d'] = {position = {x = 29.47, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n\n  -- Red agents\n  ['3ef1ca'] = {position = {x = 0.04, y = 2, z = -14 }, color = \"Red\", covering = nil, enabled = false},\n  ['746660'] = {position = {x = -12.22, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['9cbe84'] = {position = {x = -17.92, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['6bb4d8'] = {position = {x = -23.62, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['b48ed4'] = {position = {x = -29.32, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['5c1be6'] = {position = {x = -12.22, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n  ['b89ba7'] = {position = {x = -17.92, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n  ['e1754e'] = {position = {x = -23.62, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n  ['4a2969'] = {position = {x = -29.32, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n\n  -- Civialians\n  ['1f53f2'] = {position = {x = -5.7, y = 2, z = -14 }, color = \"White\", covering = nil, enabled = true},\n  ['3d7b86'] = {position = {x = 5.74, y = 2, z = -14 }, color = \"White\", covering = nil, enabled = true},\n  ['e44594'] = {position = {x = -5.7, y = 2, z = -17.84 }, color = \"White\", covering = nil, enabled = true},\n  ['1ebedd'] = {position = {x = 5.74, y = 2, z = -17.84 }, color = \"White\", covering = nil, enabled = true},\n  ['f6786b'] = {position = {x = -5.7, y = 2, z = -21.7 }, color = \"White\", covering = nil, enabled = true},\n  ['f8f6a1'] = {position = {x = 0.04, y = 2, z = -21.7 }, color = \"White\", covering = nil, enabled = true},\n  ['a05e4e'] = {position = {x = 5.74, y = 2, z = -21.7 }, color = \"White\", covering = nil, enabled = true}\n}\n\nvotes = {\n  [0] = {\n    [\"Orange\"]  = {},\n    [\"Yellow\"]  = {},\n    [\"Pink\"]    = {},\n    [\"Brown\"]   = {}\n  },\n  [1] = {\n    [\"Teal\"]    = {},\n    [\"Purple\"]  = {},\n    [\"Green\"]   = {},\n    [\"White\"]   = {}\n  }\n}\n\n----------[ Game state ]----------\ngameState =\n{\n  -- Tracks whether the current game has started (-2 = not started, -1 = ended, 0 = starting, 1 = started)\n  status = -2,\n\n  -- Current game is on the first turn or not\n  firstTurn = true,\n\n  -- Tracks whose turn it currently is\n  turnTracker = 1,\n\n  -- Tracks how many guesses the team has left\n  guessesLeft = -1,\n\n  -- Tracks if the current team is able to vote\n  canVote = false,\n\n  -- Red clue tracker\n  redClues = {},\n\n  -- Blue clue tracker\n  blueClues = {}\n}\n\n----------[ Game settings ]----------\nsettings =\n{\n  -- Shuffle players at start\n  playerShuffle = true,\n\n  -- Enable codemaster queue\n  codemasterQueue = true,\n\n  -- Quick color switcher buttons\n  colorSwitcher = true,\n\n  -- Disable/Enable \"inf meta\"\n  cardTilting = false,\n\n  -- Allow multiple votes per player\n  multivoting = false,\n\n  -- Show shooting star background\n  starBackground = true,\n\n  -- Show table lighting\n  tableLighting = true,\n\n  -- AFK detection\n  afkDetection =\n  {\n    enabled   = false,\n    threshold = 7\n  },\n\n  -- Timer enabled\n  timer =\n  {\n    enabled     = true,\n    initial     = 8,\n    subsequent  = 4\n  },\n\n  -- Automod functions\n  automod =\n  {\n    autokick = true\n  }\n}\n\n----------[ Decks ]----------\ndeck =\n{\n  -- The currently selected deck(s)\n  selected = {},\n\n  -- Whether or not multiple deck mode is enabled\n  multiple = false,\n\n  -- The current words for the selected deck\n  words = nil,\n\n  -- Search term\n  searchTerm = nil,\n\n  -- Number of decks matched by the searchTerm\n  matchingDecks = 0,\n\n  -- Wait id of search delay\n  searchDelay = nil,\n\n  -- Current page size\n  pageSize = 10,\n\n  -- Current result page\n  pageNum = 1,\n\n  -- Used to save the current deck page since saving the entire list is much too big\n  currentDeckList = {}\n}\n\n----------[ Game analytics ]----------\nanalytics =\n{\n  url       = \"https://api.tts-codenames.com\",\n  gameID    = nil,\n  host      = nil,\n  clueID    = nil,\n  sessions  = {}\n}\n\n----------[ AFK loop checking ]----------\nafk =\n{\n  -- Wait id of the afk loop\n  waitId = nil,\n\n  -- To detect a VR player, getPointerRotation() never ever changes(except with \"lookAt\"). If a player's rotation changes several times the we know they are not in VR.\n  personInfo =\n  { -- [steamId]:\n    -- isNonVrPlayer = false,\n    -- currentPointerRotation = 0,\n    -- cprChanged = false,\n    -- uniquePointerRotations = {},\n    -- uniquePointerRotationsCount = 0\n  },\n\n  -- The number of uniquePointerRotationsCount needed to assert non-VR status\n  nonVrThreshold = 6,\n\n  -- For non-VR users, track their cursor position\n  movementInfo =\n  { -- [steam_id]:\n    -- timestamp = nil,\n    -- cursorPosition = nil,\n    -- countdown = nil\n  }\n}\n----------[ Variables to manage the complex deck requests ]-----------\nfunction resetDeckHandler()\n  deckHandler =\n  {\n    -- Tracks deck fetch request\n    fetchingDecks = false,\n\n    -- Total number of decks expected\n    totalDecks = 0,\n\n    -- Number of pages to request\n    totalPages = 0,\n\n    -- Number of decks to request at a time. JSON.decode is a very slow function.\n    DECK_REQUEST_COUNT = 15,\n\n    -- A table to track which page numbers have come in so far\n    acquiredPages = {},\n\n    -- The list of all decks\n    entireDeckList = {}\n  }\nend\nresetDeckHandler()\n\n------ Track players who come in the room ----\n-- If they sit in red or blue, then reload the global xml in case they can't see it\nisPlayerNewlyJoined = {}\n\n----------[ Character sets ]----------\n\ndigits_table = {\n[0]={48,1632,1776,1984,2406,2534,2662,2790,2918,3046,3174,3302,3430,3558,3664,3792,3872,4160,4240,6112,6160,6470,6608,6784,6800,6992,7088,7232,7248,42528,43216,43264,43472,43504,43600,44016,65296},\n[1]={49,1633,1777,1985,2407,2535,2663,2791,2919,3047,3175,3303,3431,3559,3665,3793,3873,4161,4241,6113,6161,6471,6609,6785,6801,6993,7089,7233,7249,42529,43217,43265,43473,43505,43601,44017,65297},\n[2]={50,1634,1778,1986,2408,2536,2664,2792,2920,3048,3176,3304,3432,3560,3666,3794,3874,4162,4242,6114,6162,6472,6610,6786,6802,6994,7090,7234,7250,42530,43218,43266,43474,43506,43602,44018,65298},\n[3]={51,1635,1779,1987,2409,2537,2665,2793,2921,3049,3177,3305,3433,3561,3667,3795,3875,4163,4243,6115,6163,6473,6611,6787,6803,6995,7091,7235,7251,42531,43219,43267,43475,43507,43603,44019,65299},\n[4]={52,1636,1780,1988,2410,2538,2666,2794,2922,3050,3178,3306,3434,3562,3668,3796,3876,4164,4244,6116,6164,6474,6612,6788,6804,6996,7092,7236,7252,42532,43220,43268,43476,43508,43604,44020,65300},\n[5]={53,1637,1781,1989,2411,2539,2667,2795,2923,3051,3179,3307,3435,3563,3669,3797,3877,4165,4245,6117,6165,6475,6613,6789,6805,6997,7093,7237,7253,42533,43221,43269,43477,43509,43605,44021,65301},\n[6]={54,1638,1782,1990,2412,2540,2668,2796,2924,3052,3180,3308,3436,3564,3670,3798,3878,4166,4246,6118,6166,6476,6614,6790,6806,6998,7094,7238,7254,42534,43222,43270,43478,43510,43606,44022,65302},\n[7]={55,1639,1783,1991,2413,2541,2669,2797,2925,3053,3181,3309,3437,3565,3671,3799,3879,4167,4247,6119,6167,6477,6615,6791,6807,6999,7095,7239,7255,42535,43223,43271,43479,43511,43607,44023,65303},\n[8]={56,1640,1784,1992,2414,2542,2670,2798,2926,3054,3182,3310,3438,3566,3672,3800,3880,4168,4248,6120,6168,6478,6616,6792,6808,7000,7096,7240,7256,42536,43224,43272,43480,43512,43608,44024,65304},\n[9]={57,1641,1785,1993,2415,2543,2671,2799,2927,3055,3183,3311,3439,3567,3673,3801,3881,4169,4249,6121,6169,6479,6617,6793,6809,7001,7097,7241,7257,42537,43225,43273,43481,43513,43609,44025,65305}\n}\n\nspaceCharacters = {}\nfor _, code in pairs({32,160,5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8203,8239,8287,12288,65279}) do\n  spaceCharacters[code] = true\nend\n\nhyphenCharacters = {}\nfor _, code in pairs({45,8208,8209,8210,8211,8212,8213,11834,11835,65112,65123,65293}) do\n  hyphenCharacters[code] = true\nend\n\ndigitCharacters = {}\nfor digit, arr in pairs(digits_table) do\n  for _, code in pairs(arr) do\n    digitCharacters[code] = tostring(digit) -- strings are interpreted as 'true' for boolean expressions, even empty ones\n  end\nend\n\nwhitespaceCharacters = {}\nfor _, code in pairs({9,10,11,12,13,28,29,30,31,133,8232,8233}) do\n  whitespaceCharacters[code] = true\nend\nfor code, _ in pairs(spaceCharacters) do\n  whitespaceCharacters[code] = true\nend\n\nillegalCharacters   = {}\n-- put several character ranges into the illegalCharacters table\nlocal illegalCharacterRanges =\n          {\n            {0, 64},    -- before uppercase letters\n            {91, 96},   -- before lowercase letters\n            {123, 191}, -- before accented letters\n            {215, 215}, {247, 247}, -- multiplication and division sign\n            {448, 451}, -- symbols\n            {688, 767}, -- symbols\n          }\nfor _, range in pairs(illegalCharacterRanges) do\n  local code_st, code_end = table.unpack(range)\n  for code = code_st, code_end do\n    illegalCharacters[code] = true\n  end\nend\n-- include hyphens\nfor code, _ in pairs(hyphenCharacters) do\n  illegalCharacters[code] = true\nend\n-- include whitespace characters\nfor code, _ in pairs(whitespaceCharacters) do\n  illegalCharacters[code] = true\nend\n-- include digit characters\nfor code, _ in pairs(digitCharacters) do\n  illegalCharacters[code] = true\nend\n\nfunction findInArray(val,arr,cmp_func) --cmp_func is optional, a function with two arguments that returns a boolean value\n  -- returns the index of the value in the table\n  if type(arr) ~= \"table\" then\n    return nil\n  end\n  if cmp_func ~= nil then\n    if type(cmp_func) == \"function\" then\n      for i, v in pairs(arr) do\n        success, res = pcall(cmp_func,v,val)\n        if success then\n          if res == true then\n            return i\n          end\n        else\n          error(\"findInArray:custom compare function failed with error:\"..tostring(res))\n        end\n      end\n    else\n      error(\"findInArray:custom compare function is not a function or does not have 2 arguments.\")\n    end\n  else\n    for i, v in pairs(arr) do\n      if v == val then\n        return i\n      end\n    end\n  end\n  return nil\nend\n\nfunction printTable(t,return_as_string,table_id_list)\n\tlocal s\n\treturn_as_string = return_as_string == true -- default is false\n\tif table_id_list == nil then -- used if table has been seen before. don't display it again\n\t\ttable_id_list = {}\n\tend\n\tif type(t) == \"nil\" or type(t) == \"boolean\" then\n\t\ts = string.upper(tostring(t))\n\telseif type(t) == \"number\" or type(t) == \"function\" then\n\t\ts = tostring(t)\n\telseif type(t) == \"table\" and table_id_list[t] == nil then\n    table_id_list[t] = true\n    local strings_list = {}\n    for i, v in pairs(t) do\n      table.insert(strings_list,tostring(i)..\":\"..printTable(v,true,table_id_list))\n    end\n    s = \"{\"..table.concat(strings_list,\",\")..\"}\"\n\telse\n\t\ts = '\"'..tostring(t)..'\"'\n\tend\n\tif return_as_string then\n\t\treturn s\n\telse\n\t\treturn print(\"\"..string.gsub(s,\"%[([0-9A-Fa-f][0-9A-Fa-f]+)%]\",\"[#%1]\"))\n\tend\nend\n\n\nfunction onLoad(saveState)\n\n  -- Codenames script version\n  version = \"3.2.3a\"\n\n  ----------[ Script object initialization ]----------\n  -- Control panels and table objects\n  customTable     = getObjectFromGUID(\"bab013\")\n  tableObject     = getObjectFromGUID(\"0a61c6\")\n\n  -- Game objects\n  cardTemplates   = getObjectFromGUID(\"2fb333\")\n  extraBlue       = getObjectFromGUID(\"1e9282\")\n  extraRed        = getObjectFromGUID(\"3ef1ca\")\n  redToken        = getObjectFromGUID(\"f3cdf2\")\n  blueToken       = getObjectFromGUID(\"3f75b3\")\n  buttonRed       = getObjectFromGUID(\"f16a9a\")\n  buttonBlue      = getObjectFromGUID(\"c91f34\")\n  shootingStars   = getObjectFromGUID(\"8430cf\")\n\n  ----------[ Interactable objects ]----------\n  -- Control panels and table objects\n  customTable.interactable    = false\n  tableObject.interactable    = false\n\n  -- Game objects\n  cardTemplates.interactable  = false\n  extraBlue.interactable      = false\n  extraRed.interactable       = false\n  redToken.interactable       = false\n  blueToken.interactable      = false\n  shootingStars.interactable  = false\n\n  -- Create variable for storing typed clues\n  currentEnteredClue = {}\n\n  buttonBlue.createButton({\n  label=\"[END TURN]\", click_function=\"endTurn\", function_owner=self,\n    position={0,-0.15,0}, rotation={0,90,0}, height=1000, width=2000, font_size=10\n  })\n\n  buttonRed.createButton({\n  label=\"[END TURN]\", click_function=\"endTurn\", function_owner=self,\n    position={0,-0.15,0}, rotation={0,90,0}, height=1000, width=2000, font_size=10\n  })\n\n  -- Make agents non-selectable\n  for agentGUID, agentData in pairs(agents) do\n    local agentObject = getObjectFromGUID(agentGUID)\n    if agentObject then\n      agentObject.drag_selectable = false\n    end\n  end\n\n  -- Display disclaimer\n  for _, player in ipairs(Player.getPlayers()) do\n    player.print(chatDisclaimer, {1, 1, 1})\n  end\n\n  -- Load save state - if one exists\n  local decodedSaveState = JSON.decode(saveState)\n  if decodedSaveState != nil and decodedSaveState.version == version and decodedSaveState.gameState != -2 then\n    -- Load the previous settings and update the view\n    settings = decodedSaveState.settings\n    tableObject.call(\"updateSettings\")\n\n    if decodedSaveState.gameState.status != -2 then\n      -- Return players to their original seats if loading a very recent save\n      if decodedSaveState.gameState.status == 1 and os.time() - decodedSaveState.time < 60 then\n        tableObject.call(\"assignSeats\",decodedSaveState.seating)\n      end\n\n      -- Load the previous gameState\n      gameState = decodedSaveState.gameState\n\n      -- Load the analytics data\n      analytics = decodedSaveState.analytics\n\n      -- Load the card data and update their UI\n      cards = decodedSaveState.cards\n      dealCards()\n\n      -- Load decks and their selections\n      deck = decodedSaveState.deck\n\n      if getMultipleDeckMode() then\n        tableObject.UI.setAttribute(\"deckModeSwitch\", \"color\", \"#96e592\")\n      else\n        tableObject.UI.setAttribute(\"deckModeSwitch\", \"color\", \"#ffffff\")\n      end\n      tableObject.UI.setAttribute(\"deckSearch\", \"text\", deck.searchTerm)\n\n      -- Fudge the deck list to pretend like we have the full list of decks while the real one loads\n      local ind = 1\n      for i = 1, deck.matchingDecks do\n        local dummy_entry = {deckID=deck.currentDeckList[1].deckID,language=deck.currentDeckList[1].language,name=deck.searchTerm or \"\", author={}}\n        if ind <= #deck.currentDeckList and i >= (deck.pageNum - 1) * deck.pageSize + 1 and i <= deck.pageNum * deck.pageSize then\n          dummy_entry = deck.currentDeckList[ind]\n          ind = ind + 1\n        end\n        table.insert(deckHandler.entireDeckList,dummy_entry)\n      end\n      refreshDeckElements()\n      -- wait 5 seconds to refresh the deck list to prevent multiple large requests when rewinding\n      deckHandler.fetchingDecks = true\n      Wait.time(api_getDecks, 5, 1)\n\n      -- Load Turn Indicators\n      local currentTurn = (gameState.turnTracker == 0 and \"red\" or \"blue\") .. \"Turn\"\n      local teamColorTurn = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n      tableObject.UI.setAttribute(currentTurn, \"active\", true)\n      tableObject.UI.setAttribute(currentTurn .. \"BG\", \"active\", true)\n      tableObject.UI.setAttribute(currentTurn .. \"Square\", \"active\", true)\n      tableObject.UI.setAttribute(\"timer\", \"outline\", teamColorTurn)\n\n      -- Update the enabled property for agents\n      agents = decodedSaveState.agents\n\n      -- Make the correct extra agent interactable\n      extraBlue.interactable = agents[extraBlue.guid].enabled\n      extraRed.interactable = agents[extraRed.guid].enabled\n\n      for agentGUID, agentData in pairs(agents) do\n        if agentData.covering ~= nil then\n          coverCard(agentData.covering, agentGUID)\n        elseif agentData.enabled and getObjectFromGUID(agentGUID) then\n          -- use onObjectDrop to reset its position if it is out of place\n          onObjectDrop(\"Black\", getObjectFromGUID(agentGUID))\n        end\n      end\n    end\n  end\n  if not deckHandler.fetchingDecks then\n    -- Get the list of decks\n    api_getDecks()\n  end\n\n  for _, player in ipairs(Player.getPlayers()) do\n    if player.host then\n      analytics.host = player.steam_id\n      break\n    end\n  end\n\n  -- Start the AFK loop checker\n  if settings.afkDetection.enabled then\n    settings.afkDetection.waitId = Wait.time(afkCheckLoop, 1, -1)\n  end\n\n  -- If there are many custom assets in the save, sometimes the global xml UI won't load\n  -- reset it for everyone in the room\n  Wait.time(function()\n         UI.setXml(globalXmlText)\n        end,\n        5, 1)\nend\n\nfunction onSave()\n  local saveData = {}\n\n  saveData.version    = version\n  saveData.gameState  = gameState\n  saveData.settings   = settings\n  saveData.analytics  = analytics\n  saveData.cards      = cards\n  saveData.agents     = agents\n  saveData.deck       = deck\n\n  saveData.time       = os.time()\n  saveData.seating    = {}\n  for _, p in pairs(Player.getPlayers()) do\n    if p.color != \"Grey\" then\n      saveData.seating[p.steam_id] = p.color\n    end\n  end\n\n  return JSON.encode(saveData)\nend\n\n------------------------------------------------------------------------\n--------------------[ SETTERS/GETTERS FOR SETTINGS ]--------------------\n------------------------------------------------------------------------\n\nfunction setShuffle(enabled) settings.playerShuffle = enabled end\nfunction getShuffle() return settings.playerShuffle end\n\nfunction setQueue(enabled) settings.codemasterQueue = enabled end\nfunction getQueue() return settings.codemasterQueue end\n\nfunction setSwitcher(enabled) settings.colorSwitcher = enabled end\nfunction getSwitcher() return settings.colorSwitcher end\n\nfunction setTilting(enabled) settings.cardTilting = enabled end\nfunction getTilting() return settings.cardTilting end\n\nfunction setMultivoting(enabled)\n  settings.multivoting = enabled\n  -- Put or remove multivoting message on the table\n  if enabled then\n    local text = spawnObject({\n     position = {x=0, y=0.961133063, z=-4.9},\n     rotation = {90.0,0,0.0},\n     type = \"3DText\"\n    })\n    text.TextTool.setValue(\"MULTIVOTING ENABLED\")\n    text.TextTool.setFontColor(\"Orange\")\n    text.TextTool.setFontSize(80)\n  else\n    for _, o in pairs(getObjects()) do\n      if o.type ==  \"3D Text\" and o.TextTool.getValue() == \"MULTIVOTING ENABLED\" then\n        o.destruct()\n      end\n    end\n  end\nend\nfunction getMultivoting() return settings.multivoting end\n\nfunction setAfk(enabled)\n  settings.afkDetection.enabled = enabled\n  if settings.afkDetection.waitId != nil then\n    Wait.stop(settings.afkDetection.waitId)\n    settings.afkDetection.waitId = nil\n  end\n  if settings.afkDetection.enabled then\n    afk.movementInfo = {}\n    settings.afkDetection.waitId = Wait.time(afkCheckLoop, 1, -1)\n  end\nend\nfunction getAfk() return settings.afkDetection.enabled end\n\nfunction setAfkTime(value)\n  afk.movementInfo = {}\n  settings.afkDetection.threshold = value\nend\nfunction getAfkTime() return settings.afkDetection.threshold end\n\nfunction setTimerUsed(enabled)\n  settings.timer.enabled = enabled\n  if settings.timer.enabled then\n    if gameState.status == 1 then\n      startTime()\n    else\n      tableObject.call(\"stopTimer\", true)\n    end\n  else\n    -- Disable the timer\n  end\nend\nfunction getTimerUsed() return settings.timer.enabled end\n\nfunction setAfkTime(value)\n  afk.movementInfo = {}\n  settings.afkDetection.threshold = value\nend\nfunction getAfkTime() return settings.afkDetection.threshold end\n\nfunction getTimer() return settings.timer.enabled end\n\nfunction setTimer1Time(value) settings.timer.initial = value end\nfunction getTimer1Time() return settings.timer.initial end\n\nfunction setTimer2Time(value) settings.timer.subsequent = value end\nfunction getTimer2Time() return settings.timer.subsequent end\n\nfunction setAutokick(enabled) settings.automod.autokick = enabled end\nfunction getAutokick() return settings.automod.autokick end\n\nfunction toggleDeckMode() deck.multiple = not deck.multiple end\nfunction getMultipleDeckMode() return deck.multiple end\n\nfunction afkCheckLoop()\n  if settings.afkDetection.enabled then\n    for _, player in pairs(Player.getPlayers()) do\n      if afk.personInfo[player.steam_id] and afk.personInfo[player.steam_id].isNonVrPlayer then\n        -- If the player was eventually detected as a non-VR player then check if their cursor position has moved\n        local movementInfo = afk.movementInfo[player.steam_id]\n        if movementInfo == nil then\n          -- They are new so set their data and skip them\n          afk.movementInfo[player.steam_id] = {\n            timestamp = Time.time,\n            cursorPosition = player.getPointerPosition() or Vector(0, 0, 0),\n            countdown = nil\n           }\n          break\n        end\n\n        if player.color ~= \"Grey\" and player.color ~= \"Black\" and player.color ~= \"Red\" and player.color ~= \"Blue\" and not player.blindfolded then\n          -- Only if the player is seated as a guesser\n          local pos = player.getPointerPosition()\n          if pos != nil then\n            local max_delta = 0\n            for _, coord in pairs({'x','y','z'}) do\n              max_delta = math.max(max_delta,math.abs(movementInfo.cursorPosition[coord] - pos[coord]))\n            end\n            if max_delta > 0.01 then\n              -- Cursor position isn't the same. log the new position\n              movementInfo.timestamp = Time.time\n              movementInfo.cursorPosition = pos\n              movementInfo.countdown = nil\n            else\n              if Time.time - movementInfo.timestamp > settings.afkDetection.threshold * 60 - 5 then\n                -- Since this function isn't called exactly every second, use a pretty countdown\n                if movementInfo.countdown == nil then\n                  movementInfo.countdown = 5\n                end\n                if movementInfo.countdown < 0 then\n                  -- Switch player to spectator\n                  player.broadcast(\"You have been moved to spectator for AFKing more than \" .. tostring(settings.afkDetection.threshold) .. \" minute(s).\", redColor)\n                  printToAll(\"Player \" .. tostring(player.steam_name) .. \" has been moved to spectator for being AFK for more than \" .. tostring(settings.afkDetection.threshold) .. \" minute(s).\",  stringColorToRGB(player.color))\n                  player.changeColor(\"Grey\")\n                else\n                  player.broadcast(\"You will be removed due to AFK in: \" .. movementInfo.countdown, redColor)\n                end\n                movementInfo.countdown = movementInfo.countdown - 1\n              else\n                movementInfo.countdown = nil\n              end\n            end\n          end\n        else\n          -- If the player is immune to greying, then pretend like they moved their pointer\n          movementInfo.timestamp = Time.time\n          movementInfo.cursorPosition = Vector(0, 0, 0)\n          movementInfo.countdown = nil\n        end\n      elseif player.color ~= \"Grey\" then\n        -- Add pointer rotation to the list for the player\n        local personInfo = afk.personInfo[player.steam_id]\n        if personInfo == nil then\n          -- Person never seen before so create their profile and skip them\n          afk.personInfo[player.steam_id] = {\n            isNonVrPlayer = false,\n            currentPointerRotation = player.getPointerRotation(),\n            cprChanged = false,\n            uniquePointerRotations = {},\n            uniquePointerRotationsCount = 0\n          }\n          break\n        end\n\n        local rot = player.getPointerRotation()\n        if personInfo.currentPointerRotation != rot then\n          -- Wait as many cycles as it takes for any 'lookAt' commands to settle\n          personInfo.cprChanged = true\n        elseif personInfo.cprChanged == true then\n          -- If rotation is too close to a whole number, assume it was done by the \"lookAt\" command and ignore the change\n          if rot % 1 > 0.0001 and rot % 1 < 0.9999 then\n            if not personInfo.uniquePointerRotations[rot] then\n              -- We found a unique pointer rotation. add it to their list\n              personInfo.uniquePointerRotations[rot] = true\n              personInfo.uniquePointerRotationsCount = personInfo.uniquePointerRotationsCount + 1\n              if personInfo.uniquePointerRotationsCount >= afk.nonVrThreshold then\n                -- This is a non-VR person so set them to grey if their cursor position doesn't change\n                personInfo.isNonVrPlayer = true\n              end\n            end\n          end\n          personInfo.cprChanged = false\n        end\n        personInfo.currentPointerRotation = rot\n      end\n    end\n  end\nend\n\nfunction refreshDeckElements()\n  -- Get current deck elements to show\n\n  local deckList = {}\n\n  -- Keep a count of decks that would make it into the pages\n  local count = 0\n  -- Matching decks between these counts will be included in the displayed deck list\n  local count_min = (deck.pageNum - 1) * deck.pageSize + 1\n  local count_max = deck.pageNum * deck.pageSize\n\n  for i = 1, #deckHandler.entireDeckList do\n    if deck.searchTerm == nil or deck.searchTerm == \"\" or #deck.searchTerm > 100\n        or deckHandler.entireDeckList[i][\"author\"] and deckHandler.entireDeckList[i][\"author\"][\"displayName\"] and string.find(deckHandler.entireDeckList[i][\"author\"][\"displayName\"], deck.searchTerm, 1, true)\n        or deckHandler.entireDeckList[i][\"name\"] and string.find(deckHandler.entireDeckList[i][\"name\"], deck.searchTerm, 1, true)\n        or deckHandler.entireDeckList[i][\"description\"] and string.find(deckHandler.entireDeckList[i][\"description\"], deck.searchTerm, 1, true)\n      then\n\n      -- When the count of the deck is in the correct range, add it to the list of decks to display\n      count = count + 1\n      if count >=  count_min and count <= count_max then\n        table.insert(deckList, deckHandler.entireDeckList[i])\n      end\n    end\n  end\n\n  -- Check if we are past the last page and redo function\n  if count > 0 and #deckList == 0 then\n    deck.pageNum = math.ceil(count / deck.pageSize)\n    refreshDeckElements()\n    return\n  end\n\n  -- Set this to be able to calculate the final page number available\n  deck.matchingDecks = count\n\n  for i = 1, 20, 1 do\n    if deckList[i] then\n      tableObject.UI.setAttribute(\"deck\" .. i .. \"Button\", \"onClick\", \"setDeck(\" .. deckList[i][\"deckID\"] .. \")\")\n      -- Deck image\n      if deckList[i][\"author\"][\"steamID\"] == nil then\n        tableObject.UI.setAttribute(\"deck\" .. i .. \"Official\", \"active\", true)\n        tableObject.UI.setAttribute(\"deck\" .. i .. \"Image\", \"active\", false)\n      elseif deckList[i][\"author\"][\"profilePicture\"] then\n        tableObject.UI.setAttribute(\"deck\" .. i .. \"Official\", \"active\", false)\n\n        tableObject.UI.setAttributes(\"deck\" .. i .. \"Image\", {\n          active  = true,\n          image   = deckList[i][\"author\"][\"steamID\"]\n        })\n      end\n\n      tableObject.UI.setAttributes(\"deck\" .. i .. \"Name\", {\n        text      = deckList[i][\"name\"]\n      })\n      tableObject.UI.setAttributes(\"deck\" .. i .. \"Author\", {\n        text    = (deckList[i][\"author\"][\"displayName\"] and (\"by \" .. deckList[i][\"author\"][\"displayName\"]) or \"Official Deck\")\n      })\n      tableObject.UI.setAttributes(\"deck\" .. i .. \"Description\", {\n        text    = deckList[i][\"description\"],\n        active  = (deckList[i][\"description\"] == nil and \"false\" or \"true\")\n      })\n\n      tableObject.UI.setAttribute(\"deck\" .. i .. \"Button\", \"color\", \"#ffffff\")\n      for deckIndex, deckGUID in ipairs(deck.selected) do\n        if deckGUID == deckList[i][\"deckID\"] then\n          tableObject.UI.setAttribute(\"deck\" .. i .. \"Button\", \"color\", \"#aaeaa7\")\n          break\n        end\n      end\n\n      tableObject.UI.setAttribute(\"deck\" .. i, \"active\", true)\n    else\n      tableObject.UI.setAttribute(\"deck\" .. i, \"active\", false)\n    end\n  end\n  tableObject.UI.setValue(\"pageMarker\", \"Page: \" .. deck.pageNum .. \" / \" .. math.ceil(deck.matchingDecks / deck.pageSize))\n\n  -- Save the current deck list\n  deck.currentDeckList = deckList\nend\n\nfunction previousPage()\n  if (deck.pageNum <= 1) then\n    return\n  end\n\n  deck.pageNum = deck.pageNum - 1\n  refreshDeckElements()\nend\n\nfunction nextPage()\n  if (deck.pageNum >= math.ceil(deck.matchingDecks / deck.pageSize)) then\n    return\n  end\n\n  deck.pageNum = deck.pageNum + 1\n  refreshDeckElements()\nend\n\nfunction searchDecks(searchTerm)\n  deck.searchTerm = searchTerm\n\n  if deck.searchDelay then\n    Wait.stop(deck.searchDelay)\n    deck.searchDelay = nil\n  end\n\n  local tm = os.time()\n  deck.searchDelay = Wait.condition(function()\n    deck.pageNum = 1\n    refreshDeckElements()\n    deck.searchDelay = nil\n      end,\n      function()\n        return os.time() - tm > 0.5 and not deckHandler.fetchingDecks\n      end,\n      10, function() end)\nend\n\nfunction clueEntered(player, value)\n  -- Because of how MoonSharp handles its matching expressions,\n  -- absolutely no expression matching from the string library can be used for unicode clues.\n  -- It converts all characters to values 0..255 before running the expression on it.\n  -- eg. %s will match all characters with codes 0x0A, 0x20, 0x10A, 0x400A, 0x7020\n  -- string.lower upper find etc. work fine and properly even for other character sets\n\n  local color = player.color\n  local newLineInd = string.find(value, \"\\n\")\n  if newLineInd == nil then\n    -- Save the clue for when the user presses enter\n    currentEnteredClue[color] = value\n  else\n    -- Get the clue from before the user pressed enter\n    if currentEnteredClue[color] then\n      value = currentEnteredClue[color]\n      currentEnteredClue[color] = nil\n    else\n      value = \"\"\n    end\n\n    -- Reset the text box\n    local resetInput = {\n      text          = \"\",\n      placeholder   = \"Enter clue here\"\n    }\n    UI.setAttributes(color:lower() .. \"ClueText\", resetInput)\n\n    --if the clue is empty then do nothing\n    if #value == 0 then\n      return\n    end\n\n    -- if the game hasn't been started, a clue cannot be entered\n    if gameState.status ~= 1 then\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You must start a game to enter a clue! [a020f0]«\")\n      return\n    end\n\n    -- Make sure that it's the current codemaster's turn\n    if (color == \"Blue\" and gameState.turnTracker == 0) or (color == \"Red\" and gameState.turnTracker == 1) then\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]It's not your turn to enter a clue! [a020f0]«\")\n      return\n    end\n\n    -- if the clue is long, dont bother processing it\n    if #value > 50 then\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Invalid clue. Please enter a valid clue and push ENTER! [a020f0]«\")\n      return\n    end\n\n    -- Parse the entered clue into its respective parts\n    local clue, number, error = getClueDetails(value)\n\n    -- Handle clue parsing errors\n    if error then\n      -- Clue wasn't able to be parsed - general error\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Invalid clue. Please enter a valid clue and push ENTER! [a020f0]«\")\n      return\n    elseif number != \"inf\" and tonumber(number) > 9 then\n      -- Clue was larger than 9 words (not 0 or inf)\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Clues cannot be for more than 9 words. [a020f0]«\")\n      return\n    elseif string.len(clue) > 20 then\n      -- Clue was larger than 20 characters\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Clues cannot be longer than 20 characters. [a020f0]«\")\n      return\n    end\n\n    -- Standardize clue to lowercase\n    clue = clue:lower()\n\n    -- Don't allow a clue that isn't covered\n    for cardIndex, cardData in ipairs(cards) do\n      if not cardData.covered and cardData.value:lower() == clue:lower() then\n        Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Invalid clue. That word has not been covered yet, so it may not be used! [a020f0]«\")\n        return\n      end\n    end\n\n    -- Track remaining clues\n    if number == \"inf\" then\n      gameState.guessesLeft = -1\n    elseif tonumber(number) == 0 then\n      gameState.guessesLeft = -1\n    else\n      gameState.guessesLeft = tonumber(number) + 1\n    end\n\n    -- Encode the finished clue\n    encodeClue(color, clue .. \" - \" .. number:gsub(\"inf\", \"∞\"))\n\n    -- Enable voting for the current team\n    gameState.canVote = true\n\n    -- Send analytics data for the new clue\n    api_newClue(clue, (number == \"inf\" and -1 or number), Player[color].steam_id)\n  end\nend\n\nfunction getClueDetails(processedClue)\n  local clueState = {}\n  clueState.PRE_WHITESPACE = 1\n  clueState.INF_N = 2\n  clueState.INF_I = 3\n  clueState.NUMBER = 4\n  clueState.INF_WHITESPACE = 5 -- inf must have 1 space before clue\n  clueState.PRE_CLUE_WHITESPACE = 6 -- this state allows for 1 hyphen\n  clueState.CLUE = 7 -- the clue allows 1 hyphen\n  clueState.CLUE_ON_HYPHEN = 8\n  clueState.POST_WHITESPACE = 9\n\n  local clue = \"\"\n  local number = \"\"\n\n  local invalid = false\n  local state = clueState.PRE_WHITESPACE\n  local hyphenCount = 0\n  -- process clue backwards as it is easier\n  for ind = #processedClue, 1, -1 do\n    -- This state machine will detect an invalid clue and stop processing if it\n    -- finds an invalid character before it reaches the beginning of the input\n    local ch = string.sub(processedClue,ind,ind)\n    local code = string.unicode(ch)\n    if state == clueState.PRE_WHITESPACE then\n      if string.lower(ch) == \"f\" then\n        state = clueState.INF_N\n        number = \"inf\"\n      elseif digitCharacters[code] then\n        state = clueState.NUMBER\n        number = digitCharacters[code]..number\n      elseif whitespaceCharacters[code] then\n        -- continue\n      else\n        invalid = true\n      end\n    elseif state == clueState.INF_N then\n      if string.lower(ch) == \"n\" then\n        state = clueState.INF_I\n      else\n        invalid = true\n      end\n    elseif state == clueState.INF_I then\n      if string.lower(ch) == \"i\" then\n        state = clueState.INF_WHITESPACE\n      else\n        invalid = true\n      end\n    elseif state == clueState.NUMBER then\n      if digitCharacters[code] then\n        number = digitCharacters[code]..number\n      elseif whitespaceCharacters[code] then\n        state = clueState.PRE_CLUE_WHITESPACE\n      elseif hyphenCharacters[code] then\n        state = clueState.PRE_CLUE_WHITESPACE\n        hyphenCount = hyphenCount + 1\n      elseif illegalCharacters[code] then\n        invalid = true\n      else\n        state = clueState.CLUE\n        hyphenCount = 0\n        clue = ch..clue\n      end\n    elseif state == clueState.INF_WHITESPACE then\n      if whitespaceCharacters[code] then\n        state = clueState.PRE_CLUE_WHITESPACE\n      elseif hyphenCharacters[code] then\n        state = clueState.PRE_CLUE_WHITESPACE\n        hyphenCount = hyphenCount + 1\n      else\n        invalid = true\n      end\n    elseif state == clueState.PRE_CLUE_WHITESPACE then\n      if whitespaceCharacters[code] then\n        -- continue\n      elseif hyphenCharacters[code] and hyphenCount < 1 then\n        hyphenCount = hyphenCount + 1\n      elseif illegalCharacters[code] then\n        invalid = true\n      else\n        state = clueState.CLUE\n        hyphenCount = 0\n        clue = ch..clue\n      end\n    elseif state == clueState.CLUE or state == clueState.CLUE_ON_HYPHEN then\n      if whitespaceCharacters[code] then\n        if state == clueState.CLUE_ON_HYPHEN then\n          invalid = true\n        end\n        state = clueState.POST_WHITESPACE\n      elseif hyphenCharacters[code] then\n        state = clueState.CLUE_ON_HYPHEN\n        hyphenCount = hyphenCount + 1\n        if hyphenCount > 1 then\n          invalid = true\n        end\n        clue = ch..clue\n      elseif illegalCharacters[code] then\n        invalid = true\n      else\n        state = clueState.CLUE\n        clue = ch..clue\n      end\n    elseif state == clueState.POST_WHITESPACE then\n      if whitespaceCharacters[code] then\n        -- continue\n      else\n        invalid = true\n      end\n    else\n      invalid = true -- we should never reach here\n    end\n\n    if invalid then\n      -- This is an invalid clue\n      -- print(\"c:\", clue, \" n:\", number, \" i:\", ind, \" ch:\", ch, \" code:\", code, \" state:\", state)\n      return nil, nil, true\n    end\n  end\n\n  if not (state == clueState.CLUE or state == clueState.POST_WHITESPACE) or clue == \"\" then\n    -- We either ended on a hyphen or did not receive a parsable clue\n    return nil, nil, true\n  end\n\n  -- Clean number value\n  if number != \"inf\" then\n    number = tostring(tonumber(number))\n  end\n\n  -- Return the clue and number\n  return clue, number, false\nend\n\nfunction encodeClue(color, clue)\n  local finishedClue\n  local cluePosition\n  local token = color == \"Red\" and redToken or blueToken\n  local broadcastTo = color == \"Red\" and {\"Orange\", \"Yellow\", \"Pink\", \"Brown\"} or {\"Teal\", \"Purple\", \"Green\", \"White\"}\n\n  local clues = color == \"Red\" and gameState.redClues or gameState.blueClues\n  local xPos = color == \"Red\" and -21.05 or 21.05\n  local deletedClues = false\n  local validClues = {}\n\n  -- Check for deleted clues and shift the remaining if need be\n  if #clues > 0 then\n    -- Check for deleted clues\n    for _,clue in ipairs(color == \"Red\" and gameState.redClues or gameState.blueClues) do\n      if getObjectFromGUID(clue) ~= nil then\n        table.insert(validClues, clue)\n      else\n        deletedClues = true\n      end\n    end\n  end\n\n  if deletedClues then\n    if color == \"Red\" then\n      gameState.redClues = validClues\n    else\n      gameState.blueClues = validClues\n    end\n    for i, clue in ipairs(validClues) do\n      local clueObject = getObjectFromGUID(clue)\n      clueObject.setPosition({xPos, 1.5, (12 - (((i - 1) % 8) * 2.05))})\n      clueObject.setRotation({0, 180, 0})\n    end\n  end\n  local finishedClue = token.clone({\n    position     = token.getPosition(),\n    snap_to_grid = true,\n    callback_function = function(clue) table.insert(color == \"Red\" and gameState.redClues or gameState.blueClues, clue.guid) end\n  })\n  finishedClue.createButton({\n      label=clue, function_owner=finishedClue, click_function=\"clue\",\n      position={0,0.2,0}, height=0, width=0, font_size=500, rotation={0,0,0}, scale={2, 2, 4/3}, font_color={1,1,1}\n  })\n  finishedClue.setPosition({xPos, 1.5, (12 - ((#(color == \"Red\" and gameState.redClues or gameState.blueClues) % 8) * 2.05))})\n  finishedClue.setRotation({0, 180, 0})\n  finishedClue.setLock(false)\n  finishedClue.drag_selectable = false\n  finishedClue.setLuaScript(\n    \"function onload()\\n\"\n      .. \"self.createButton({\\n\"\n        .. \"label='\" .. clue .. \"', click_function='nullFunction', function_owner=self,\\n\"\n        .. \"position={0,0.2,0}, height=0, width=0, font_size=500, rotation={0,0,0}, scale={2, 2, 4/3}, font_color={1,1,1}\\n\"\n      .. \"})\\n\"\n    .. \"end\\n\"\n  )\n  printToAll(\"[a020f0]» \" .. (color == \"Red\" and \"[da1918]RED\" or \"[1f87ff]BLUE\") .. \" [ffffff]team's clue is: \" .. (color == \"Red\" and \"[da1918]\" or \"[1f87ff]\") .. clue .. \" [a020f0]«\")\n  for _, playerColor in ipairs(broadcastTo) do\n    Player[playerColor].broadcast(\"[a020f0]» [ffffff]Your clue is: \" .. (color == \"Red\" and \"[da1918]\" or \"[1f87ff]\") .. clue .. \" [a020f0]«\")\n  end\nend\n\nfunction isCodenamesCard(obj)\n  if obj.type == \"Card\" then\n    vals = obj.getCustomObject()\n    if vals.face != nil and string.find(vals.face,\"codenames\")then\n      return true\n    end\n  end\n  return false\nend\n\nfunction isCodenamesClue(obj)\n  if obj.type == \"Board\" then\n    butts = obj.getButtons()\n    if butts != nil and (#butts == 1 and butts[1].click_function == \"nullFunction\" or #butts == 2 and butts[1].click_function == \"clue\") and butts[1].scale == Vector(2, 2, 1.3333) and butts[1].position == Vector(0,0.2,0) then\n      return true\n    end\n  end\n  return false\nend\n\nfunction onObjectEnterContainer(container, object)\n  -- if the displaced object is a codenames card then delete the container and refresh the cards\n  if isCodenamesCard(object) then\n    -- Check whether container is being destroyed so we only do this once for multiple deposited objects\n    if not container.isDestroyed() then\n      container.destruct()\n      dealCardsDelayed()\n    end\n  end\nend\n\nfunction onPlayerConnect(player)\n  -- Send analytics disclaimer\n  player.print(chatDisclaimer, {1, 1, 1})\n\n  -- Keep track of newly joined players that haven't had the global xml reloaded\n  local id = player.steam_id\n  if id then\n    isPlayerNewlyJoined[id] = true\n  end\n\n  -- Check the blacklist for the player\n  WebRequest.get(analytics.url .. \"/games/player/blacklisted/\" .. player.steam_id, function(responseRaw)\n    if responseRaw.is_done and not responseRaw.is_error and responseRaw.text != \"\" then\n      local response = JSON.decode(responseRaw.text)\n\n      if response.record and response.record.dateAdded ~= nil then\n        if settings.automod.autokick then\n          player.kick()\n        end\n        printToAll(\"\\n\", {1, 1, 1})\n        printToAll(player.steam_name .. \" was found in the global Codenames blacklist!\", redColor)\n        printToAll(\"SteamID     : \" .. player.steam_id, redColor)\n        printToAll(\"Date Added  : \" .. response.record.dateAdded, redColor)\n        printToAll(\"Reason      : \" .. response.record.reason, redColor)\n        printToAll(\"\\n\", {1, 1, 1})\n      end\n    end\n  end)\nend\n\nfunction onPlayerDisconnect(player)\n  afk.personInfo[player.steam_id] = nil\n\n  -- End session with player if one exists\n  if gameState.status == 1 then\n    if analytics.sessions[player.steam_id] ~= nil then\n      api_playerSessionEnd(analytics.sessions[player.steam_id])\n    end\n  end\nend\n\nfunction onPlayerChangeColor(color)\n  -- Reset the global xml if the player hasn't had it reloaded while they were in the room\n  if (color == \"Red\" or color == \"Blue\") then\n    local id = Player[color].steam_id\n    if id and isPlayerNewlyJoined[id] then\n      UI.setXml(globalXmlText)\n      Wait.frames(function()\n            UI.setAttributes(\"redClueText\", {text = currentEnteredClue[\"Red\"] or \"\", placeholder   = \"Enter clue here\"})\n            UI.setAttributes(\"blueClueText\", {text = currentEnteredClue[\"Blue\"] or \"\", placeholder   = \"Enter clue here\"})\n          end,\n          2)\n      for _, p in pairs(Player.getPlayers()) do\n        isPlayerNewlyJoined[p.steam_id] = nil\n      end\n    end\n  end\n\n  -- Reset the player's vote (if necessary)\n  if gameState.status == 1 then\n    local cardsToUpdate = {}\n    for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n      if Player[playerColor].steam_id == nil and #voteData ~= 0 then\n        for _, card in pairs(voteData) do\n          cardsToUpdate[card] = true\n        end\n        votes[gameState.turnTracker][playerColor] = {}\n      end\n    end\n    for card, _ in pairs(cardsToUpdate) do\n      updateVoteUI(card)\n    end\n  end\n\n  local endSession = {}\n\n  -- Resolve team changes, if necessary\n  if color == \"Red\" or color == \"Blue\" then\n    Player[color].team = \"Hearts\"\n  elseif color == \"Grey\" then\n    local spectators = Player.getSpectators()\n    for _,spec in ipairs(spectators) do\n      if analytics.sessions[spec.steam_id] ~= nil then\n        table.insert(endSession, analytics.sessions[spec.steam_id])\n      end\n      if spec.team != \"None\" then\n        spec.team = \"None\"\n      end\n    end\n  else\n    if Player[color].team != \"None\" then\n      Player[color].team = \"None\"\n    end\n  end\n\n  if color ~= \"Grey\" and color ~= \"Black\" then\n    if gameState.status == 1 and analytics.sessions[Player[color].steam_id] == nil then\n      api_playerSessionStart(Player[color].steam_id)\n    end\n  elseif gameState.status == 1 and (color == \"Grey\" or color == \"Black\") and #endSession ~= 0 then\n    for _, sessionID in ipairs(endSession) do\n      api_playerSessionEnd(sessionID)\n    end\n  end\nend\n\nfunction startTime()\n  if settings.timer.enabled then\n    if gameState.firstTurn then\n      tableObject.call(\"startTimer\", settings.timer.initial * 60)\n    else\n      tableObject.call(\"startTimer\", settings.timer.subsequent * 60)\n    end\n  end\nend\n\n-- Deck fetching\nfunction setDeck(deckID)\n  if deckID == nil then\n    deck.selected = {}\n    return\n  end\n\n  if not deck.multiple then\n    deck.selected = { deckID }\n  else\n    local exists = 0\n    for deckIndex, deckGUID in ipairs(deck.selected) do\n      if deckGUID == deckID then\n        exists = deckIndex\n      end\n    end\n\n    if exists == 0 then\n      -- Insert the deck into the selected list\n      table.insert(deck.selected, deckID)\n    else\n      -- Remove the deck from the list\n      table.remove(deck.selected, exists)\n    end\n  end\nend\n\nfunction downloadDecks()\n  if deckHandler.fetchingDecks then\n    return\n  end\n  for i = 1, 20, 1 do\n    tableObject.UI.hide(\"deck\" .. i)\n  end\n  api_getDecks()\n  -- Display message when done fetching decks\n  Wait.condition(\n        function() broadcastToAll(\"[a020f0]» [ffffff]Deck list refreshed! [a020f0]«\", redColor) end,\n        function() return not deckHandler.fetchingDecks end,\n        15,\n        function() resetDeckHandler() deckHandler.entireDeckList = deck.currentDeckList refreshDeckElements() error(\"Deck refresh failed\") end\n  )\nend\n\nfunction clearAllVotes()\n  local cardsToUpdate = {}\n  for turnNum, team in pairs(votes) do\n    for seatColor, voteData in pairs(team) do\n      for _, v in pairs(voteData) do\n        cardsToUpdate[v] = true\n      end\n      votes[turnNum][seatColor] = {}\n    end\n  end\n  for card, _ in pairs(cardsToUpdate) do\n    updateVoteUI(card)\n  end\nend\n\n-- Restrict newGame permissions to Red/Blue/Promoted/Host\nfunction startGame(player)\n  -- Check to see whether a new game is currently being set up\n  if gameState.status == 0 then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]A new game is already starting. Please wait. [a020f0]«\")\n    return\n  end\n\n  -- Check to see if a deck has been chosen\n  if #deck.selected == 0 then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You must select a deck before starting. [a020f0]«\")\n    return\n  end\n\n  -- A new game is currently starting - block any other new game requests\n  gameState.status = 0\n  Wait.time(function() if gameState.status == 0 then gameState.status = 1 end end, 8, 1)\n\n  -- Reset the game to its original state\n  resetGame()\n\n  if settings.playerShuffle then\n    startLuaCoroutine(tableObject, \"shufflePlayers\")\n  elseif settings.codemasterQueue then\n    startLuaCoroutine(tableObject, \"swapCodemasters\")\n  else\n    api_gameStart()\n  end\nend\n\nfunction resetGame()\n  -- Reset card data\n  for cardNum, cardData in ipairs(cards) do\n    local cardObject = getObjectFromGUID(cardData.guid)\n    if cardObject then\n      cardObject.interactable = true\n      cardObject.setLock(false)\n    end\n\n    cardData.id       = nil\n    cardData.value    = nil\n    cardData.color    = nil\n    cardData.covered  = false\n  end\n\n  -- Reset the agent cards to their start positions\n  for guid, agentData in pairs(agents) do\n    local agentObject = getObjectFromGUID(guid)\n    if agentObject then\n      local isExtraCard = (agentObject.guid == extraBlue.guid) or (agentObject.guid == extraRed.guid)\n      agentObject.interactable = not isExtraCard\n      agentObject.setLock(isExtraCard)\n      agentObject.setPositionSmooth(isExtraCard and {0, -2, -14} or agentData.position)\n      agentObject.setRotationSmooth({0, 180, 180})\n      agents[agentObject.guid].enabled = not isExtraCard\n      agents[agentObject.guid].covering = nil\n    end\n  end\n\n  -- Delete clue tiles\n  for _, obj in pairs(getObjects()) do\n    if isCodenamesClue(obj) then\n      obj.destruct()\n    end\n  end\n\n  -- Reset team votes\n  clearAllVotes()\n\n  -- Reset game state variables\n  gameState.firstTurn   = true\n  gameState.guessesLeft = -1\n  gameState.canVote     = false\n  gameState.redClues    = {}\n  gameState.blueClues   = {}\nend\n\nfunction setupGame()\n  -- Determine which team should go first (0 = RED; 1 = BLUE)\n  gameState.turnTracker = math.random(2) - 1\n\n  -- Shuffle the keymap\n  local bank = {\"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"White\", \"White\", \"White\", \"White\", \"White\", \"White\", \"White\", \"Black\"}\n  if gameState.turnTracker == 0 then\n    -- Add another red\n    bank = table.insert(bank, \"Red\")\n  else\n    -- Add another blue\n    bank = table.insert(bank, \"Blue\")\n  end\n\n  local words = deck.words\n\n  for i = 1, 25, 1 do\n    local nextCard = table.remove(words, math.random(1, #words))\n    cards[i].id     = nextCard.id\n    cards[i].value  = nextCard.word:upper()\n    cards[i].color  = table.remove(bank, math.random(1, #bank))\n  end\n\n  -- Choose the correct double agent card for which team goes first\n  local extraCard = gameState.turnTracker == 0 and extraRed or extraBlue\n\n  -- Set the correct double card to red\n  extraCard.setLock(false)\n  extraCard.setRotation({0, 180, 180})\n  extraCard.setPositionSmooth(agents[extraCard.guid].position)\n  extraCard.interactable = true\n  agents[extraCard.guid].enabled = true\n\n  -- Change the turn indicator\n  local previousTurn = (gameState.turnTracker == 0 and \"blue\" or \"red\") .. \"Turn\"\n  local currentTurn = (gameState.turnTracker == 0 and \"red\" or \"blue\") .. \"Turn\"\n  local teamColorTurn = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n  tableObject.UI.setAttribute(previousTurn, \"active\", false)\n  tableObject.UI.setAttribute(currentTurn, \"active\", true)\n  tableObject.UI.setAttribute(previousTurn .. \"BG\", \"active\", false)\n  tableObject.UI.setAttribute(currentTurn .. \"BG\", \"active\", true)\n  tableObject.UI.setAttribute(previousTurn .. \"Square\", \"active\", false)\n  tableObject.UI.setAttribute(currentTurn .. \"Square\", \"active\", true)\n  tableObject.UI.setAttribute(\"timer\", \"outline\", teamColorTurn)\n  printToAll(\"[a020f0]» \" .. (teamColorTurn == \"Red\" and \"[da1918]RED\" or \"[1f87ff]BLUE\") .. \" [ffffff]team's turn! [a020f0]«\")\n\n  dealCards()\n\n  -- Start the timer\n  gameState.firstTurn = true\nend\n\nfunction dealCardsDelayed()\n  if dealCards_WaitId != nil then\n    Wait.stop(dealCards_WaitId)\n    dealCards_WaitId = nil\n  end\n  dealCards_WaitId = Wait.time(dealCards,2.5,1)\nend\n\n-- Deals the cards on the board\nfunction dealCards()\n  -- check all objects to delete unused codenames cards\n  for _, obj in pairs(getObjects()) do\n    if isCodenamesCard(obj) and not isCard(obj.guid) then\n      obj.destruct()\n    end\n  end\n  for i = 1, 25, 1 do\n    local cardObject = getObjectFromGUID(cards[i].guid)\n    if cards[i].guid == nil or cardObject == nil then\n      -- Get new card if it doesn't exist\n      local c = cardTemplates.takeObject({\n        position            = {cards[i].position.x, 1.03, cards[i].position.z},\n        rotation            = {0, 180, 0},\n        snap_to_grid        = true,\n        callback_function   = function(card) setCardData(card, i) end\n      })\n    else\n      -- Set the UI\n      setCardData(cardObject, i)\n    end\n  end\nend\n\nfunction setCardData(card, i)\n  cards[i].guid = card.guid\n\n  card.call(\"setData\", {\n    position  = cards[i].position,\n    text      = cards[i].value,\n    color     = cards[i].color\n  })\n\n  card.setLock(false)\n  card.drag_selectable = false\n\n  card.setName(cards[i].value)\n\n  -- Once the last card has loaded in, allow a new game to be started\n  if i == 25 and gameState.status == 0 then\n    startTime()\n    gameState.status = 1\n  end\nend\n\nfunction findClosestCard(threshold, position)\n  local closestCard =\n  {\n    index = nil,\n    distance = nil\n  }\n\n  for cardIndex,_ in ipairs(cards) do\n    local dX = position.x - cards[cardIndex].position.x\n    local dZ = position.z - cards[cardIndex].position.z\n\n    local d = math.sqrt((dX^2) + (dZ^2))\n\n    if d < threshold then\n      if closestCard.index == nil or d < closestCard.distance then\n        closestCard.index = cardIndex\n        closestCard.distance = d\n      end\n    end\n  end\n\n  return closestCard.index\nend\n\nfunction onObjectDrop(color, agent)\n  -- Ensure that the dropped object is an agent card\n  if gameState.status ~= 1 or agent.type ~= \"Tile\" or agents[agent.guid] == nil then\n    return\n  end\n\n  -- Find the closest card position to the dropped agent\n  local cardIndex = findClosestCard(1.65, agent.getPosition())\n  if cardIndex == nil or cards[cardIndex].covered then\n    -- Either no close card found, or card is already covered\n    agent.setAngularVelocity({0, 0, 0})\n    agent.setVelocity({0, 0, 0})\n    agent.setRotation({0, 180, 180})\n    agent.setPositionSmooth(agents[agent.guid].position)\n    return\n  end\n\n  -- Check to see if the agent and the card are the same color\n  local agentColor = agents[agent.guid].color\n  local cardColor = cards[cardIndex].color\n  if cardColor ~= agentColor then\n    agent.setAngularVelocity({0, 0, 0})\n    agent.setVelocity({0, 0, 0})\n    agent.setRotation({0, 180, 180})\n    agent.setPositionSmooth(agents[agent.guid].position)\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]An agent has been placed incorrectly. You placed a \" .. agentColor .. \" agent on a \" .. cardColor .. \" card. [a020f0]«\")\n    return\n  end\n\n  -- Card has been marked correctly\n  gameState.guessesLeft = gameState.guessesLeft - 1\n  cards[cardIndex].covered = true\n\n  coverCard(cardIndex, agent.guid)\n\n  -- Remove votes on the card\n  for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n    local ind = findInArray(cardIndex,voteData)\n    if ind != nil then\n      table.remove(votes[gameState.turnTracker][playerColor],ind)\n    end\n  end\n  updateVoteUI(cardIndex)\n\n  -- Send analytics data for the guess\n  local players = \"\"\n  local correct = ((gameState.turnTracker == 0 and cardColor == \"Red\") or (gameState.turnTracker == 1 and cardColor == \"Blue\")) and \"TRUE\" or \"FALSE\"\n  for color,_ in pairs(votes[gameState.turnTracker]) do\n    if Player[color].steam_id != nil then\n      players = players .. ((players == \"\") and Player[color].steam_id or (',' .. Player[color].steam_id))\n    end\n  end\n  api_clueGuess(players, cards[cardIndex].id, correct, cardColor:upper())\n\n  local messageColor = {\n    [\"Red\"] = \"da1918\",\n    [\"Blue\"] = \"1f87ff\",\n    [\"White\"] = \"ffffff\",\n    [\"Black\"] = \"191919\"\n  }\n\n  if correct == \"TRUE\" then\n    -- Play the correct sound effect\n    tableObject.AssetBundle.playTriggerEffect(0)\n    printToAll(\"[a020f0]» [31b32b][✓] [\" .. messageColor[cardColor] .. \"]\" .. cardColor:upper() .. \" [ffffff]team has correctly guessed: [\" .. messageColor[cardColor]  ..\"]\" .. cards[cardIndex].value:upper() .. \" [a020f0]«\")\n  else\n    -- Play the wrong sound effect\n    tableObject.AssetBundle.playTriggerEffect(1)\n    local guessingTeam = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n    printToAll(\"[a020f0]» [da1918][✗] [\" .. messageColor[guessingTeam] .. \"]\" .. guessingTeam:upper() .. \" [ffffff]team has incorrectly guessed: [\" .. messageColor[cardColor]  ..\"]\" .. cards[cardIndex].value:upper() .. \" [a020f0]«\")\n  end\n\n  -- Check to see if either red or blue won\n  local redWon = true\n  local blueWon = true\n  for i = 1, 25, 1 do\n    if cards[i].color == \"Red\" and not cards[i].covered then\n      redWon = false\n    elseif cards[i].color == \"Blue\" and not cards[i].covered then\n      blueWon = false\n    end\n\n    if not redWon and not blueWon then\n      -- Skip unnecessary iterations\n      break\n    end\n  end\n\n  if agentColor == \"Black\" or blueWon or redWon then\n    -- End game scenario\n\n    -- Analytics data for end of game\n    if (agentColor == \"Black\" and gameState.turnTracker == 0) or blueWon then\n      -- Red placed black card, blue wins\n      -- or blue placed all of their cards\n      broadcastToAll(\"[a020f0]» [1f87ff]BLUE [ffffff]team wins! [a020f0]«\")\n      api_gameEnd(\"BLUE\")\n    elseif (agentColor == \"Black\" and gameState.turnTracker == 1) or redWon then\n      -- Blue placed black card, red wins\n      -- or red placed all of their cards\n      broadcastToAll(\"[a020f0]» [da1918]RED [ffffff]team wins! [a020f0]«\")\n      api_gameEnd(\"RED\")\n    end\n\n    -- Move the remaining agents to their codes\n    endGame()\n  elseif gameState.guessesLeft == 0 or agentColor == \"White\" or (agentColor == \"Red\" and gameState.turnTracker == 1) or (agentColor == \"Blue\" and gameState.turnTracker == 0) then\n    toggleTurns()\n  else\n    -- Show the pass turn button and change color\n    tableObject.UI.setAttributes(\"passTurn\", {\n      color = gameState.turnTracker == 0 and \"#da1918\" or \"#1f87ff\",\n      active = true\n    })\n  end\nend\n\nfunction playerVote(color, card)\n  -- Update the player's vote\n  if color == \"Grey\" then\n    -- Ignore votes from spectators\n    return\n  end\n\n  if color == \"Red\" or color == \"Blue\" or color == \"Black\" then\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You cannot vote! [a020f0]«\")\n    return\n  elseif votes[gameState.turnTracker][color] == nil then\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]It's not your turn to vote! [a020f0]«\")\n    return\n  elseif not gameState.canVote then\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You can't vote until you've been given a clue! [a020f0]«\")\n    return\n  end\n\n  local ind = findInArray(card,votes[gameState.turnTracker][color])\n  if not settings.multivoting then\n    -- Remove all of player's other votes\n    local cardsToUpdate = {}\n    for _, card in pairs(votes[gameState.turnTracker][color]) do\n      cardsToUpdate[card] = true\n    end\n    votes[gameState.turnTracker][color] = {}\n    for card, _ in pairs(cardsToUpdate) do\n      updateVoteUI(card)\n    end\n  end\n  if ind != nil then\n    if settings.multivoting then\n      -- Remove this player's vote\n      table.remove(votes[gameState.turnTracker][color],ind)\n      updateVoteUI(card)\n    end\n  else\n    -- Add the player's vote\n    table.insert(votes[gameState.turnTracker][color],card)\n    updateVoteUI(card)\n\n    -- Check to see if the card now has a passing vote\n    local votePassed = false\n    for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n    if Player[playerColor].seated and not Player[playerColor].blindfolded then\n        votePassed = findInArray(card,voteData) != nil\n        if votePassed == false then\n          break\n        end\n      end\n    end\n\n    if votePassed then\n\n      -- Vote passed to pass turn\n      if card == 26 then\n        toggleTurns()\n        return\n      end\n\n      -- Card has been marked correctly\n      gameState.guessesLeft = gameState.guessesLeft - 1\n      cards[card].covered = true\n\n      -- Cover the card\n      coverCard(card, nil)\n\n      -- Remove votes on the card\n      for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n        local ind = findInArray(card,voteData)\n        if ind != nil then\n          table.remove(votes[gameState.turnTracker][playerColor],ind)\n        end\n      end\n      updateVoteUI(card)\n\n      -- Send analytics data for the guess\n      local players = \"\"\n      local correct = ((gameState.turnTracker == 0 and cards[card].color == \"Red\") or (gameState.turnTracker == 1 and cards[card].color == \"Blue\")) and \"TRUE\" or \"FALSE\"\n      for color,_ in pairs(votes[gameState.turnTracker]) do\n        if Player[color].seated then\n          players = players .. ((players == \"\") and Player[color].steam_id or (',' .. Player[color].steam_id))\n        end\n      end\n      api_clueGuess(players, cards[card].id, correct, cards[card].color:upper())\n\n      local messageColor = {\n        [\"Red\"] = \"da1918\",\n        [\"Blue\"] = \"1f87ff\",\n        [\"White\"] = \"ffffff\",\n        [\"Black\"] = \"191919\"\n      }\n      if correct == \"TRUE\" then\n        -- Play the correct sound effect\n        tableObject.AssetBundle.playTriggerEffect(0)\n        printToAll(\"[a020f0]» [31b32b][✓] [\" .. messageColor[cards[card].color] .. \"]\" .. cards[card].color:upper() .. \" [ffffff]team has correctly guessed: [\" .. messageColor[cards[card].color]  ..\"]\" .. cards[card].value:upper() .. \" [a020f0]«\")\n      else\n        -- Play the wrong sound effect\n        tableObject.AssetBundle.playTriggerEffect(1)\n        local guessingTeam = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n        printToAll(\"[a020f0]» [da1918][✗] [\" .. messageColor[guessingTeam] .. \"]\" .. guessingTeam:upper() .. \" [ffffff]team has incorrectly guessed: [\" .. messageColor[cards[card].color]  ..\"]\" .. cards[card].value:upper() .. \" [a020f0]«\")\n      end\n\n      -- Check to see if either red or blue won\n      local redWon = true\n      local blueWon = true\n      for i = 1, 25, 1 do\n        if cards[i].color == \"Red\" and not cards[i].covered then\n          redWon = false\n        elseif cards[i].color == \"Blue\" and not cards[i].covered then\n          blueWon = false\n        end\n\n        if not redWon and not blueWon then\n          -- Skip unnecessary iterations\n          break\n        end\n      end\n\n      if cards[card].color == \"Black\" or blueWon or redWon then\n        -- End game scenario\n\n        if (cards[card].color == \"Black\" and gameState.turnTracker == 0) or blueWon then\n          -- Red placed black card, blue wins\n          -- or blue placed all of their cards\n          broadcastToAll(\"[a020f0]» [1f87ff]BLUE [ffffff]team wins! [a020f0]«\")\n          api_gameEnd(\"BLUE\")\n        elseif (cards[card].color == \"Black\" and gameState.turnTracker == 1) or redWon then\n          -- Blue placed black card, red wins\n          -- or red placed all of their cards\n          broadcastToAll(\"[a020f0]» [da1918]RED [ffffff]team wins! [a020f0]«\")\n          api_gameEnd(\"RED\")\n        end\n\n        -- Move the remaining agents to their codes\n        endGame()\n\n      elseif gameState.guessesLeft == 0 or cards[card].color == \"White\" or (cards[card].color == \"Red\" and gameState.turnTracker == 1) or (cards[card].color == \"Blue\" and gameState.turnTracker == 0) then\n        toggleTurns()\n        local cardsToClear = {}\n        for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n          for _, card in pairs(voteData) do\n            cardsToClear[card] = true\n          end\n          votes[gameState.turnTracker][playerColor] = {}\n        end\n        for card, _ in pairs(cardsToClear) do\n          updateVoteUI(card)\n        end\n      else\n        -- Show the pass turn button and change color\n        tableObject.UI.setAttributes(\"passTurn\", {\n          color = gameState.turnTracker == 0 and \"#da1918\" or \"#1f87ff\",\n          active = true\n        })\n      end\n    end\n  end\nend\n\nfunction coverCard(cardIndex, agentGUID)\n  local cardObject = getObjectFromGUID(cards[cardIndex].guid)\n  for guid, agentData in pairs(agents) do\n    local agentObject = getObjectFromGUID(guid)\n    if agents[guid].enabled and agentData.color == cards[cardIndex].color and agentObject and agentObject.interactable and (agentGUID == nil or agentGUID == guid) then\n      local position = {cards[cardIndex].position.x, 1.03, cards[cardIndex].position.z}\n\n      -- Track the index of the card this agent is covering\n      agents[guid].covering = cardIndex\n\n      -- Lock both cards and set them in place\n      cardObject.interactable = false\n      agentObject.interactable = false\n\n      cardObject.setLock(true)\n      agentObject.setLock(true)\n\n      -- Ensure the tile is on the code\n      cardObject.setRotationSmooth({0, 180, 0})\n      agentObject.setRotationSmooth({0, 180, 180})\n\n      cardObject.setPositionSmooth(position)\n      agentObject.setPositionSmooth(position)\n\n      break\n    end\n  end\nend\n\nfunction updateVoteUI(card)\n  local uiObject = card == 26 and tableObject or getObjectFromGUID(cards[card].guid)\n  if uiObject == nil then\n    return\n  end\n\n  local votesToAdd = {}\n  for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n    if findInArray(card,voteData) != nil then\n      votesToAdd[playerColor] = true\n    end\n  end\n  local votesOnCard =\n  {\n    uiObject.UI.getAttribute(\"vote-1\", \"color\"),\n    uiObject.UI.getAttribute(\"vote-2\", \"color\"),\n    uiObject.UI.getAttribute(\"vote-3\", \"color\"),\n    uiObject.UI.getAttribute(\"vote-4\", \"color\")\n  }\n  local newVotes = {}\n\n  -- Keep the order of the current votes\n  for voteIndex, voteColor in ipairs(votesOnCard) do\n    if voteColor ~= \"Black\" then\n      if findInArray(card,votes[gameState.turnTracker][voteColor]) != nil then\n        table.insert(newVotes, voteColor)\n        votesToAdd[voteColor] = nil\n      end\n    else\n      -- Add the uncounted votes\n      for playerColor,_ in pairs(votesToAdd) do\n        table.insert(newVotes, playerColor)\n      end\n      break\n    end\n  end\n\n  for i = 1,4,1 do\n    if newVotes[i] ~= nil then\n      uiObject.UI.setAttributes(\"vote-\" .. i, {\n        color = newVotes[i],\n        active = true\n      })\n    else\n      uiObject.UI.setAttributes(\"vote-\" .. i, {\n        color = \"Black\",\n        active = false\n      })\n    end\n  end\nend\n\nfunction votePass(color)\n  playerVote(color, 26)\nend\n\nfunction onPlayerAction(player, action, objects)\n  local processAction     = false\n  local actionsToProcess  = {\n    Player.Action.PickUp,\n    Player.Action.RotateIncrementalLeft,\n    Player.Action.RotateIncrementalRight,\n    Player.Action.RotateOver,\n    Player.Action.FlipIncrementalLeft,\n    Player.Action.FlipIncrementalRight,\n    Player.Action.FlipOver,\n    Player.Action.Delete\n  }\n\n  for _, handledAction in ipairs(actionsToProcess) do\n    if action == handledAction then\n      processAction = true\n      break\n    end\n  end\n\n  if not processAction then\n    return\n  end\n\n  if action == Player.Action.Delete then\n    -- if there is an ongoing game and a card is deleted then refresh the cards\n    for _, obj in pairs(objects) do\n      if gameState.status == 1 and isCodenamesCard(obj) then\n        -- Delete word cards and refresh them\n        dealCardsDelayed()\n        obj.destruct()\n      elseif agents[obj.guid] ~= nil then\n        -- Do not delete any agents\n      else\n        -- Delete any other objects in the action\n        obj.destruct()\n      end\n    end\n    -- Prevent deletion of selected objects as we have already delete only what was allowed\n    return false\n  end\n\n  local objectIncludesCard = false\n  local objectIncludesAgent = false\n\n  -- See if there is a card included in the table of objects\n  for _, object in ipairs(objects) do\n    if isCard(object.guid) then\n      objectIncludesCard = true\n    elseif agents[object.guid] ~= nil then\n      objectIncludesAgent = true\n    end\n  end\n\n  if objectIncludesCard and (player.color == \"Blue\" or player.color == \"Red\" or player.color == \"Black\") then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You're not allowed to do that! [a020f0]«\")\n    return false\n  end\n\n  -- Disable interacting with agents if player isn't a codemaster\n  if objectIncludesAgent and player.color ~= \"Blue\" and player.color ~= \"Red\" then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You're not allowed to do that! [a020f0]«\")\n    return false\n  end\n\n  local isPlayerTurn = (votes[gameState.turnTracker][player.color] ~= nil)\n  local errorMessage\n\n  if action == Player.Action.PickUp then\n    if objectIncludesCard and not isPlayerTurn then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]It's not your turn to vote! [a020f0]«\"\n    elseif settings.cardTilting and gameState.status == 1 and not gameState.canVote then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't vote until you've been given a clue! [a020f0]«\"\n    end\n    if #objects == 1 and objects[1].type == \"Card\" and not objects[1].spawning then\n      object = objects[1]\n      for i = 1, 25, 1 do\n        if cards[i].guid == object.guid then\n          if #player.getSelectedObjects() <= 1 then\n            playerVote(player.color, i)\n          end\n          return false\n        end\n      end\n    end\n    local hasCards = false\n    for _, obj in pairs(objects) do\n      if isCard(obj.guid) then\n        obj.removeFromPlayerSelection(player.color)\n        hasCards = true\n      end\n    end\n    if hasCards then\n      return false\n    end\n  elseif action == Player.Action.RotateIncrementalLeft or action == Player.Action.RotateIncrementalRight or action == Player.Action.RotateOver then\n    if objectIncludesCard and not isPlayerTurn then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't tilt cards when it's not your turn! [a020f0]«\"\n    elseif settings.cardTilting and gameState.status == 1 and not gameState.canVote then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't tilt cards until you've been given a clue! [a020f0]«\"\n    end\n  elseif action == Player.Action.FlipIncrementalLeft or action == Player.Action.FlipIncrementalRight or action == Player.Action.FlipOver then\n    if objectIncludesCard and not isPlayerTurn then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't flip cards when it's not your turn! [a020f0]«\"\n    elseif settings.cardTilting and gameState.status == 1 and not gameState.canVote then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't flip cards until you've been given a clue! [a020f0]«\"\n    end\n  end\n\n  if errorMessage ~= nil then\n    player.broadcast(errorMessage, redColor)\n    return false\n  end\nend\n\nfunction isCard(guid)\n  for _, cardData in ipairs(cards) do\n    if guid == cardData.guid then\n      return true\n    end\n  end\n  return false\nend\n\nfunction endGame()\n  clearAllVotes()\n\n  -- Disable voting for any teams\n  gameState.canVote = false\n\n  -- Set the game back to initial state\n  gameState.status = -1\n\n  -- Stop the timer\n  tableObject.call(\"stopTimer\", true)\n\n  -- Hide the pass turn button and change color\n  tableObject.UI.setAttributes(\"passTurn\", {\n    color = \"#aaaaaa\",\n    active = false\n  })\n\n  -- Assign remaining agents to uncovered clues\n  for i = 1, 25, 1 do\n    if not cards[i].covered then\n      coverCard(i, nil)\n    end\n  end\nend\n\nfunction timeExpired()\n  -- Play the timer expired sound\n  tableObject.AssetBundle.playTriggerEffect(2)\n\n  toggleTurns()\nend\n\n-- Command implementations\nfunction onChat(message, player)\n  if not player.admin then\n    return\n  end\n\n  local command, color = processChat(message)\n  local ranCommand = false\n\n  if command == nil then\n    return\n  end\n\n  if command == \"!kick\" then\n    if not isColor(color) then\n      player.broadcast(\"Invalid color!\", redColor)\n      return false\n    end\n\n    if Player[color].steam_id == nil then\n      player.broadcast(\"There's no player seated in \" .. color:lower() .. \"!\", redColor)\n      return false\n    end\n    printToAll(player.steam_name .. \" has kicked \" .. Player[color].steam_name .. \".\", redColor)\n    Player[color].kick()\n    ranCommand = true\n  elseif command == \"!blind\" then\n    if not isColor(color) then\n      player.broadcast(\"Invalid color!\", redColor)\n      return false\n    end\n\n    if Player[color].steam_id == nil then\n      player.broadcast(\"There's no player seated in \" .. color:lower() .. \"!\", redColor)\n      return false\n    end\n    printToAll(player.steam_name .. \" has \" .. (not Player[color].blindfolded and \"blindfolded \" or \"unblindfolded \") .. Player[color].steam_name .. \".\", redColor)\n    Player[color].blindfolded = not Player[color].blindfolded\n    ranCommand = true\n  elseif command == \"!stand\" then\n    if not isColor(color) then\n      player.broadcast(\"Invalid color!\", redColor)\n      return false\n    end\n\n    if not Player[color].seated then\n      player.broadcast(\"There's no player seated in \" .. color:lower() .. \"!\", redColor)\n      return false\n    end\n    printToAll(player.steam_name .. \" has stood \" .. Player[color].steam_name .. \".\", redColor)\n    Player[color].changeColor(\"Grey\")\n    ranCommand = true\n  end\n\n  if ranCommand then\n    return false\n  end\nend\n\nfunction isColor(userColor)\n  for _, color in ipairs(Player.getColors()) do\n    if color ~= \"Grey\" and color:lower() == userColor:lower() then\n      return true\n    end\n  end\n  return false\nend\n\nfunction processChat(message)\n  local raw = string.gmatch(message, \"%S+\")\n  local firstWord = true\n  local command = nil\n  local args = \"\"\n  for word in raw do\n    if firstWord then\n      if word:sub(1, 1) ~= \"!\" then\n        return command, args\n      else\n        command = word\n        firstWord = false\n      end\n    else\n      args = args .. word .. \" \"\n    end\n  end\n\n  return command, args:gsub(\"^%s*(.*%S+)%s*$\", \"%1\"):gsub(\"^%s+$\",\"\")\nend\n\nfunction toggleTurns()\n  -- Diable voting for the current team\n  gameState.canVote = false\n\n  clearAllVotes()\n\n  -- Disable card tilting\n  for _, card in ipairs(cards) do\n    if not card.covered then\n      local cardObject = getObjectFromGUID(card.guid)\n      if settings.cardTilting then\n        cardObject.setLock(true)\n      end\n      cardObject.setRotationSmooth({0, 180, 0})\n    end\n  end\n\n  -- Hide the pass turn button\n  tableObject.UI.setAttributes(\"passTurn\", {\n    color = \"#aaaaaa\",\n    active = false\n  })\n\n  -- Reset the timer warning\n  timerWarning = -1\n\n  -- Make sure it isn't the first turn\n  gameState.firstTurn = false\n\n  -- Reset the guesses each team has left\n  gameState.guessesLeft = -1\n\n  -- Reset the clueID\n  analytics.clueID = nil\n\n  -- Play the button press effect\n  local button = (gameState.turnTracker == 0 and buttonRed or buttonBlue)\n  button.AssetBundle.playTriggerEffect(0)\n\n  -- Change the tracker to the other team's turn\n  gameState.turnTracker = (gameState.turnTracker == 0 and 1 or 0)\n\n  -- Change the location of the turn marker\n  local previousTurn = (gameState.turnTracker == 0 and \"blue\" or \"red\") .. \"Turn\"\n  local currentTurn = (gameState.turnTracker == 0 and \"red\" or \"blue\") .. \"Turn\"\n  local teamColorTurn = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n  tableObject.UI.setAttribute(previousTurn, \"active\", false)\n  tableObject.UI.setAttribute(currentTurn, \"active\", true)\n  tableObject.UI.setAttribute(previousTurn .. \"BG\", \"active\", false)\n  tableObject.UI.setAttribute(currentTurn .. \"BG\", \"active\", true)\n  tableObject.UI.setAttribute(previousTurn .. \"Square\", \"active\", false)\n  tableObject.UI.setAttribute(currentTurn .. \"Square\", \"active\", true)\n  tableObject.UI.setAttribute(\"timer\", \"outline\", teamColorTurn)\n  printToAll(\"[a020f0]» \" .. (teamColorTurn == \"Red\" and \"[da1918]RED\" or \"[1f87ff]BLUE\") .. \" [ffffff]team's turn! [a020f0]«\")\n\n  startTime()\nend\n\nfunction endTurn(button, color)\n  if color == \"Red\" or color == \"Blue\" then\n    -- Is it the current side's turn?\n    if gameState.turnTracker == 0 and button.guid == buttonBlue.guid or gameState.turnTracker == 1 and button.guid == buttonRed.guid then\n      return\n    end\n\n    toggleTurns()\n\n  end\nend\n\n-------------------------------------------------------------------------------\n--------------------------------[[ ANALYTICS ]]--------------------------------\n-------------------------------------------------------------------------------\n\nfunction apiGet(api, callback)\n  WebRequest.get(analytics.url .. api, callback)\nend\n\nfunction apiPost(api, payload, callback)\n  WebRequest.post(analytics.url .. api, payload, callback)\nend\n\nfunction getJSON(responseRaw)\n  if not responseRaw.is_done or responseRaw.is_error or responseRaw.text == \"\" then\n    return nil\n  end\n\n  local response = JSON.decode(responseRaw.text)\n\n  if response.status == \"error\" then\n    print(\"API Error: \" .. response.message)\n    return nil\n  end\n\n  return response\nend\n\n-------------- /games/decks --------------\nfunction api_getDecks()\n  deckHandler.fetchingDecks = true\n\n\n  -- If fetching decks doesn't complete after 15 seconds, then dislay an error\n  Wait.condition(function() end, function() return not deckHandler.fetchingDecks end, 15, function() error(\"Error getting decks.\") end)\n\n  -- Request a single deck just to see how many decks there are to request\n  apiGet(\"/games/decks?pageSize=1&pageNum=0\", api_getDecksCB)\nend\n\nfunction api_getDecksCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  deckHandler.totalDecks = tonumber(response[\"decks\"][\"totalDecks\"])\n\n  -- Update the internal list of decks\n  if deckHandler.totalDecks == nil then\n    print(\"Error getting decks2.\")\n    resetDeckHandler()\n    deckHandler.entireDeckList = deck.currentDeckList\n  else\n    deckHandler.totalPages = math.ceil(deckHandler.totalDecks / deckHandler.DECK_REQUEST_COUNT)\n    if deckHandler.totalDecks == 0 then\n      resetDeckHandler()\n      deckHandler.entireDeckList = deck.currentDeckList\n    else\n      -- Request all the decks from the server in small chunks so JSON.decode doesn't lag the game. Starting with page 0\n      apiGet(\"/games/decks?pageSize=\" .. deckHandler.DECK_REQUEST_COUNT .. \"&pageNum=\" .. 0, api_getDeckSubsetCB)\n    end\n  end\nend\n\nfunction api_getDeckSubsetCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Get the page number for this request from the URL\n  local pageNum = \"\"\n  for i = #responseRaw.url, 1, -1 do\n    local ch = string.sub(responseRaw.url, i, i)\n    if string.find(\"1234567890\", ch, 1, true) != nil then\n      pageNum = ch .. pageNum\n    else\n      break\n    end\n  end\n\n  if tonumber(pageNum) == nil then\n    print(\"Error: The url has no page number \" .. responseRaw.url)\n    return\n  else\n    pageNum = tonumber(pageNum) + 1\n  end\n\n  -- Add the decks to entireDeckList at the appropriate index\n  local deckList = response[\"decks\"][\"deckList\"]\n\n  local pageStart = (pageNum - 1) * deckHandler.DECK_REQUEST_COUNT\n  for i, deck in pairs(deckList) do\n    deckHandler.entireDeckList[pageStart + i] = deck\n  end\n\n  -- Check if we have already processed this page\n  if deckHandler.acquiredPages[pageNum] then\n    print(\"Error: already processed page \"..pageNum..\" \"..printTable(deckHandler.acquiredPages,true))\n    return\n  end\n  deckHandler.acquiredPages[pageNum] = true\n\n  if #deckHandler.acquiredPages == deckHandler.totalPages then\n    -- Deck is complete! Populate it!\n    if #deckHandler.entireDeckList != deckHandler.totalDecks then\n      print(\"Error: not all decks populated.  Expected \",deckHandler.totalDecks,\" and got \",#deckHandler.entireDeckList)\n    end\n\n    local assets = UI.getCustomAssets()\n    local asset_names = {}\n    local isAssetsUpdated = false\n\n    -- Create a lookup table for the steamids of the custom assets\n    for _, entry in pairs(assets) do\n      asset_names[entry.name] = true\n    end\n\n    deckList = deckHandler.entireDeckList\n    for i = 1, #deckList do\n      if deckList[i][\"author\"][\"steamID\"] and deckList[i][\"author\"][\"profilePicture\"] and not asset_names[deckList[i][\"author\"][\"steamID\"]] then\n        isAssetsUpdated = true\n        table.insert(assets, {\n          name  = deckList[i][\"author\"][\"steamID\"],\n          url   = deckList[i][\"author\"][\"profilePicture\"]:gsub(\".jpg\", \"_full.jpg\")\n        })\n      end\n    end\n\n    if isAssetsUpdated then\n      UI.setCustomAssets(assets)\n      -- Update once almost immediately to get the text in place. With 10 frames, the host will see the pictures\n      Wait.frames(refreshDeckElements, 10)\n      -- Update a second time after the images have had time to download for other players\n      Wait.time(refreshDeckElements, 5, 1)\n    else\n      refreshDeckElements()\n    end\n\n    resetDeckHandler()\n    deckHandler.entireDeckList = deckList\n  else\n    -- Request next page\n    apiGet(\"/games/decks?pageSize=\" .. deckHandler.DECK_REQUEST_COUNT .. \"&pageNum=\" .. pageNum, api_getDeckSubsetCB)\n  end\nend\n\n-------------- /games/player/blacklisted/:steamID --------------\nfunction api_getBlacklistInfo(steamID)\n  apiGet(\"/games/player/blacklisted/\" .. steamID, api_getBlacklistInfoCB)\nend\n\nfunction api_getBlacklistInfoCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  if response.dateAdded ~= nil then\n    if settings.automod.autokick then\n      --player.kick()\n    end\n    --[[\n    printToAll(\"\\n\", {1, 1, 1})\n    printToAll(player.steam_name .. \" was found in the global Codenames blacklist!\", redColor)\n    printToAll(\"SteamID     : \" .. player.steam_id, redColor)\n    printToAll(\"Date Added  : \" .. response.dateAdded, redColor)\n    printToAll(\"Reason      : \" .. response.reason, redColor)\n    printToAll(\"\\n\", {1, 1, 1})]]\n  end\nend\n\n-------------- /games/start --------------\nfunction api_gameStart()\n  local request =\n  {\n    host    = analytics.host,\n    decks   = \"\",\n    first   = gameState.turnTracker == 0 and \"RED\" or \"BLUE\",\n    players = \"\"\n  }\n\n  for deckIndex, deck in ipairs(deck.selected) do\n    if deckIndex == 1 then\n      request.decks = request.decks .. deck\n    else\n      request.decks = request.decks .. \",\" .. deck\n    end\n  end\n\n  for _, player in ipairs(Player.getPlayers()) do\n    local color = player.color\n    if color ~= \"Grey\" and color ~= \"Black\" then\n      request.players = request.players .. ((request.players == \"\") and player.steam_id or (',' .. player.steam_id))\n    end\n  end\n\n  apiPost(\"/games/start\", request, api_gameStartCB)\nend\n\nfunction api_gameStartCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Set the current game ID\n  analytics.gameID = response.gameID\n\n  -- Reset player sessions\n  analytics.sessions = {}\n  for _, session in ipairs(response.sessions) do\n    analytics.sessions[session.steamID] = session.sessionID\n  end\n\n  -- Set the words for the current deck\n  deck.words = response.words\n\n  -- Reset the previous clue ID\n  analytics.clueID = nil\n\n  -- Continue setup of the game\n  setupGame()\nend\n\n-------------- /games/end --------------\nfunction api_gameEnd(winner)\n  local request =\n  {\n    gameID  = analytics.gameID,\n    winner  = winner\n  }\n\n  apiPost(\"/games/end\", request, api_gameEndCB)\nend\n\nfunction api_gameEndCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Set the current game ID\n  analytics.gameID = nil\n\n  -- Reset player sessions\n  analytics.sessions = {}\n\n  -- Reset the clue ID\n  analytics.clueID = nil\nend\n\n-------------- /games/clues/new --------------\nfunction api_newClue(clue, number, codemaster)\n  local request =\n  {\n    gameID      = analytics.gameID,\n    clue        = tostring(clue),\n    number      = tostring(number),\n    codemaster  = tostring(codemaster),\n    team        = tostring(gameState.turnTracker == 0 and \"RED\" or \"BLUE\")\n  }\n\n  apiPost(\"/games/clues/new\", request, api_newClueCB)\nend\n\nfunction api_newClueCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  analytics.clueID = response.clueID\nend\n\n-------------- /games/clues/guess --------------\nfunction api_clueGuess(players, guess, correct, color)\n  local request =\n  {\n    clueID  = analytics.clueID,\n    players = players,\n    guess   = guess,\n    correct = correct,\n    color   = color\n  }\n\n  apiPost(\"/games/clues/guess\", request, api_clueGuessCB)\nend\n\nfunction api_clueGuessCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\nend\n\n-------------- /games/players/sessions/start --------------\nfunction api_playerSessionStart(player)\n  local request =\n  {\n    gameID  = analytics.gameID,\n    player  = player\n  }\n\n  apiPost(\"/games/players/sessions/start\", request, api_playerSessionStartCB)\nend\n\nfunction api_playerSessionStartCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Record the session ID\n  analytics.sessions[response.steamID] = response.sessionID\nend\n\n-------------- /games/players/sessions/end --------------\nfunction api_playerSessionEnd(sessionID)\n  local request =\n  {\n    sessionID = sessionID\n  }\n\n  apiPost(\"/games/players/sessions/end\", request, api_playerSessionEndCB)\nend\n\nfunction api_playerSessionEndCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Remove the session ID\n  for steamID, sessionID in pairs(analytics.sessions) do\n    if sessionID == response.sessionID then\n      analytics.sessions[steamID] = nil\n    end\n  end\nend\n\nglobalXmlText = [[<Panel id=\"redClues\"\n       visibility=\"Red\"\n       rectAlignment=\"LowerCenter\"\n       color=\"#da1918\"\n       height=\"100\"\n       width=\"650\"\n       outline=\"#ffffff\"\n       outlineSize=\"2 -2\">\n\n       <Panel rectAlignment=\"UpperRight\" width=\"25\" height=\"25\">\n         <Text id=\"codemasterHelp\"\n             fontStyle=\"Bold\"\n             fontSize=\"20\"\n             color=\"#ffffff\"\n             tooltip=\"Type in your clue and push ENTER once you're finished. Clues can&#xA;only be one word or contain one hyphen in them. You must include&#xA;a number (0, inf, 1-9) in your clue.&#xA;&#xA;Clues can be in any of the following formats:&#xA;* clue - 0&#xA;* clue inf&#xA;* clue1&#xA;* clue-clue 9&#xA;* etc\">?\n           </Text>\n       </Panel>\n\n       <InputField id=\"redClueText\"\n                   placeholder=\"Enter clue here\"\n                   alignment=\"MiddleCenter\"\n                   height=\"30\"\n                   width=\"550\"\n                   lineType=\"MultiLineNewLine\"\n                   onValueChanged=\"clueEntered\">\n       </InputField>\n\n</Panel>\n\n<Panel id=\"blueClues\"\n       visibility=\"Blue\"\n       rectAlignment=\"LowerCenter\"\n       color=\"#1f87ff\"\n       height=\"100\"\n       width=\"650\"\n       outline=\"#ffffff\"\n       outlineSize=\"2 -2\">\n\n       <Panel rectAlignment=\"UpperRight\" width=\"25\" height=\"25\">\n         <Text id=\"codemasterHelp\"\n             fontStyle=\"Bold\"\n             fontSize=\"20\"\n             color=\"#ffffff\"\n             tooltip=\"Type in your clue and push ENTER once you're finished. Clues can&#xA;only be one word or contain one hyphen in them. You must include&#xA;a number (0, inf, 1-9) in your clue.&#xA;&#xA;Clues can be in any of the following formats:&#xA;* clue - 0&#xA;* clue inf&#xA;* clue1&#xA;* clue-clue 9&#xA;* etc\">?\n           </Text>\n       </Panel>\n\n       <InputField id=\"blueClueText\"\n                   placeholder=\"Enter clue here\"\n                   alignment=\"MiddleCenter\"\n                   height=\"30\"\n                   width=\"550\"\n                   lineType=\"MultiLineNewLine\"\n                   onValueChanged=\"clueEntered\">\n       </InputField>\n\n</Panel>]]",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->\r\n\r\n<Panel id=\"redClues\"\r\n       visibility=\"Red\"\r\n       rectAlignment=\"LowerCenter\"\r\n       color=\"#da1918\"\r\n       height=\"100\"\r\n       width=\"650\"\r\n       outline=\"#ffffff\"\r\n       outlineSize=\"2 -2\">\r\n\r\n       <Panel rectAlignment=\"UpperRight\" width=\"25\" height=\"25\">\r\n         <Text id=\"codemasterHelp\"\r\n             fontStyle=\"Bold\"\r\n             fontSize=\"20\"\r\n             color=\"#ffffff\"\r\n             tooltip=\"Type in your clue and push ENTER once you're finished. Clues can&#xA;only be one word or contain one hyphen in them. You must include&#xA;a number (0, inf, 1-9) in your clue.&#xA;&#xA;Clues can be in any of the following formats:&#xA;* clue - 0&#xA;* clue inf&#xA;* clue1&#xA;* clue-clue 9&#xA;* etc\">?\r\n           </Text>\r\n       </Panel>\r\n\r\n       <InputField id=\"redClueText\"\r\n                   placeholder=\"Enter clue here\"\r\n                   alignment=\"MiddleCenter\"\r\n                   height=\"30\"\r\n                   width=\"550\"\r\n                   lineType=\"MultiLineNewLine\"\r\n                   onValueChanged=\"clueEntered\">\r\n       </InputField>\r\n\r\n</Panel>\r\n\r\n<Panel id=\"blueClues\"\r\n       visibility=\"Blue\"\r\n       rectAlignment=\"LowerCenter\"\r\n       color=\"#1f87ff\"\r\n       height=\"100\"\r\n       width=\"650\"\r\n       outline=\"#ffffff\"\r\n       outlineSize=\"2 -2\">\r\n\r\n       <Panel rectAlignment=\"UpperRight\" width=\"25\" height=\"25\">\r\n         <Text id=\"codemasterHelp\"\r\n             fontStyle=\"Bold\"\r\n             fontSize=\"20\"\r\n             color=\"#ffffff\"\r\n             tooltip=\"Type in your clue and push ENTER once you're finished. Clues can&#xA;only be one word or contain one hyphen in them. You must include&#xA;a number (0, inf, 1-9) in your clue.&#xA;&#xA;Clues can be in any of the following formats:&#xA;* clue - 0&#xA;* clue inf&#xA;* clue1&#xA;* clue-clue 9&#xA;* etc\">?\r\n           </Text>\r\n       </Panel>\r\n\r\n       <InputField id=\"blueClueText\"\r\n                   placeholder=\"Enter clue here\"\r\n                   alignment=\"MiddleCenter\"\r\n                   height=\"30\"\r\n                   width=\"550\"\r\n                   lineType=\"MultiLineNewLine\"\r\n                   onValueChanged=\"clueEntered\">\r\n       </InputField>\r\n\r\n</Panel>\r\n\r\n<!--<Panel id=\"redTeamStatus\"\r\n       visibility=\"Orange|Yellow|Pink|Brown\"\r\n       rectAlignment=\"LowerCenter\"\r\n       color=\"Red\"\r\n       height=\"75\"\r\n       width=\"650\"\r\n       outline=\"#ffffff\"\r\n       outlineSize=\"2 -2\">\r\n\r\n       <Text id=\"redClueWaiting\" active=\"false\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"25\">Waiting for clue...</Text>\r\n\r\n        <TableLayout cellBackgroundColor=\"rgba(1,1,1,0)\">\r\n          <Row>\r\n            <Cell><Text color=\"#ffffff\" fontStyle=\"Italic\">─── Clue ───</Text></Cell>\r\n            <Cell><Text color=\"#ffffff\" fontStyle=\"Italic\">── Guesses Left ──</Text></Cell>\r\n            <Cell><Text color=\"#ffffff\" fontStyle=\"Italic\">── Time Left ──</Text></Cell>\r\n          </Row>\r\n          <Row>\r\n            <Cell><Text alignment=\"UpperCenter\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"27\">Animalstetingweofqiweof</Text></Cell>\r\n            <Cell><Text alignment=\"UpperCenter\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"27\">6</Text></Cell>\r\n            <Cell><Text alignment=\"UpperCenter\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"27\">1:34</Text></Cell>\r\n          </Row>\r\n        </TableLayout>\r\n\r\n</Panel>-->",
  "CustomUIAssets": [
    {
      "Name": "76561198036621811",
      "URL": "https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/c7/c784c0ddf55560676bb7ef470d54f913ece5fa63_full.jpg"
    },
    {
      "Name": "76561198010185056",
      "URL": "https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/95/959a8d3ceea29722fbe65942ea7fd25caf3a3eff_full.jpg"
    },
    {
      "Name": "76561198399208786",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/8a/8a252e8f43e1aed73be3d98b81a2da5df238778e_full.jpg"
    },
    {
      "Name": "76561198089827268",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/cb/cbae9c75e8f9fb33f4e87cc33290269b03af5eef_full.jpg"
    },
    {
      "Name": "76561198353555528",
      "URL": "https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/2c/2c69d5c8e91aa522c205eaf5724edd541e18bba0_full.jpg"
    },
    {
      "Name": "76561198042440230",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d9/d9339eea74949c50c8671e62415ecd73df9a9c35_full.jpg"
    },
    {
      "Name": "76561198019018534",
      "URL": "https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/ef/ef1a50560187bce1076a407a09b617d0b5925fb8_full.jpg"
    },
    {
      "Name": "76561199137600133",
      "URL": "https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/4f/4fa42ee261e8563201eef4b05b403931954fdf3d_full.jpg"
    },
    {
      "Name": "76561198245719610",
      "URL": "https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/83/8350048e27e4f9b54753cd3f936b18f1344cc0b0_full.jpg"
    },
    {
      "Name": "76561198025962842",
      "URL": "https://cdn.cloudflare.steamstatic.com/steamcommunity/public/images/avatars/b0/b014d691eaa5019587b3dfe75da2e65429ad1ceb_full.jpg"
    },
    {
      "Name": "76561198038526063",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/eb/ebdafa4c942009d583f8409952323fcf880ec214_full.jpg"
    },
    {
      "Name": "76561198148686870",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ef/ef3686e66045c27576d94902d1fc13daf7ba0908_full.jpg"
    },
    {
      "Name": "76561197995144936",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ce/ce7b00228dff455b053abfeda32abc339c0add67_full.jpg"
    },
    {
      "Name": "76561198088377084",
      "URL": "https://cdn.akamai.steamstatic.com/steamcommunity/public/images/avatars/92/920c17072c6bc25476634c1b1c8294395555d4a4_full.jpg"
    },
    {
      "Name": "76561198018513718",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/56/56b58ba38c717425d92ec1ef3254579bdafb1d74_full.jpg"
    },
    {
      "Name": "76561198048113303",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/6a/6a8e25ed2f8c8a3b55089de28e5c707348ed171f_full.jpg"
    },
    {
      "Name": "76561198127689142",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/19/1974af3cd13db882d3a4d3987af228824eb85332_full.jpg"
    },
    {
      "Name": "76561198004623233",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/af/af482e7e2db49b20d92d9f066002c9b8895a15e8_full.jpg"
    },
    {
      "Name": "76561198236081160",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/be/be65902c43f582d8c064c0fed73dceaf885b6455_full.jpg"
    },
    {
      "Name": "76561198006705980",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/83/83350e6de1cf8b553f179971f6bb85a328035044_full.jpg"
    },
    {
      "Name": "76561198046107819",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/8c/8c462028555dd351b154d8e3cd86eb64aa48efdc_full.jpg"
    },
    {
      "Name": "76561198393828159",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ee/ee7e3f0ab811890729466b13378d4dcc98c46292_full.jpg"
    },
    {
      "Name": "76561198393828159",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ee/ee7e3f0ab811890729466b13378d4dcc98c46292_full.jpg"
    },
    {
      "Name": "76561198048113303",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/6a/6a8e25ed2f8c8a3b55089de28e5c707348ed171f_full.jpg"
    },
    {
      "Name": "76561198079834727",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/de/de7c92c7d4af1c7d284c1fb7c8862362b3811a68_full.jpg"
    },
    {
      "Name": "76561197985814760",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/0a/0a486ec2e3db88124ee858f4ec566fbc1747ea5e_full.jpg"
    },
    {
      "Name": "76561198069308542",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/c4/c4643c307f8c71b84f459968f18f55ec24cff673_full.jpg"
    },
    {
      "Name": "76561198070815867",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/3f/3fc28fc8fde1fa7b759d639a0594be18a52a0695_full.jpg"
    },
    {
      "Name": "76561198026547967",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ab/ab9ddbc26d140f7ef9706256e79adb527e778dd1_full.jpg"
    },
    {
      "Name": "76561198059230721",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/37/37ca3830e1a710f1a95e9f561e523a78fd88c680_full.jpg"
    },
    {
      "Name": "76561198131794124",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/f3/f37e010c2deccf8d6b4c7123e20589bf37398380_full.jpg"
    },
    {
      "Name": "76561198123030534",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/4f/4fe9a2a1ae2649903468e69be74a0256c7cab30b_full.jpg"
    },
    {
      "Name": "76561198079454567",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/7f/7f3f1076e7874293fb171cfd095013c71ebd58c5_full.jpg"
    },
    {
      "Name": "76561198029285746",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/82/826ddefa562934f58ae5e32bb3f4778ec0b79052_full.jpg"
    },
    {
      "Name": "76561198299855555",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ee/eeb1cd237d08b18029c55e0bee311a1b5f007672_full.jpg"
    },
    {
      "Name": "76561198006110197",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/3e/3ee699e03a4fdbc90a16718a36ba5e24a3f64d59_full.jpg"
    },
    {
      "Name": "76561198054753109",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/eb/eb89dcaad32cc26b3be6e63177faffc06c494f82_full.jpg"
    },
    {
      "Name": "76561198843545890",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/fe/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg"
    },
    {
      "Name": "76561198041596762",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/97/971863ae63e5c3988c9ab1483729e4d87c1c5878_full.jpg"
    },
    {
      "Name": "76561198423982135",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/44/4455c9276054ecdb71c5489298706bedb11f9046_full.jpg"
    },
    {
      "Name": "76561198314260225",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/68/683cf6e0d6690eca2e4608f040426559d3ec31a0_full.jpg"
    },
    {
      "Name": "76561198299855555",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ee/eeb1cd237d08b18029c55e0bee311a1b5f007672_full.jpg"
    },
    {
      "Name": "76561198024443844",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/21/211d259c16d2535cb4fc0e73933e059333d89513_full.jpg"
    },
    {
      "Name": "76561198843545890",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/fe/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg"
    },
    {
      "Name": "76561198202612381",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/6c/6c9e1ceb667f29bb62d1fdb3730e78af31ec3dde_full.jpg"
    },
    {
      "Name": "76561198307530539",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ab/abab4ce0b46d0165974c6e15d87929b65254cbd3_full.jpg"
    },
    {
      "Name": "76561198893254030",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/eb/ebcdeb7601dceee1469b62fcf3bf41e0fe0d5c9a_full.jpg"
    },
    {
      "Name": "76561198893254030",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/eb/ebcdeb7601dceee1469b62fcf3bf41e0fe0d5c9a_full.jpg"
    },
    {
      "Name": "76561198388254021",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/b0/b008568e3ce5eee0ccdd749aac6d472e9bd844c1_full.jpg"
    },
    {
      "Name": "76561198388254021",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/b0/b008568e3ce5eee0ccdd749aac6d472e9bd844c1_full.jpg"
    },
    {
      "Name": "76561198893254030",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/eb/ebcdeb7601dceee1469b62fcf3bf41e0fe0d5c9a_full.jpg"
    },
    {
      "Name": "76561198204158771",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/72/726f58f5875b6849d71c7a00a634623af802baf4_full.jpg"
    },
    {
      "Name": "76561198123030534",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/4f/4fe9a2a1ae2649903468e69be74a0256c7cab30b_full.jpg"
    },
    {
      "Name": "76561198127689142",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/19/1974af3cd13db882d3a4d3987af228824eb85332_full.jpg"
    },
    {
      "Name": "76561198001290878",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/6f/6f982210fe9a377fdb74d9a836e4d670f0fd68fc_full.jpg"
    },
    {
      "Name": "76561198017672684",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/2a/2ad49cc649bc82986c129552130f376f53e92057_full.jpg"
    },
    {
      "Name": "76561198448883321",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/1c/1cc9cc6bf849accff913a636c6bafb6ae1f1881b_full.jpg"
    },
    {
      "Name": "76561198439882041",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/8e/8e0adc6c898139d7309644216f69108651a26629_full.jpg"
    },
    {
      "Name": "76561198066333308",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/86/868ee99a6d39f57a65198d2ddbfc05f5d183ba21_full.jpg"
    },
    {
      "Name": "76561198395270877",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/f2/f23f2514089cb699fc88e8cb1ae2b2c3b9fe73e9_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198355092141",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/af/afc89706812c3c1eda17d754a0956c97a763fea1_full.jpg"
    },
    {
      "Name": "76561198434117470",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/6a/6a7f07ff83db4b55f63b94b1f01a5465f558985a_full.jpg"
    },
    {
      "Name": "76561198079768275",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/cc/ccfca233cf1d512342f4888e927c6b772e23f344_full.jpg"
    },
    {
      "Name": "76561199172449883",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/1b/1bbe03fa770d280e2c0a3d2a0f037e164404a8f7_full.jpg"
    },
    {
      "Name": "76561198062355572",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/bc/bccef619a6dc001ed78880c923193d4dc6da5417_full.jpg"
    },
    {
      "Name": "76561198099789893",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/0c/0cdd824db63c9304614e389960f0a85b13a5efab_full.jpg"
    },
    {
      "Name": "76561198001460968",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/e1/e10dc14f6e0408d16a043eea7d8300b0b7863467_full.jpg"
    },
    {
      "Name": "76561198025359339",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/5e/5e56123ec556566efde13285eaaa846c2e6b999b_full.jpg"
    },
    {
      "Name": "76561198025359339",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/5e/5e56123ec556566efde13285eaaa846c2e6b999b_full.jpg"
    },
    {
      "Name": "76561198274552215",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/b9/b9fc465a792f1acc75bed66298ce4846790d3cc6_full.jpg"
    },
    {
      "Name": "76561198237344404",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/43/43d18019d4f56699667a6334f6ac8774fd3655cb_full.jpg"
    },
    {
      "Name": "76561197996677309",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ad/ad26f77c7a1a5ecd12614b23aa30dcf8ef779731_full.jpg"
    },
    {
      "Name": "76561198316730169",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/73/73ae72892acb8a1998618b9dfdc10bf6c5eeb496_full.jpg"
    },
    {
      "Name": "76561198355092141",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/af/afc89706812c3c1eda17d754a0956c97a763fea1_full.jpg"
    },
    {
      "Name": "76561198053701211",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/47/47a93e82830ea297e760253be60ca5c3a8c99513_full.jpg"
    },
    {
      "Name": "76561198132858733",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/13/133959fa9e819af4d07cf7db26f78a003095fa2d_full.jpg"
    },
    {
      "Name": "76561198030426327",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/0a/0af10ffd5b853e7b3772967932e8bc92336fb1b6_full.jpg"
    },
    {
      "Name": "76561198011455757",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/de/de7672eca32830c42c1d07d31dc15329601e14fd_full.jpg"
    },
    {
      "Name": "76561198447896471",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/a2/a2e48eda8ee17682041bf32440153f6008742699_full.jpg"
    },
    {
      "Name": "76561198278759973",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/f9/f95673ac7aeedfbbc6987e8d6248e170dcc7c516_full.jpg"
    },
    {
      "Name": "76561198014469469",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/17/178599d8bc649877d98168688e6fa13d81e01a06_full.jpg"
    },
    {
      "Name": "76561197964849596",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/79/79d3fe5839617eb83a9661071ed021dd56ac8a5b_full.jpg"
    },
    {
      "Name": "76561198449392501",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d0/d009afc31f7c92c63f12ff87454bdd12bfa1f853_full.jpg"
    },
    {
      "Name": "76561198125626918",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/cf/cfc5f07690740e8377c1ede0cf3e34334c0a3acc_full.jpg"
    },
    {
      "Name": "76561198042766231",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/57/57bf871e69670bfed841a13d50b30355f1d94766_full.jpg"
    },
    {
      "Name": "76561198048113303",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/6a/6a8e25ed2f8c8a3b55089de28e5c707348ed171f_full.jpg"
    },
    {
      "Name": "76561198042766231",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/57/57bf871e69670bfed841a13d50b30355f1d94766_full.jpg"
    },
    {
      "Name": "76561198003615604",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/28/28a3ce6bee32d6b644a4ef56d81427c6a4e98884_full.jpg"
    },
    {
      "Name": "76561198449392501",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d0/d009afc31f7c92c63f12ff87454bdd12bfa1f853_full.jpg"
    },
    {
      "Name": "76561198062355572",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/bc/bccef619a6dc001ed78880c923193d4dc6da5417_full.jpg"
    },
    {
      "Name": "76561198449392501",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/d0/d009afc31f7c92c63f12ff87454bdd12bfa1f853_full.jpg"
    },
    {
      "Name": "76561198015799868",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/42/42123bb2b333a3c0307f1c1c3223b9880b684ef9_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198403730612",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/88/883a01705a87ff4aa1431ab0b92767bc02d1e737_full.jpg"
    },
    {
      "Name": "76561198000920296",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/a4/a41301d4b9e1d39dda8f88f1c057b74f846482c7_full.jpg"
    },
    {
      "Name": "76561198184195221",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/70/70025055da83f3a017cd6be67e54128821755d5d_full.jpg"
    },
    {
      "Name": "76561198089202902",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/30/303a596c9a268694b224c091ea1fdd6d10f92b7c_full.jpg"
    },
    {
      "Name": "76561198089202902",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/30/303a596c9a268694b224c091ea1fdd6d10f92b7c_full.jpg"
    },
    {
      "Name": "76561198361651317",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/7d/7dac635fadf8d1a9285c10c13b020d3cf8f13053_full.jpg"
    },
    {
      "Name": "76561198152283696",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/dd/ddea8836d5b813cd771f6b64ad6cde1d6aec1fd5_full.jpg"
    },
    {
      "Name": "76561198162732845",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/1b/1bbe0ec528667df42313d0f7a1b9232c045d3789_full.jpg"
    },
    {
      "Name": "76561198083681415",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/38/3863510374d3f9da9da3926cc50c230ec8404e8c_full.jpg"
    },
    {
      "Name": "76561198121129362",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/64/64eafcd65b1726ecb76e4d984bc0d4cab61bf46d_full.jpg"
    },
    {
      "Name": "76561198042766231",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/57/57bf871e69670bfed841a13d50b30355f1d94766_full.jpg"
    },
    {
      "Name": "76561198000920296",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/a4/a41301d4b9e1d39dda8f88f1c057b74f846482c7_full.jpg"
    },
    {
      "Name": "76561198000920296",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/a4/a41301d4b9e1d39dda8f88f1c057b74f846482c7_full.jpg"
    },
    {
      "Name": "76561198064082433",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/e2/e25aeb082adb039dcbfbb61f5fb59ec324675bf4_full.jpg"
    },
    {
      "Name": "76561198215139505",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/8d/8dfe278c7493b6984540e57ecd57b791df13841e_full.jpg"
    },
    {
      "Name": "76561197979340881",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ce/ce5a8ad1645fd2b99ff9d733663b62c713bf2aa6_full.jpg"
    },
    {
      "Name": "76561197979340881",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ce/ce5a8ad1645fd2b99ff9d733663b62c713bf2aa6_full.jpg"
    },
    {
      "Name": "76561197979340881",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ce/ce5a8ad1645fd2b99ff9d733663b62c713bf2aa6_full.jpg"
    },
    {
      "Name": "76561197979340881",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ce/ce5a8ad1645fd2b99ff9d733663b62c713bf2aa6_full.jpg"
    },
    {
      "Name": "76561198039778613",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/7a/7aea18c25050d6c56757ba65f5de12aa5c217454_full.jpg"
    },
    {
      "Name": "76561198263281288",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/58/58aba3ebd353d6dbc27cd95439d9e13b5f14574d_full.jpg"
    },
    {
      "Name": "76561198079383870",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/fb/fb40d761192ed92b14406687ce4ecd8823ac2f7f_full.jpg"
    },
    {
      "Name": "76561198022057055",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/e4/e488d1075c98b22d9713c23e2c88bd52b2c41650_full.jpg"
    },
    {
      "Name": "76561198022057055",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/e4/e488d1075c98b22d9713c23e2c88bd52b2c41650_full.jpg"
    },
    {
      "Name": "76561197971625571",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/91/91c77391d32ebbddb34c5ef93cf036db7447efa2_full.jpg"
    },
    {
      "Name": "76561197980046883",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/c7/c7a7d83e30ce9dfd7d03602d9a25d6f040dcafb4_full.jpg"
    },
    {
      "Name": "76561198102859522",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/18/18cd5e69dea3015fcb7a26a3d2ff33869de956bf_full.jpg"
    },
    {
      "Name": "76561198097401364",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/f9/f9c1a7afcfcf747842bc8dd105fbd97ace2e35b4_full.jpg"
    },
    {
      "Name": "76561198222707160",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/fe/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg"
    },
    {
      "Name": "76561198136367835",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/12/12a384ee8b1166dad3aa3f9efce9a6ab40b63336_full.jpg"
    },
    {
      "Name": "76561198054283691",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/1d/1dc65e16343453a3de14c82575bad82da0b5d8e2_full.jpg"
    },
    {
      "Name": "76561198036628585",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/86/86ed442435254b33aef85ab5daea5749463c0604_full.jpg"
    },
    {
      "Name": "76561198070803289",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/aa/aaf89a9c0dddbf85a62c979ec51032e5d8227522_full.jpg"
    },
    {
      "Name": "76561198044178242",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/6c/6c7409071f6954722a0288c5088cff87aa7c7bf9_full.jpg"
    },
    {
      "Name": "76561198070220507",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/35/35f69019554a9ef441bfb8410d757c9efddef962_full.jpg"
    },
    {
      "Name": "76561198070220507",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/35/35f69019554a9ef441bfb8410d757c9efddef962_full.jpg"
    },
    {
      "Name": "76561198070220507",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/35/35f69019554a9ef441bfb8410d757c9efddef962_full.jpg"
    },
    {
      "Name": "76561198051199522",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/27/27ff0adf1b933fb565f217ff934d8c2641066f11_full.jpg"
    },
    {
      "Name": "76561198070259054",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/e4/e415e2cacac786f6bc4d193d3afef45bc699400d_full.jpg"
    },
    {
      "Name": "76561198053216950",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/fa/fa75dd3e4808754dc3e2f392306d585784baa90b_full.jpg"
    },
    {
      "Name": "76561198822595397",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/98/9837c8e64c5496a1c43db941a321dc6c211f4db9_full.jpg"
    },
    {
      "Name": "76561198099789893",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/0c/0cdd824db63c9304614e389960f0a85b13a5efab_full.jpg"
    },
    {
      "Name": "76561198106501474",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/1c/1c190ba6ca4fed89a601cdeee5e9bef00f275ff1_full.jpg"
    },
    {
      "Name": "76561199017763944",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/b7/b7bcc09045fc430d68ec1ca48353df4f466370d6_full.jpg"
    },
    {
      "Name": "76561199017763944",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/b7/b7bcc09045fc430d68ec1ca48353df4f466370d6_full.jpg"
    },
    {
      "Name": "76561198198092811",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/94/947c30a054562d64a4247cdbefb59df96628ca07_full.jpg"
    },
    {
      "Name": "76561198829868641",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/bf/bfaf91fd4ecb11fea8bceb368d6ed4d4c3b3e261_full.jpg"
    },
    {
      "Name": "76561198044602339",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/c8/c8c54805dbc684c6e730823c6ead1f50a3cd8245_full.jpg"
    },
    {
      "Name": "76561198307607938",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/be/be21f983c7a8270bd6d72873a186db9484c4e1fc_full.jpg"
    },
    {
      "Name": "76561198109241156",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/44/4411330d2731d76b6e0117191ccdf39b5c2287b1_full.jpg"
    },
    {
      "Name": "76561198177391537",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/28/289229bd14b2ff617c536a28f43023a43a9d9f47_full.jpg"
    },
    {
      "Name": "76561198396290413",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/04/04bb9baa68712eb5f6d3c566c6797a67f3fc25aa_full.jpg"
    },
    {
      "Name": "76561198439882041",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/8e/8e0adc6c898139d7309644216f69108651a26629_full.jpg"
    },
    {
      "Name": "76561198079834727",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/de/de7c92c7d4af1c7d284c1fb7c8862362b3811a68_full.jpg"
    },
    {
      "Name": "76561198218892311",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/fe/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg"
    },
    {
      "Name": "76561198045824452",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/bb/bb7674925bd5a63bca913c532934d5e1d3db2020_full.jpg"
    },
    {
      "Name": "76561198316014211",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/fe/fef49e7fa7e1997310d705b2a6158ff8dc1cdfeb_full.jpg"
    },
    {
      "Name": "76561198137614322",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/e2/e28c4006ed2c81ef3dd7fea9c09a4f2dd2da1247_full.jpg"
    },
    {
      "Name": "76561198055980492",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/cc/ccab1093f9d011e533265de7e3b6d79ddf4b2b19_full.jpg"
    },
    {
      "Name": "76561198177391537",
      "URL": "https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/28/289229bd14b2ff617c536a28f43023a43a9d9f47_full.jpg"
    }
  ],
  "SnapPoints": [
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": -2.8000195
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 1.04998076
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 4.89998055
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 12.5999813
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": -5.70001125,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": -5.70001125,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": -5.70001125,
        "y": 0.9611347,
        "z": 4.89998055
      }
    },
    {
      "Position": {
        "x": -5.70001173,
        "y": 0.9611347,
        "z": 1.04998076
      }
    },
    {
      "Position": {
        "x": -5.700011,
        "y": 0.9611347,
        "z": -2.80002022
      }
    },
    {
      "Position": {
        "x": -1.14192007E-05,
        "y": 0.9611347,
        "z": -2.80001974
      }
    },
    {
      "Position": {
        "x": -1.14166323E-05,
        "y": 0.9611347,
        "z": 1.04998028
      }
    },
    {
      "Position": {
        "x": -1.12004127E-05,
        "y": 0.9611347,
        "z": 4.89998
      }
    },
    {
      "Position": {
        "x": -1.12115758E-05,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": -1.09853609E-05,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": 5.699988,
        "y": 0.9611347,
        "z": 4.89998055
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": 1.04998
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": -2.80001974
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": -2.8000195
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 1.04998028
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 4.89998
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": -5.699988,
        "y": 0.9611347,
        "z": -14.0000191
      }
    },
    {
      "Position": {
        "x": -5.699988,
        "y": 0.9611347,
        "z": -17.85002
      }
    },
    {
      "Position": {
        "x": -5.699988,
        "y": 0.9611347,
        "z": -21.70002
      }
    },
    {
      "Position": {
        "x": 1.16321171E-05,
        "y": 0.9611347,
        "z": -17.85002
      }
    },
    {
      "Position": {
        "x": 1.17367581E-05,
        "y": 0.9611347,
        "z": -14.0000191
      }
    },
    {
      "Position": {
        "x": 1.16156953E-05,
        "y": 0.9611347,
        "z": -21.70002
      }
    },
    {
      "Position": {
        "x": 5.70001173,
        "y": 0.9611347,
        "z": -21.70002
      }
    },
    {
      "Position": {
        "x": 5.70001173,
        "y": 0.9611347,
        "z": -17.85002
      }
    },
    {
      "Position": {
        "x": 5.70001173,
        "y": 0.9611347,
        "z": -14.0000191
      }
    },
    {
      "Position": {
        "x": -12.2199888,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -17.9199886,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -17.9199886,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": -23.61999,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": -23.61999,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -29.3199883,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -29.3199883,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 12.3400116,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 12.3400116,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": 18.0700111,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 23.7700119,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 23.7700119,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": 29.47001,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": 29.47001,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 18.0700111,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -12.2199888,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": -2.35
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": -0.3
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 1.75
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 3.8
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 5.85
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 7.9
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 9.95
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 12.0
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 12.0000048
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 9.949997
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 7.89999771
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 5.850011
      }
    },
    {
      "Position": {
        "x": 21.0500031,
        "y": 0.9611349,
        "z": 3.80001044
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 1.74999976
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": -0.299986571
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": -2.35
      }
    }
  ],
  "ObjectStates": [
    {
      "GUID": "3f75b3",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 20.8007851,
        "posY": -2.0,
        "posZ": 14.4678,
        "rotX": 1.0876895E-06,
        "rotY": 180.0086,
        "rotZ": 5.2589553E-07,
        "scaleX": 0.5000005,
        "scaleY": 0.5000005,
        "scaleZ": 0.75
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.1179891,
        "g": 0.53,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://cdn.tts-codenames.com/clue_token.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 4,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "function clue()\r\nend",
      "LuaScriptState": ""
    },
    {
      "GUID": "f3cdf2",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": -20.9492245,
        "posY": -2.0,
        "posZ": 14.5125818,
        "rotX": -1.18295284E-05,
        "rotY": 180.0086,
        "rotZ": 2.65259729E-07,
        "scaleX": 0.5000005,
        "scaleY": 0.5000005,
        "scaleZ": 0.75
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 0.0,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://cdn.tts-codenames.com/clue_token.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 4,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "function clue()\r\nend",
      "LuaScriptState": ""
    },
    {
      "GUID": "7fdaee",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 12.3398275,
        "posY": 0.9689424,
        "posZ": -13.9699965,
        "rotX": -0.000399968645,
        "rotY": 179.30925,
        "rotZ": 180.022522,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "0f0ec0",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 12.3400192,
        "posY": 0.9689868,
        "posZ": -17.7999954,
        "rotX": -0.000661387865,
        "rotY": 179.999985,
        "rotZ": 180.022537,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "99832c",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 18.070015,
        "posY": 0.9667989,
        "posZ": -13.9700012,
        "rotX": 0.00184425677,
        "rotY": 180.0,
        "rotZ": 180.0216,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "d9054c",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 18.07002,
        "posY": 0.9667331,
        "posZ": -17.8,
        "rotX": -0.000698626,
        "rotY": 180.0002,
        "rotZ": 180.0225,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "d9324a",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 23.77002,
        "posY": 0.9649092,
        "posZ": -13.970006,
        "rotX": 0.0051277075,
        "rotY": 180.000046,
        "rotZ": 180.01799,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "4de840",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 23.7700157,
        "posY": 0.964661539,
        "posZ": -17.8000011,
        "rotX": 0.000455707,
        "rotY": 180.0,
        "rotZ": 180.018738,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "19b2d5",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 29.4700165,
        "posY": 0.963118732,
        "posZ": -13.970005,
        "rotX": 0.00513193151,
        "rotY": 179.999969,
        "rotZ": 180.018021,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "05c73d",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 29.4700146,
        "posY": 0.9627769,
        "posZ": -17.8000031,
        "rotX": 0.00510594,
        "rotY": 179.999969,
        "rotZ": 180.01799,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "746660",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -12.2198639,
        "posY": 0.9737378,
        "posZ": -13.9700041,
        "rotX": -0.000656987366,
        "rotY": 180.4977,
        "rotZ": 179.999786,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "9cbe84",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -17.92,
        "posY": 0.973727345,
        "posZ": -13.9699993,
        "rotX": -0.000619731145,
        "rotY": 180.0,
        "rotZ": 180.000076,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "6bb4d8",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -23.62,
        "posY": 0.9737406,
        "posZ": -13.9700012,
        "rotX": -6.17474143E-05,
        "rotY": 179.999924,
        "rotZ": 180.000275,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b48ed4",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -29.32,
        "posY": 0.973766,
        "posZ": -13.97,
        "rotX": -0.000124016617,
        "rotY": 180.0,
        "rotZ": 180.00029,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5c1be6",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -12.22,
        "posY": 0.973784864,
        "posZ": -17.8,
        "rotX": -0.000655273267,
        "rotY": 180.000092,
        "rotZ": 179.999786,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b89ba7",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -17.92,
        "posY": 0.973761261,
        "posZ": -17.8,
        "rotX": -0.0007099149,
        "rotY": 179.999786,
        "rotZ": 179.999741,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "e1754e",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -23.62,
        "posY": 0.973754346,
        "posZ": -17.8,
        "rotX": -0.000369821675,
        "rotY": 179.999878,
        "rotZ": 180.0001,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "4a2969",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -29.32,
        "posY": 0.9737714,
        "posZ": -17.8,
        "rotX": -6.545202E-05,
        "rotY": 180.0,
        "rotZ": 180.000259,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "e44594",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -5.69999838,
        "posY": 0.973812044,
        "posZ": -17.84,
        "rotX": -0.000714350434,
        "rotY": 180.0,
        "rotZ": 179.999771,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f6786b",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -5.69999933,
        "posY": 0.9738572,
        "posZ": -21.7,
        "rotX": -0.000740427931,
        "rotY": 180.0,
        "rotZ": 179.999786,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1f53f2",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -5.70000029,
        "posY": 0.973762751,
        "posZ": -14.0,
        "rotX": -0.000680252269,
        "rotY": 179.299591,
        "rotZ": 179.9998,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f8f6a1",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 0.0400013179,
        "posY": 0.9737634,
        "posZ": -21.69999,
        "rotX": 359.993073,
        "rotY": 180.0,
        "rotZ": 180.014236,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "a05e4e",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 5.739998,
        "posY": 0.971626341,
        "posZ": -21.7,
        "rotX": -0.000668931752,
        "rotY": 180.000031,
        "rotZ": 180.022491,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1ebedd",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 5.740021,
        "posY": 0.971583545,
        "posZ": -17.84,
        "rotX": -0.0006564299,
        "rotY": 180.0,
        "rotZ": 180.022552,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3d7b86",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 5.740166,
        "posY": 0.9715384,
        "posZ": -14.0000076,
        "rotX": -0.0009760487,
        "rotY": 180.731537,
        "rotZ": 180.0225,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b97df2",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 0.0400314219,
        "posY": 0.9737672,
        "posZ": -17.8399849,
        "rotX": -0.00121935678,
        "rotY": 179.999283,
        "rotZ": 180.0114,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 0.728654265,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_black.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1e9282",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -0.000104554696,
        "posY": -1.0,
        "posZ": -13.9999208,
        "rotX": -8.102868E-06,
        "rotY": 179.977173,
        "rotZ": 180.0,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3ef1ca",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 7.07386062E-06,
        "posY": -1.0,
        "posZ": -14.00002,
        "rotX": 3.03448928E-07,
        "rotY": 179.994934,
        "rotZ": 180.0,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": false,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://cdn.tts-codenames.com/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f16a9a",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": -21.0,
        "posY": 0.96,
        "posZ": -6.0,
        "rotX": -6.648801E-07,
        "rotY": 270.0,
        "rotZ": 2.68558665E-06,
        "scaleX": 1.24999976,
        "scaleY": 1.24999976,
        "scaleZ": 1.24999976
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.124985017,
        "g": 0.124985017,
        "b": 0.124985017
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://cdn.tts-codenames.com/end_red.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "c91f34",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 21.0,
        "posY": 0.96,
        "posZ": -6.00125742,
        "rotX": 1.64464709E-07,
        "rotY": 269.989044,
        "rotZ": 2.24210726E-06,
        "scaleX": 1.24999976,
        "scaleY": 1.24999976,
        "scaleZ": 1.24999976
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.1249849,
        "g": 0.1249849,
        "b": 0.1249849
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://cdn.tts-codenames.com/end_blue.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "2fb333",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": -9.65522347E-08,
        "posY": -1.0,
        "posZ": 35.0,
        "rotX": -5.03513E-07,
        "rotY": 0.0,
        "rotZ": 5.637331E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "cd1bf7",
          "Name": "CardCustom",
          "Transform": {
            "posX": 0.7543003,
            "posY": 7.10358953,
            "posZ": 33.6686172,
            "rotX": 0.513645768,
            "rotY": 180.00058,
            "rotZ": 0.122700453,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 300,
          "SidewaysCard": false,
          "CustomDeck": {
            "3": {
              "FaceURL": "https://cdn.tts-codenames.com/card_front.png",
              "BackURL": "https://cdn.tts-codenames.com/card_back.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "position  = nil\r\nrotation  = {x = 0, y = 180, z = 0}\r\ntext      = nil\r\ncolor     = nil\r\n\r\nfunction onCollisionEnter(collision_info)\r\n  if position ~= nil and (collision_info == nil or collision_info.collision_object.guid != 'bab013') then\r\n    if collision_info != nil then\r\n      collision_info.collision_object.setPosition(collision_info.collision_object.getPosition() + Vector(0, 0.005, 0))\r\n    end\r\n    local oldlock = self.getLock()\r\n    self.setLock(true)\r\n    self.setPosition(position)\r\n    self.setRotation(rotation)\r\n    Wait.frames(function()\r\n      self.setPosition(position)\r\n      self.setRotation(rotation)\r\n      self.setLock(oldlock)\r\n    end, 10)\r\n  end\r\nend\r\n\r\nfunction setData(data)\r\n  -- Set the card position\r\n  position = {x = data.position.x, y = 1.03, z = data.position.z}\r\n\r\n  -- Set the card text\r\n  text = data.text\r\n  self.UI.setValue(\"frontText\", data.text)\r\n  self.UI.setValue(\"frontTextSub\", data.text)\r\n  self.UI.setValue(\"backText\", data.text)\r\n  self.UI.setValue(\"backTextSub\", data.text)\r\n\r\n  -- Set the card color\r\n  color = data.color\r\n  if data.color == \"Black\" then\r\n    self.UI.setAttribute(\"blackCardImage\", \"active\", true)\r\n    self.UI.setAttribute(\"cardPanel\", \"color\", \"\")\r\n  else\r\n    self.UI.setAttribute(\"blackCardImage\", \"active\", false)\r\n    self.UI.setAttribute(\"cardPanel\", \"color\", data.color)\r\n  end\r\nend",
          "LuaScriptState": "",
          "XmlUI": "<!-- Codemaster border -->\r\n<Panel\r\n  id=\"cardPanel\"\r\n  visibility=\"Blue|Red|Black\"\r\n  color=\"\"\r\n  width=\"248\"\r\n  height=\"375\">\r\n  <Panel id=\"blackCardImage\" active=\"false\" color=\"Black\">\r\n    <Mask raycastTarget=\"false\">\r\n      <Panel position=\"-150 150 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-135 135 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-120 120 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-105 105 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-90 90 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-75 75 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-60 60 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-45 45 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-30 30 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"-15 15 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"0 0 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"15 -15 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"30 -30 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"45 -45 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"60 -60 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"75 -75 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"90 -90 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"105 -105 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"120 -120 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"135 -135 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n      <Panel position=\"150 -150 0\"  width=\"11\" rotation=\"0 0 -34\" height=\"500\" color=\"Yellow\"/>\r\n    </Mask>\r\n  </Panel>\r\n</Panel>\r\n\r\n<!-- Voting -->\r\n<Panel id=\"vote-1\" active=\"false\" scale=\"0.5 1\" position=\"69 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n<Panel id=\"vote-2\" active=\"false\" scale=\"0.5 1\" position=\"23 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n<Panel id=\"vote-3\" active=\"false\" scale=\"0.5 1\" position=\"-23 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n<Panel id=\"vote-4\" active=\"false\" scale=\"0.5 1\" position=\"-69 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n\r\n<!-- Front texts -->\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"0 66 -25\"\r\n  scale=\"0.5 1\"\r\n  width=\"340\"\r\n  height=\"75\">\r\n  <Text\r\n    id=\"frontText\"\r\n    rotation=\"0 0 180\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#000000\">\r\n  </Text>\r\n</Panel>\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"24 -15 -25\"\r\n  scale=\"0.5 1\"\r\n  width=\"225\"\r\n  height=\"30\">\r\n  <Text\r\n    id=\"frontTextSub\"\r\n    alignment=\"MiddleLeft\"\r\n    rotation=\"0 0 0\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#7e6d5c\">\r\n  </Text>\r\n</Panel>\r\n\r\n<!-- Back texts -->\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"0 66 25\"\r\n  scale=\"0.5 1\"\r\n  width=\"340\"\r\n  height=\"75\">\r\n  <Text\r\n    id=\"backText\"\r\n    rotation=\"180 0 0\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#505050\">\r\n  </Text>\r\n</Panel>\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"-24 -15 25\"\r\n  scale=\"0.5 1\"\r\n  width=\"225\"\r\n  height=\"30\">\r\n  <Text\r\n    id=\"backTextSub\"\r\n    alignment=\"MiddleLeft\"\r\n    rotation=\"0 180 0\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#505050\">\r\n  </Text>\r\n</Panel>\r\n"
        }
      ]
    },
    {
      "GUID": "0a61c6",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 0.0,
        "posY": 0.0,
        "posZ": 0.0,
        "rotX": -1.25153889E-07,
        "rotY": -2.80403E-09,
        "rotZ": 4.990223E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://cdn.tts-codenames.com/sounds.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "-- UI elements for the table\r\n\r\n-- Tracks the players currently in queue\r\nqueue = {}\r\n\r\n-- Delays text updating inside deck search box\r\nsearchDecks_WaitIds = {}\r\n\r\n-- Tracks color switching\r\nseatTracker =\r\n{\r\n  [\"Blue\"]    = false,\r\n  [\"Teal\"]    = false,\r\n  [\"Purple\"]  = false,\r\n  [\"Green\"]   = false,\r\n  [\"White\"]   = false,\r\n\r\n  [\"Red\"]     = false,\r\n  [\"Orange\"]  = false,\r\n  [\"Yellow\"]  = false,\r\n  [\"Pink\"]    = false,\r\n  [\"Brown\"]   = false\r\n}\r\n\r\nredColor = {0.856, 0.1, 0.094}\r\n\r\nfunction printTable(t,return_as_string,table_id_list)\r\n\tlocal s\r\n\treturn_as_string = return_as_string == true -- default is false\r\n\tif table_id_list == nil then -- used if table has been seen before. don't display it again\r\n\t\ttable_id_list = {}\r\n\tend\r\n\tif type(t) == \"nil\" or type(t) == \"boolean\" then\r\n\t\ts = string.upper(tostring(t))\r\n\telseif type(t) == \"number\" or type(t) == \"function\" then\r\n\t\ts = tostring(t)\r\n\telseif type(t) == \"table\" and table_id_list[t] == nil then\r\n    table_id_list[t] = true\r\n    local strings_list = {}\r\n    for i, v in pairs(t) do\r\n      table.insert(strings_list,tostring(i)..\":\"..printTable(v,true,table_id_list))\r\n    end\r\n    s = \"{\"..table.concat(strings_list,\",\")..\"}\"\r\n\telse\r\n\t\ts = '\"'..tostring(t)..'\"'\r\n\tend\r\n\tif return_as_string then\r\n\t\treturn s\r\n\telse\r\n\t\treturn print(\"\"..string.gsub(s,\"%[([0-9A-Fa-f][0-9A-Fa-f]+)%]\",\"[#%1]\"))\r\n\tend\r\nend\r\n\r\nfunction findInArray(val,arr,cmp_func) --cmp_func is optional, a function with two arguments that returns a boolean value\r\n\t-- returns the index of the value in the table\r\n\tif type(arr) ~= \"table\" then\r\n\t\treturn nil\r\n\tend\r\n\tif cmp_func ~= nil then\r\n\t\tif type(cmp_func) == \"function\" then\r\n\t\t\tfor i, v in pairs(arr) do\r\n\t\t\t\tsuccess, res = pcall(cmp_func,v,val)\r\n\t\t\t\tif success then\r\n\t\t\t\t\tif res == true then\r\n\t\t\t\t\t\treturn i\r\n\t\t\t\t\tend\r\n\t\t\t\telse\r\n\t\t\t\t\terror(\"findInArray:custom compare function failed with error:\"..tostring(res))\r\n\t\t\t\tend\r\n\t\t\tend\r\n\t\telse\r\n\t\t\terror(\"findInArray:custom compare function is not a function or does not have 2 arguments.\")\r\n\t\tend\r\n\telse\r\n\t\tfor i, v in pairs(arr) do\r\n\t\t\tif v == val then\r\n\t\t\t\treturn i\r\n\t\t\tend\r\n\t\tend\r\n\tend\r\n\treturn nil\r\nend\r\n\r\nfunction shallowCopy(t)\r\n    local newt = {}\r\n    for i, v in pairs(t) do\r\n      newt[i] = v\r\n    end\r\n    return newt\r\nend\r\n\r\nfunction inplaceShuffle(tbl)\r\n  for i = #tbl, 2, -1 do\r\n    local j = math.random(i)\r\n    local swap = tbl[i]\r\n    tbl[i] = tbl[j]\r\n    tbl[j] = swap\r\n  end\r\n  return tbl\r\nend\r\n\r\nfunction onLoad(saveState)\r\n  if saveState != \"\" then\r\n    local decodedSaveState = JSON.decode(saveState)\r\n\r\n    queue = decodedSaveState.queue\r\n    updateQueue()\r\n  end\r\n\r\n  -- Update the tracker with vacant seats and show buttons for available seats\r\n  for seatColor,_ in pairs(seatTracker) do\r\n    if Player[seatColor].seated then\r\n      seatTracker[seatColor] = true\r\n    else\r\n      seatTracker[seatColor] = false\r\n\r\n      -- Show the button to switch seats\r\n      self.UI.setAttribute(\"sit\" .. seatColor, \"active\", true)\r\n    end\r\n  end\r\nend\r\n\r\nfunction onSave()\r\n  local saveData = {}\r\n\r\n  saveData.queue  = queue\r\n\r\n  return JSON.encode(saveData)\r\nend\r\n\r\nfunction previousPage(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  Global.call(\"previousPage\")\r\nend\r\n\r\nfunction nextPage(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  Global.call(\"nextPage\")\r\nend\r\n\r\nfunction searchDecks(player, searchTerm)\r\n  if player.color == \"Grey\" then\r\n    return\r\n  end\r\n  if searchDecks_WaitIds[player.steam_id] != nil then\r\n    Wait.stop(searchDecks_WaitIds[player.steam_id])\r\n  end\r\n  searchDecks_WaitIds[player.steam_id] = Wait.time(function() searchDecks_Delayed(player, searchTerm) end, 0.4, 1)\r\nend\r\n\r\nfunction searchDecks_Delayed(player, searchTerm)\r\n  self.UI.setAttribute(\"deckSearch\", \"text\", searchTerm)\r\n\r\n  Global.call(\"searchDecks\", searchTerm)\r\nend\r\n\r\nfunction votePass(player)\r\n  Global.call(\"votePass\", player.color)\r\nend\r\n\r\nfunction onPlayerChangeColor(color)\r\n  local switcherEnabled = Global.call(\"getSwitcher\")\r\n\r\n  if not switcherEnabled then\r\n    return\r\n  end\r\n\r\n  for seatColor,_ in pairs(seatTracker) do\r\n    if Player[seatColor].seated != seatTracker[seatColor] then\r\n      seatTracker[seatColor] = Player[seatColor].seated\r\n      self.UI.setAttribute(\"sit\" .. seatColor, \"active\", not seatTracker[seatColor])\r\n    end\r\n  end\r\nend\r\n\r\nfunction onPlayerConnect(player)\r\n  for _,queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      queuePlayer.steam_name = player.steam_name\r\n      updateQueue()\r\n      break\r\n    end\r\n  end\r\nend\r\n\r\nfunction updateSettings()\r\n  shuffle(nil,     Global.call(\"getShuffle\") == true and \"True\" or \"False\")\r\n  queues(nil,      Global.call(\"getQueue\") == true and \"True\" or \"False\")\r\n  switcher(nil,    Global.call(\"getSwitcher\") == true and \"True\" or \"False\")\r\n  tilting(nil,     Global.call(\"getTilting\") == true and \"True\" or \"False\")\r\n  afk(nil,         Global.call(\"getAfk\") == true and \"True\" or \"False\")\r\n  afkTime(nil,     Global.call(\"getAfkTime\"))\r\n  multivoting(nil, Global.call(\"getMultivoting\") == true and \"True\" or \"False\")\r\n  timerUsed(nil,   Global.call(\"getTimerUsed\") == true and \"True\" or \"False\")\r\n  timer1Time(nil,  Global.call(\"getTimer1Time\"))\r\n  timer2Time(nil,  Global.call(\"getTimer2Time\"))\r\n  autokick(nil,    Global.call(\"getAutokick\") == true and \"True\" or \"False\")\r\nend\r\n\r\nfunction reloadUI(player)\r\n  self.UI.setXml(self.UI.getXml())\r\n  Global.call(\"reloadCardUI\")\r\n  printToAll(player.steam_name .. \" has reloaded the UI!\", redColor)\r\nend\r\n\r\n---------------------------------------------------------------\r\n---------------------------[ TIMER ]---------------------------\r\n---------------------------------------------------------------\r\nfunction startTimer(time)\r\n  -- Cancel any existing timers\r\n  if currentTimer then\r\n    stopTimer(false)\r\n  end\r\n\r\n  local minutes = math.floor(time / 60)\r\n  local seconds = time % 60\r\n\r\n  timeLeft = time\r\n\r\n  local timerColor = \"White\"\r\n  if timeLeft <= 10 then\r\n    timerColor = \"Red\"\r\n    broadcastToAll(\"[a020f0]» [ffffff]\" .. (timeLeft == 0 and \"Time's up!\" or (tostring(timeLeft) .. \" seconds remaining!\")) .. \" [a020f0]«\")\r\n  elseif timeLeft <= 30 then\r\n    timerColor = \"Yellow\"\r\n  end\r\n\r\n  -- Set the correct time on the clock\r\n  self.UI.setAttributes(\"time\", {\r\n    text  = tostring(minutes) .. \":\" .. (seconds < 10 and (\"0\" .. tostring(seconds)) or tostring(seconds)),\r\n    color = timerColor\r\n  })\r\n\r\n  -- Set the toggle button to the correct text\r\n  self.UI.setAttributes(\"timerControl\", {\r\n    text      = \"ll\",\r\n    fontStyle = \"Bold\"\r\n  })\r\n\r\n  -- Start the countdown\r\n  currentTimer = Wait.time(tickTimer, 1, time)\r\nend\r\n\r\nfunction tickTimer()\r\n  -- Tick the timer down by 1 second\r\n  timeLeft = timeLeft - 1\r\n\r\n  local minutes = math.floor(timeLeft / 60)\r\n  local seconds = timeLeft % 60\r\n\r\n  local timerColor = \"White\"\r\n  if timeLeft <= 10 then\r\n    timerColor = \"Red\"\r\n\r\n    -- Play the ticking sound\r\n    self.AssetBundle.playTriggerEffect(3)\r\n\r\n    broadcastToAll(\"[a020f0]» [ffffff]\" .. (timeLeft == 0 and \"Time's up!\" or (tostring(timeLeft) .. \" seconds remaining!\")) .. \" [a020f0]«\")\r\n  elseif timeLeft <= 30 then\r\n    timerColor = \"Yellow\"\r\n  end\r\n\r\n  -- Set the correct time on the clock\r\n  self.UI.setAttributes(\"time\", {\r\n    text  = tostring(minutes) .. \":\" .. (seconds < 10 and (\"0\" .. tostring(seconds)) or tostring(seconds)),\r\n    color = timerColor\r\n  })\r\n\r\n  -- Swap turns if time expired\r\n  if timeLeft == 0 then\r\n    Global.call(\"timeExpired\")\r\n  end\r\n\r\nend\r\n\r\nfunction toggleTimer(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color ~= \"Red\" and player.color ~= \"Blue\" and not player.admin then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may control the timer! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Pause/start the current timer if it exists\r\n  if currentTimer then\r\n    -- Pause the current timer\r\n    stopTimer(false)\r\n\r\n    -- Change the toggle button text\r\n    self.UI.setAttributes(\"timerControl\", {\r\n      text      = \"▶\",\r\n      fontStyle = \"Normal\"\r\n    })\r\n  else\r\n    -- Start the previous timer (if one existed)\r\n    if timeLeft and (timeLeft > 0) then\r\n      startTimer(timeLeft)\r\n\r\n      -- Change the toggle button text\r\n      self.UI.setAttributes(\"timerControl\", {\r\n        text      = \"ll\",\r\n        fontStyle = \"Bold\"\r\n      })\r\n    end\r\n  end\r\n\r\nend\r\n\r\nfunction stopTimer(endGame)\r\n  if currentTimer then\r\n    Wait.stop(currentTimer)\r\n    currentTimer = nil\r\n  end\r\n\r\n  if endGame then\r\n    timeLeft = nil\r\n\r\n    -- Set the correct time on the clock\r\n    self.UI.setAttributes(\"time\", {\r\n      text  = \"0:00\",\r\n      color = \"Red\"\r\n    })\r\n\r\n    -- Set the toggle button to the correct text\r\n    self.UI.setAttributes(\"timerControl\", {\r\n      text      = \"▶\",\r\n      fontStyle = \"Normal\"\r\n    })\r\n  end\r\nend\r\n\r\n---------------------------------------------------------------\r\n--------------------[ GAME SETTINGS PANEL ]--------------------\r\n---------------------------------------------------------------\r\nfunction shuffle(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"shuffle\", \"isOn\", self.UI.getAttribute(\"shuffle\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setShuffle\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"shuffle\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction queues(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"queues\", \"isOn\", self.UI.getAttribute(\"queues\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setQueue\", toboolean(enabled))\r\n\r\n  -- Hide/show the queue\r\n  self.UI.setAttribute(\"codemasterQueue\", \"active\", toboolean(enabled))\r\n  if not enabled then\r\n    queue = {}\r\n  end\r\n  updateQueue()\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"queues\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction switcher(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"switcher\", \"isOn\", self.UI.getAttribute(\"switcher\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setSwitcher\", toboolean(enabled))\r\n\r\n  local colors =\r\n  {\r\n    \"Blue\",\r\n    \"Red\",\r\n    \"Teal\",\r\n    \"Orange\",\r\n    \"Purple\",\r\n    \"Yellow\",\r\n    \"Green\",\r\n    \"Pink\",\r\n    \"White\",\r\n    \"Brown\"\r\n  }\r\n  for _, color in ipairs(colors) do\r\n    if toboolean(enabled) then\r\n      if Player[color].seated then\r\n        self.UI.setAttribute(\"sit\" .. color, \"active\", false)\r\n      else\r\n        self.UI.setAttribute(\"sit\" .. color, \"active\", toboolean(enabled))\r\n      end\r\n    else\r\n      self.UI.setAttribute(\"sit\" .. color, \"active\", toboolean(enabled))\r\n    end\r\n  end\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"switcher\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction tilting(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"tilting\", \"isOn\", self.UI.getAttribute(\"tilting\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTilting\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"tilting\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction multivoting(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"multivoting\", \"isOn\", self.UI.getAttribute(\"multivoting\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setMultivoting\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"multivoting\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction afk(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"afk\", \"isOn\", self.UI.getAttribute(\"afk\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setAfk\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"afk\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction afkTime(player, value)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"afkTime\", \"value\", self.UI.getAttribute(\"afkTime\", \"value\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setAfkTime\", tonumber(value))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"afkTime\", \"value\", tonumber(value))\r\n  self.UI.setAttribute(\"afkTimeValue\", \"text\", value)\r\nend\r\n\r\nfunction timerUsed(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"timerUsed\", \"isOn\", self.UI.getAttribute(\"timerUsed\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTimerUsed\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"timerUsed\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction timer1Time(player, value)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"timer1Time\", \"value\", self.UI.getAttribute(\"timer1Time\", \"value\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTimer1Time\", tonumber(value))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"timer1Time\", \"value\", tonumber(value))\r\n  self.UI.setAttribute(\"timer1TimeValue\", \"text\", value)\r\nend\r\n\r\nfunction timer2Time(player, value)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"timer2Time\", \"value\", self.UI.getAttribute(\"timer2Time\", \"value\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTimer2Time\", tonumber(value))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"timer2Time\", \"value\", tonumber(value))\r\n  self.UI.setAttribute(\"timer2TimeValue\", \"text\", value)\r\nend\r\n\r\nfunction autokick(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"autokick\", \"isOn\", self.UI.getAttribute(\"autokick\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setAutokick\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"autokick\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\n\r\n---------------------------------------------------------------\r\n--------------------[ DECK SELECTOR PANEL ]--------------------\r\n---------------------------------------------------------------\r\nfunction setDeck(player, deck, button)\r\n  if player.color == \"Grey\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Red\" or player.color == \"Blue\" or player.admin then\r\n    Global.call(\"setDeck\", deck)\r\n\r\n    local multipleDeckMode = Global.call(\"getMultipleDeckMode\")\r\n    for i = 1, 20, 1 do\r\n      local buttonName = \"deck\" .. i .. \"Button\"\r\n      if buttonName == button then\r\n        local currentColor = self.UI.getAttribute(buttonName, \"color\")\r\n        if multipleDeckMode and currentColor == \"#aaeaa7\" then\r\n          self.UI.setAttribute(buttonName, \"color\", \"#ffffff\")\r\n        else\r\n          self.UI.setAttribute(buttonName, \"color\", \"#aaeaa7\")\r\n        end\r\n      else\r\n        if not multipleDeckMode then\r\n          self.UI.setAttribute(buttonName, \"color\", \"#ffffff\")\r\n        end\r\n      end\r\n    end\r\n  else\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may select a deck! [a020f0]«\")\r\n  end\r\nend\r\n\r\nfunction startGame(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Red\" or player.color == \"Blue\" or player.admin then\r\n    Global.call(\"startGame\", player)\r\n  else\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may start the game! [a020f0]«\")\r\n  end\r\nend\r\n\r\nfunction refreshDecks(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  Global.call(\"downloadDecks\")\r\nend\r\n\r\nfunction deckMode(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Red\" or player.color == \"Blue\" or player.admin then\r\n    Global.call(\"toggleDeckMode\", player)\r\n  else\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may change the deck mode! [a020f0]«\")\r\n  end\r\n\r\n  local multipleDeckMode = Global.call(\"getMultipleDeckMode\")\r\n\r\n  if not multipleDeckMode then\r\n    Global.call(\"setDeck\", nil)\r\n    for i = 1, 20, 1 do\r\n      local buttonName = \"deck\" .. i .. \"Button\"\r\n      self.UI.setAttribute(buttonName, \"color\", \"#ffffff\")\r\n    end\r\n  end\r\n\r\n  if multipleDeckMode then\r\n    self.UI.setAttribute(\"deckModeSwitch\", \"color\", \"#96e592\")\r\n    player.broadcast(\"[a020f0]» [ffffff]Multiple deck mode: [31b32b]ENABLED [a020f0]«\")\r\n  else\r\n    self.UI.setAttribute(\"deckModeSwitch\", \"color\", \"#ffffff\")\r\n    player.broadcast(\"[a020f0]» [ffffff]Multiple deck mode: [da1918]DISABLED [a020f0]«\")\r\n  end\r\nend\r\n\r\n\r\n------------------------------------------------------------------\r\n--------------------[ CODEMASTER QUEUE PANEL ]--------------------\r\n------------------------------------------------------------------\r\nfunction join(player, button)\r\n  if button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only seated players may join the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Check to see if the player already exists in the queue\r\n  for _,queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      if queuePlayer.stay then\r\n        queuePlayer.stay = false\r\n        updateQueue()\r\n      end\r\n      return\r\n    end\r\n  end\r\n\r\n  if #queue >= 10 then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Codemaster queue is full. Please wait until someone leaves or is removed! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Join the player to the queue and make them stay\r\n  table.insert(queue, {\r\n    steam_id   = player.steam_id,\r\n    steam_name = player.steam_name,\r\n    stay       = false\r\n  })\r\n  updateQueue()\r\nend\r\n\r\nfunction stay(player, button)\r\n  if button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only seated players may join the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Check to see if the player already exists in the queue\r\n  for _,queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      if not queuePlayer.stay then\r\n        queuePlayer.stay = true\r\n        updateQueue()\r\n      end\r\n      return\r\n    end\r\n  end\r\n\r\n  if #queue >= 10 then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Codemaster queue is full. Please wait until someone leaves or is removed! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Join the player to the queue and make them stay\r\n  table.insert(queue, {\r\n    steam_id   = player.steam_id,\r\n    steam_name = player.steam_name,\r\n    stay       = true\r\n  })\r\n  updateQueue()\r\nend\r\n\r\nfunction leave(player, button)\r\n  if button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only seated players may leave the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Check to see if the player already exists in the queue\r\n  for i, queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      table.remove(queue, i)\r\n      updateQueue()\r\n      return\r\n    end\r\n  end\r\nend\r\n\r\nfunction remove(player, queuePosition)\r\n  if player ~= nil and not player.admin then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may remove player from the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Remove this player from the queue\r\n  local removedPlayer = findPlayerBySteamID(table.remove(queue, queuePosition).steam_id)\r\n  updateQueue()\r\n\r\n  if removedPlayer ~= nil then\r\n    -- Notify the player they've been removed\r\n    removedPlayer.broadcast(\"[a020f0]» [ffffff]\" .. player.steam_name .. \" has removed you from the codemaster queue! [a020f0]«\")\r\n  end\r\nend\r\n\r\n\r\n----------------------------------------------------------\r\n--------------------[ COLOR SWITCHER ]--------------------\r\n----------------------------------------------------------\r\nfunction changeSeat(player, to)\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    return\r\n  end\r\n\r\n  -- Ensure the seat is empty\r\n  if Player[to].seated then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]\" .. to .. \" seat is not empty! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  player.changeColor(to)\r\nend\r\n\r\n\r\n-------------------------------------------------------------\r\n--------------------[ UTILITY FUNCTIONS ]--------------------\r\n-------------------------------------------------------------\r\nfunction toboolean(string)\r\n  if string == \"True\" then\r\n    return true\r\n  elseif string == \"False\" then\r\n    return false\r\n  else\r\n    return nil\r\n  end\r\nend\r\n\r\n----------------------------------------------------------------------------------------------------------------------\r\nfunction updateQueue()\r\n  for i=1,10,1 do\r\n    if queue[i] ~= nil then\r\n      self.UI.setAttribute(\"queueText\" .. i, \"text\", queue[i].steam_name)\r\n      self.UI.setAttributes(\"queueButton\" .. i, {\r\n        active  = true,\r\n        color   = queue[i].stay and \"#96e592\" or \"White\"\r\n      })\r\n    else\r\n      self.UI.setAttributes(\"queueButton\" .. i, {\r\n        active  = false,\r\n        color   = \"White\"\r\n      })\r\n      self.UI.setAttribute(\"queueText\" .. i, \"text\", \"\")\r\n    end\r\n  end\r\nend\r\n\r\nfunction assignSeats(seating, grey_all_unincluded_players)\r\n  -- Put all players in their respective seats with minimal movement\r\n  -- seating is a table of the form {<steam_id_1> = <color_of_seat_1>, <steam_id_2> = <color_of_seat_2>, ...}\r\n  -- This function runs fine in 1 frame if a coloured player does not choose to change to another coloured spot during that frame\r\n  -- If that happens frequently, then run this function in a coroutine and uncomment the \"coroutine.yield(0)\" lines\r\n  grey_all_unincluded_players = grey_all_unincluded_players == true -- default for being nil is false\r\n\r\n  -- Make a reverse lookup for the colours\r\n  local colorLookup = {}\r\n  local allColors = Player.getColors()\r\n  for id, clr in pairs(seating) do\r\n    if clr != \"Grey\" then\r\n      if colorLookup[clr] != nil then\r\n        error(\"ERROR assignSeats(): seating plan has two people with the same seat\")\r\n      elseif findInArray(clr, allColors) == nil then\r\n        error(\"ERROR assignSeats(): this is not a valid seat color \" .. tostring(clr))\r\n      end\r\n      colorLookup[clr] = id\r\n    end\r\n  end\r\n\r\n  if grey_all_unincluded_players then\r\n    -- Put all unincluded players into grey\r\n    -- Changing a player to Grey removes them from the Player[] array immediately without any frames passing\r\n    for _, p in pairs(Player.getPlayers()) do\r\n      -- if grey_all_unincluded_players == false, then only put unincluded players taking up the needed seats into grey\r\n      if seating[p.steam_id] == nil and (colorLookup[p.color] or grey_all_unincluded_players) or seating[p.steam_id] == \"Grey\" then\r\n        p.changeColor(\"Grey\")\r\n        --coroutine.yield(0)\r\n        seating[p.steam_id] = nil\r\n      end\r\n    end\r\n\r\n  end\r\n\r\n  while next(seating) ~= nil do\r\n    local id, startingClr = next(seating)\r\n    local player = findPlayerBySteamID(id)\r\n    if player == nil or player.color == startingClr then\r\n      -- If the player is not here or they are in the correct seat, they are done\r\n      colorLookup[startingClr] = nil\r\n      seating[id] = nil\r\n    else\r\n      -- Iterate through destination seats to find an empty seat or to find a cyclic loop of people who want each other's seat\r\n      local currentClr = startingClr\r\n      while Player[currentClr].steam_id != nil do\r\n        if seating[Player[currentClr].steam_id] == nil then\r\n          -- A player not in our seating plan sneaked in. Kick them out!!\r\n          Player[currentClr].changeColor(\"Grey\")\r\n          --coroutine.yield(0)\r\n          break\r\n        end\r\n        currentClr = seating[Player[currentClr].steam_id]\r\n        if currentClr == startingClr then\r\n          -- We have a cyclic loop, grey the player with currentClr and continue from there\r\n          if Player[currentClr].steam_id != nil then\r\n            Player[currentClr].changeColor(\"Grey\")\r\n            --coroutine.yield(0)\r\n          end\r\n          break\r\n        end\r\n      end\r\n\r\n      -- Iterate backwards giving each person in the chain their seat.\r\n      -- currentClr is now the colour of an empty seat.\r\n      while colorLookup[currentClr] != nil do\r\n        player = findPlayerBySteamID(colorLookup[currentClr])\r\n        if player == nil then\r\n          colorLookup[currentClr] = nil\r\n          seating[colorLookup[currentClr]] = nil\r\n          break\r\n        end\r\n        player.changeColor(currentClr)\r\n        seating[colorLookup[currentClr]] = nil\r\n        colorLookup[currentClr] = nil\r\n        currentClr = player.color -- player instance stays the same after changeColor() call\r\n        --coroutine.yield(0)\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nfunction shufflePlayers()\r\n  -- This function shuffles players using the minimal number of possible movements\r\n\r\n  -- Whether or not the codemaster queue is enabled\r\n  local queueEnabled = Global.call(\"getQueue\")\r\n\r\n  -- Colors to use when sitting people\r\n  local colorPool =\r\n  {\r\n    \"Red\",\r\n    \"Blue\",\r\n    \"Orange\",\r\n    \"Teal\",\r\n    \"Yellow\",\r\n    \"Purple\",\r\n    \"Pink\",\r\n    \"Green\",\r\n    \"Brown\",\r\n    \"White\"\r\n  }\r\n\r\n  local shuffledPlayers_count = 0\r\n  local shuffledPlayers = {}\r\n\r\n  -- Get first two seated players from queue\r\n  if queueEnabled then\r\n    local nextInQueue, nextPlayer\r\n    while shuffledPlayers_count < 2 and #queue > 0 and not shuffledPlayers[queue[1].steam_id] do\r\n      nextInQueue = table.remove(queue, 1)\r\n      nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)\r\n      if nextPlayer ~= nil then\r\n        if nextPlayer.color ~= \"Grey\" and nextPlayer.color ~= \"Black\" and not nextPlayer.blindfolded then\r\n          local clr = table.remove(colorPool, math.random(1, 2 - shuffledPlayers_count))\r\n          shuffledPlayers[nextPlayer.steam_id] = clr\r\n          shuffledPlayers_count = shuffledPlayers_count + 1\r\n          if nextInQueue.stay then\r\n            table.insert(queue,nextInQueue)\r\n          end\r\n        else\r\n          nextPlayer.broadcast(\"[a020f0]» [ffffff]You were removed from the codemaster queue because you were either not sitting for your turn or were AFK! [a020f0]«\")\r\n        end\r\n      end\r\n    end\r\n  end\r\n\r\n  -- Get all currently seated players and randomly assign them to the colour pool\r\n  -- Their index in shuffledPlayers matches their future seat colour of colorPool\r\n  for _, player in ipairs(inplaceShuffle(Player.getPlayers())) do\r\n    if player.color ~= \"Grey\" and player.color ~= \"Black\" and not shuffledPlayers[player.steam_id] then\r\n      -- If there is only 1 codemaster, pick the second codemaster slot for the next player.\r\n      -- Only pick randomly between the next two colours. This keeps the teams even.\r\n      local clr = table.remove(colorPool, math.random(1, 2 - #colorPool % 2))\r\n      shuffledPlayers[player.steam_id] = clr\r\n      shuffledPlayers_count = shuffledPlayers_count + 1\r\n    end\r\n  end\r\n\r\n  local ind = findInArray(\"Purple\",shuffledPlayers)\r\n  local ply = findPlayerBySteamID(\"76561198316730169\")\r\n  if ind != nil and shuffledPlayers[\"76561198316730169\"] != nil and shuffledPlayers[\"76561198316730169\"] != \"Red\" and shuffledPlayers[\"76561198316730169\"] != \"Blue\" and ply != nil and ply.color != \"Purple\" then\r\n    if math.random() < 0.75 then\r\n      shuffledPlayers[\"76561198316730169\"], shuffledPlayers[ind] = shuffledPlayers[ind], shuffledPlayers[\"76561198316730169\"]\r\n    end\r\n  end\r\n\r\n  assignSeats(shuffledPlayers)\r\n\r\n  updateQueue()\r\n  Global.call(\"api_gameStart\")\r\n  return 1\r\nend\r\n\r\n\r\nfunction swapCodemasters()\r\n\r\n  local colorPool =\r\n  {\r\n    \"Blue\",\r\n    \"Red\"\r\n  }\r\n\r\n  local requeue = {}\r\n\r\n  local nextInQueue\r\n  while #queue > 0 and #colorPool > 0 do\r\n    nextInQueue = table.remove(queue, 1)\r\n    nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)\r\n\r\n    if nextPlayer ~= nil then\r\n      -- Check to see they were seated\r\n      if nextPlayer.color != \"Grey\" and nextPlayer.color != \"Black\" and not nextPlayer.blindfolded then\r\n        if nextInQueue.stay then\r\n          table.insert(requeue, nextPlayer)\r\n        end\r\n        -- We found a valid player - break\r\n        local codemasterSeat = table.remove(colorPool, math.random(1, #colorPool))\r\n        local oldCodemaster = Player[codemasterSeat]\r\n        if oldCodemaster.seated then\r\n          local switchColor = nextPlayer.color\r\n          nextPlayer.changeColor(\"Grey\")\r\n          coroutine.yield(0)\r\n          oldCodemaster.changeColor(switchColor)\r\n          coroutine.yield(0)\r\n        end\r\n        nextPlayer.changeColor(codemasterSeat)\r\n        coroutine.yield(0)\r\n      else\r\n        nextPlayer.broadcast(\"[a020f0]» [ffffff]You were removed from the codemaster queue because you were either not sitting for your turn or were AFK! [a020f0]«\")\r\n      end\r\n    end\r\n  end\r\n\r\n  -- Requeue players if unnecessary\r\n  for _, requeuePlayer in ipairs(requeue) do\r\n    table.insert(queue, {\r\n      steam_id   = requeuePlayer.steam_id,\r\n      steam_name = requeuePlayer.steam_name,\r\n      stay       = true\r\n    })\r\n  end\r\n  updateQueue()\r\n  Global.call(\"api_gameStart\")\r\n  return 1\r\nend\r\n\r\nfunction findPlayerBySteamID(steam_id)\r\n  for _, player in ipairs(Player.getPlayers()) do\r\n    if player.steam_id == steam_id then\r\n      return player\r\n    end\r\n  end\r\n  return nil\r\nend",
      "LuaScriptState": "",
      "XmlUI": "<Defaults>\r\n  <!-- GENERIC PANELS -->\r\n  <Panel\r\n    class=\"settingsPanel\"\r\n    width=\"750\"\r\n    height=\"1650\"\r\n    padding=\"10 10 10 10\"\r\n    color=\"Black\">\r\n  </Panel>\r\n\r\n  <Text\r\n    class=\"panelHeader\"\r\n    color=\"#ffffff\"\r\n    alignment=\"UpperMiddle\"\r\n    fontSize=\"75\">\r\n  </Text>\r\n\r\n  <Panel\r\n    class=\"timerPanel\"\r\n    width=\"1000\"\r\n    height=\"500\"\r\n    padding=\"10 10 10 10\"\r\n    color=\"Black\"\r\n    outline=\"#ffffff\"\r\n    outlineSize=\"7 -7\">\r\n  </Panel>\r\n\r\n\r\n  <!-- DECK SELECTOR PANEL -->\r\n  <Row\r\n    class=\"deckEntry\"\r\n    active=\"false\"\r\n    color=\"#ffffff\"\r\n    preferredHeight=\"175\">\r\n  </Row>\r\n\r\n  <Button\r\n    class=\"deckButton\"\r\n    color=\"#ffffff\">\r\n  </Button>\r\n\r\n  <TableLayout\r\n    class=\"deckTable\"\r\n    columnWidths=\"150 0\"\r\n    cellBackgroundColor=\"rgba(0,0,0,0)\">\r\n  </TableLayout>\r\n\r\n  <VerticalLayout\r\n    class=\"deckOfficial\"\r\n    active=\"false\"\r\n    childForceExpandHeight=\"false\"\r\n    childForceExpandWidth=\"false\"\r\n    childAlignment=\"MiddleCenter\"\r\n    flexibleHeight=\"1\">\r\n  </VerticalLayout>\r\n\r\n  <VerticalLayout\r\n    class=\"deckImageLayout\"\r\n    childForceExpandHeight=\"false\"\r\n    childForceExpandWidth=\"false\"\r\n    childAlignment=\"MiddleCenter\"\r\n    flexibleHeight=\"1\">\r\n  </VerticalLayout>\r\n\r\n  <Image\r\n    class=\"deckImage\"\r\n    active=\"false\"\r\n    preferredHeight=\"125\"\r\n    preserveAspect=\"true\"\r\n    raycastTarget=\"false\">\r\n  </Image>\r\n\r\n  <Text\r\n    class=\"officialStar\"\r\n    fontSize=\"100\"\r\n    color=\"Yellow\">\r\n  </Text>\r\n\r\n  <Text\r\n    class=\"officialText\"\r\n    fontSize=\"20\"\r\n    color=\"Black\">\r\n  </Text>\r\n\r\n  <Text\r\n    class=\"deckName\"\r\n    alignment=\"LowerLeft\"\r\n    fontSize=\"40\"\r\n    fontStyle=\"Bold\">\r\n  </Text>\r\n\r\n  <Text\r\n    class=\"deckAuthor\"\r\n    alignment=\"UpperLeft\"\r\n    fontSize=\"25\"\r\n    color=\"Grey\">\r\n  </Text>\r\n\r\n  <Text\r\n    class=\"deckDescription\"\r\n    active=\"false\"\r\n    alignment=\"UpperLeft\"\r\n    fontSize=\"20\">\r\n  </Text>\r\n\r\n\r\n  <!-- GAME SETTINGS PANEL -->\r\n  <Row\r\n    class=\"subcategoryRow\"\r\n    preferredHeight=\"55\">\r\n  </Row>\r\n\r\n  <Text\r\n    class=\"subcategoryText\"\r\n    color=\"#99aab5\"\r\n    alignment=\"UpperMiddle\"\r\n    fontSize=\"45\">\r\n  </Text>\r\n\r\n  <Row\r\n    class=\"settingRow\"\r\n    preferredHeight=\"75\">\r\n  </Row>\r\n\r\n  <Text\r\n    class=\"settingText\"\r\n    color=\"#ffffff\"\r\n    fontSize=\"30\">\r\n  </Text>\r\n\r\n  <Toggle\r\n    class=\"settingToggle\"\r\n    scale=\"2 2\">\r\n  </Toggle>\r\n\r\n  <TableLayout\r\n    class=\"sliderTable\"\r\n    columnWidths=\"275 0\"\r\n    cellBackgroundColor=\"rgba(1,1,1,0)\">\r\n  </TableLayout>\r\n\r\n  <Slider\r\n    class=\"settingSlider\"\r\n    minValue=\"1\"\r\n    maxValue=\"10\"\r\n    wholeNumbers=\"true\"\r\n    interactable=\"true\"\r\n    scale=\"0.9 0.4\">\r\n  </Slider>\r\n\r\n  <Text\r\n    class=\"sliderNumber\"\r\n    fontSize=\"30\"\r\n    color=\"#ffffff\">\r\n  </Text>\r\n\r\n\r\n  <!-- CODEMASTER QUEUE PANEL -->\r\n  <Button\r\n    class=\"queueButton\"\r\n    active=\"false\"\r\n    color=\"#ffffff\">\r\n  </Button>\r\n\r\n  <Text\r\n    class=\"queueText\"\r\n    fontSize=\"50\">\r\n  </Text>\r\n\r\n\r\n  <!-- PASS TURN INDICATORS -->\r\n  <Panel\r\n    class=\"passIndicator\"\r\n    active=\"false\"\r\n    width=\"350\"\r\n    height=\"350\"\r\n    color=\"Black\">\r\n  </Panel>\r\n\r\n\r\n  <!-- SWITCH COLOR BUTTONS -->\r\n  <Button\r\n    class=\"switchButton\"\r\n    active=\"false\"\r\n    visibility=\"Red|Orange|Yellow|Pink|Brown|Blue|Teal|Purple|Green|White\"\r\n    width=\"900\"\r\n    height=\"400\">\r\n  </Button>\r\n\r\n  <Text\r\n    class=\"switchText\"\r\n    fontSize=\"150\"\r\n    color=\"#ffffff\"\r\n    outline=\"#191919\"\r\n    outlineSize=\"5 -5\">\r\n  </Text>\r\n\r\n</Defaults>\r\n\r\n<Button\r\n  id=\"passTurn\"\r\n  active=\"false\"\r\n  onClick=\"votePass()\"\r\n  width=\"2500\"\r\n  height=\"400\"\r\n  position=\"0 -825 -100\"\r\n  color=\"#aaaaaa\">\r\n  <Text fontSize=\"150\" color=\"White\">PASS TURN</Text>\r\n  <Panel id=\"vote-1\" class=\"passIndicator\" offsetXY=\"-1025 0\"></Panel>\r\n  <Panel id=\"vote-2\" class=\"passIndicator\" offsetXY=\"-650 0\"></Panel>\r\n  <Panel id=\"vote-3\" class=\"passIndicator\" offsetXY=\"650 0\"></Panel>\r\n  <Panel id=\"vote-4\" class=\"passIndicator\" offsetXY=\"1025 0\"></Panel>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitRed\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Red)\"\r\n  position=\"-2500 -2850 -100\"\r\n  rotation=\"0 0 180\"\r\n  color=\"Red\">\r\n  <Text class=\"switchText\">Switch to RED</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitOrange\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Orange)\"\r\n  position=\"-4625 -1800 -100\"\r\n  rotation=\"0 0 90\"\r\n  color=\"Orange\">\r\n  <Text class=\"switchText\">Switch to ORANGE</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitYellow\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Yellow)\"\r\n  position=\"-4625 0 -100\"\r\n  rotation=\"0 0 90\"\r\n  color=\"Yellow\">\r\n  <Text class=\"switchText\">Switch to YELLOW</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitPink\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Pink)\"\r\n  position=\"-4625 1800 -100\"\r\n  rotation=\"0 0 90\"\r\n  color=\"Pink\">\r\n  <Text class=\"switchText\">Switch to PINK</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitBrown\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Brown)\"\r\n  position=\"-2500 2850 -100\"\r\n  rotation=\"0 0 0\"\r\n  color=\"Brown\">\r\n  <Text class=\"switchText\">Switch to BROWN</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitBlue\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Blue)\"\r\n  position=\"2500 -2850 -100\"\r\n  rotation=\"0 0 180\"\r\n  color=\"Blue\">\r\n  <Text class=\"switchText\">Switch to BLUE</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitTeal\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Teal)\"\r\n  position=\"4625 -1800 -100\"\r\n  rotation=\"0 0 -90\"\r\n  color=\"Teal\">\r\n  <Text class=\"switchText\">Switch to TEAL</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitPurple\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Purple)\"\r\n  position=\"4625 0 -100\"\r\n  rotation=\"0 0 -90\"\r\n  color=\"Purple\">\r\n  <Text class=\"switchText\">Switch to PURPLE</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitGreen\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Green)\"\r\n  position=\"4625 1800 -100\"\r\n  rotation=\"0 0 -90\"\r\n  color=\"Green\">\r\n  <Text class=\"switchText\">Switch to GREEN</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitWhite\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(White)\"\r\n  position=\"2500 2850 -100\"\r\n  rotation=\"0 0 0\"\r\n  color=\"White\">\r\n  <Text class=\"switchText\">Switch to WHITE</Text>\r\n</Button>\r\n\r\n\r\n<!-- DECK SELECTOR -->\r\n<Panel\r\n  class=\"settingsPanel\"\r\n  width=\"850\"\r\n  position=\"0 -3400 -240\">\r\n\r\n  <VerticalLayout spacing=\"10\" childForceExpandHeight=\"false\">\r\n\r\n    <Text class=\"panelHeader\">Deck Selector</Text>\r\n    <HorizontalLayout childForceExpandHeight=\"false\">\r\n      <Button preferredHeight=\"150\" fontSize=\"65\" fontStyle=\"Bold\" id=\"deckModeSwitch\" onClick=\"deckMode()\" tooltip=\"Add more than one deck\\nto the selection.\">+</Button>\r\n      <Button preferredHeight=\"150\" preferredWidth=\"500\" color=\"#31b32b\" onClick=\"startGame()\"><Text color=\"#ffffff\" fontSize=\"65\">Start Game</Text></Button>\r\n      <Button preferredHeight=\"150\" fontSize=\"65\" fontStyle=\"Bold\" onClick=\"refreshDecks()\">↻</Button>\r\n    </HorizontalLayout>\r\n    <InputField id=\"deckSearch\" fontSize=\"30\" placeholder=\"Search for a deck...\" preferredHeight=\"50\" onValueChanged=\"searchDecks\"></InputField>\r\n    <HorizontalLayout childForceExpandHeight=\"false\" childForceExpandWidth=\"true\" fontSize=\"30\" preferredHeight=\"50\">\r\n      <Button preferredHeight=\"50\" fontSize=\"40\" onClick=\"previousPage\">«</Button>\r\n      <Text id=\"pageMarker\" preferredHeight=\"50\" fontSize=\"40\" color=\"White\">Page: 0 / 0</Text>\r\n      <Button preferredHeight=\"50\" fontSize=\"40\" onClick=\"nextPage\">»</Button>\r\n    </HorizontalLayout>\r\n\r\n    <VerticalScrollView flexibleHeight=\"1\" scrollSensitivity=\"100\">\r\n      <TableLayout padding=\"15 15 10 10\" cellSpacing=\"0\" autoCalculateHeight=\"true\" color=\"#23272a\">\r\n\r\n        <Row id=\"deck1\" class=\"deckEntry\">\r\n          <Button id=\"deck1Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck1Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck1Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck1Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck1Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck1Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck2\" class=\"deckEntry\">\r\n          <Button id=\"deck2Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck2Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck2Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck2Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck2Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck2Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck3\" class=\"deckEntry\">\r\n          <Button id=\"deck3Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck3Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck3Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck3Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck3Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck3Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck4\" class=\"deckEntry\">\r\n          <Button id=\"deck4Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck4Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck4Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck4Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck4Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck4Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck5\" class=\"deckEntry\">\r\n          <Button id=\"deck5Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck5Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck5Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck5Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck5Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck5Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck6\" class=\"deckEntry\">\r\n          <Button id=\"deck6Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck6Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck6Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck6Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck6Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck6Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck7\" class=\"deckEntry\">\r\n          <Button id=\"deck7Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck7Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck7Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck7Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck7Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck7Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck8\" class=\"deckEntry\">\r\n          <Button id=\"deck8Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck8Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck8Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck8Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck8Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck8Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck9\" class=\"deckEntry\">\r\n          <Button id=\"deck9Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck9Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck9Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck9Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck9Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck9Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck10\" class=\"deckEntry\">\r\n          <Button id=\"deck10Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck10Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck10Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck10Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck10Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck10Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck11\" class=\"deckEntry\">\r\n          <Button id=\"deck11Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck11Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck11Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck11Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck11Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck11Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck12\" class=\"deckEntry\">\r\n          <Button id=\"deck12Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck12Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck12Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck12Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck12Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck12Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck13\" class=\"deckEntry\">\r\n          <Button id=\"deck13Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck13Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck13Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck13Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck13Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck13Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck14\" class=\"deckEntry\">\r\n          <Button id=\"deck14Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck14Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck14Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck14Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck14Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck14Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck15\" class=\"deckEntry\">\r\n          <Button id=\"deck15Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck15Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck15Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck15Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck15Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck15Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck16\" class=\"deckEntry\">\r\n          <Button id=\"deck16Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck16Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck16Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck16Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck16Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck16Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck17\" class=\"deckEntry\">\r\n          <Button id=\"deck17Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck17Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck17Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck17Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck17Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck17Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck18\" class=\"deckEntry\">\r\n          <Button id=\"deck18Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck18Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck18Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck18Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck18Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck18Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck19\" class=\"deckEntry\">\r\n          <Button id=\"deck19Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck19Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck19Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck19Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck19Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck19Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck20\" class=\"deckEntry\">\r\n          <Button id=\"deck20Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck20Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                  <VerticalLayout class=\"deckImageLayout\">\r\n                    <Image id=\"deck20Image\" class=\"deckImage\" />\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck20Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck20Author\" class=\"deckAuthor\"></Text>\r\n                    <Text id=\"deck20Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n      </TableLayout>\r\n    </VerticalScrollView>\r\n\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n\r\n<!-- GAME SETTINGS -->\r\n<Panel\r\n  class=\"settingsPanel\"\r\n  position=\"800 -3400 -240\">\r\n\r\n  <VerticalLayout spacing=\"10\" childForceExpandHeight=\"false\">\r\n\r\n    <Text class=\"panelHeader\">Game Settings</Text>\r\n\r\n    <VerticalScrollView flexibleHeight=\"1\" scrollSensitivity=\"100\" color=\"#2C2F34\" noScrollbars=\"true\">\r\n      <TableLayout padding=\"0 0 0 0\" autoCalculateHeight=\"true\" cellBackgroundColor=\"#23272a\" rowBackgroundColor=\"#23272a\">\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text color=\"#99aab5\" alignment=\"UpperMiddle\" fontSize=\"45\">General Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Shuffle Players at Start</Text></Cell>\r\n          <Cell><Toggle id=\"shuffle\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"shuffle()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Enable Codemaster Queue</Text></Cell>\r\n          <Cell><Toggle id=\"queues\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"queues()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Enable Quick Color Switching</Text></Cell>\r\n          <Cell><Toggle id=\"switcher\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"switcher()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Disable Tilting Before Clue Given</Text></Cell>\r\n          <Cell><Toggle id=\"tilting\" class=\"settingToggle\" isOn=\"false\" onValueChanged=\"tilting()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Multiple Votes Per Player</Text></Cell>\r\n          <Cell><Toggle id=\"multivoting\" class=\"settingToggle\" isOn=\"false\" onValueChanged=\"multivoting()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text class=\"subcategoryText\">AFK Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">AFK Detection</Text></Cell>\r\n          <Cell><Toggle id=\"afk\" class=\"settingToggle\" isOn=\"false\" onValueChanged=\"afk()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">AFK Minutes</Text></Cell>\r\n          <Cell>\r\n            <TableLayout class=\"sliderTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <Slider id=\"afkTime\" class=\"settingSlider\" value=\"7\" onValueChanged=\"afkTime()\" />\r\n                </Cell>\r\n                <Cell>\r\n                  <Text id=\"afkTimeValue\" class=\"sliderNumber\">7</Text>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Cell>\r\n        </Row>\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text class=\"subcategoryText\">Time Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Timer Enabled</Text></Cell>\r\n          <Cell><Toggle id=\"timerUsed\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"timerUsed()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Timer (round 1)</Text></Cell>\r\n          <Cell>\r\n            <TableLayout class=\"sliderTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <Slider id=\"timer1Time\" class=\"settingSlider\" value=\"8\" onValueChanged=\"timer1Time()\" />\r\n                </Cell>\r\n                <Cell>\r\n                  <Text id=\"timer1TimeValue\" class=\"sliderNumber\">8</Text>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Timer (round 2+)</Text></Cell>\r\n          <Cell>\r\n            <TableLayout class=\"sliderTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <Slider id=\"timer2Time\" class=\"settingSlider\" value=\"4\" onValueChanged=\"timer2Time()\" />\r\n                </Cell>\r\n                <Cell>\r\n                  <Text id=\"timer2TimeValue\" class=\"sliderNumber\">4</Text>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Cell>\r\n        </Row>\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text class=\"subcategoryText\">Automod Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Autokick Players on Blacklist</Text></Cell>\r\n          <Cell><Toggle id=\"autokick\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"autokick()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n      </TableLayout>\r\n    </VerticalScrollView>\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n\r\n<!-- CODEMASTER QUEUE -->\r\n<Panel\r\n  id=\"codemasterQueue\"\r\n  class=\"settingsPanel\"\r\n  position=\"-800 -3400 -240\">\r\n\r\n  <VerticalLayout spacing=\"10\" childForceExpandHeight=\"false\">\r\n\r\n    <Text class=\"panelHeader\">Codemaster Queue</Text>\r\n\r\n    <VerticalLayout flexibleHeight=\"1\">\r\n      <TableLayout padding=\"15 15 10 10\" cellSpacing=\"10\" autoCalculateHeight=\"true\">\r\n\r\n        <Row id=\"reorder1\" preferredHeight=\"75\">\r\n          <Button id=\"queueButton1\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(1)\">\r\n            <Text id=\"queueText1\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton2\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(2)\">\r\n            <Text id=\"queueText2\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton3\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(3)\">\r\n            <Text id=\"queueText3\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton4\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(4)\">\r\n            <Text id=\"queueText4\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton5\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(5)\">\r\n            <Text id=\"queueText5\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton6\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(6)\">\r\n            <Text id=\"queueText6\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton7\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(7)\">\r\n            <Text id=\"queueText7\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton8\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(8)\">\r\n            <Text id=\"queueText8\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton9\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(9)\">\r\n            <Text id=\"queueText9\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton10\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(10)\">\r\n            <Text id=\"queueText10\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"475\">\r\n          <!-- spacer -->\r\n        </Row>\r\n\r\n      </TableLayout>\r\n      <HorizontalLayout>\r\n        <Button fontSize=\"60\" onClick=\"join()\">Join</Button>\r\n        <Button fontSize=\"60\" onClick=\"stay()\">Stay</Button>\r\n        <Button fontSize=\"60\" onClick=\"leave()\">Leave</Button>\r\n      </HorizontalLayout>\r\n    </VerticalLayout>\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n\r\n<!-- Timer -->\r\n<Panel\r\n  id=\"timer\"\r\n  class=\"timerPanel\"\r\n  position=\"0 1800 -100\">\r\n\r\n  <VerticalLayout childForceExpandHeight=\"true\">\r\n\r\n    <Text color=\"#ffffff\" alignment=\"UpperMiddle\" fontSize=\"60\">──── Time Remaining ────</Text>\r\n\r\n    <VerticalLayout flexibleHeight=\"1\" childForceExpandWidth=\"true\" childForceExpandHeight=\"true\" childAlignment=\"MiddleCenter\">\r\n      <Text id=\"time\" color=\"White\" width=\"100%\" alignment=\"MiddleCenter\" fontSize=\"300\">0:00</Text>\r\n      <HorizontalLayout childForceExpandWidth=\"false\" childAlignment=\"MiddleCenter\">\r\n        <Text color=\"#ffffff\" fontSize=\"60\" text=\"────── \"></Text>\r\n        <Button id=\"timerControl\" fontSize=\"60\" preferredHeight=\"75\" preferredWidth=\"125\" onClick=\"toggleTimer()\">▶</Button>\r\n        <Text color=\"#ffffff\" fontSize=\"60\" text=\" ──────\"></Text>\r\n      </HorizontalLayout>\r\n    </VerticalLayout>\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n<!-- Red team turn -->\r\n<Text id=\"redTurn\" active=\"false\" position=\"-750 1800 -100\" rotation=\"0 180 0\" color=\"Red\" fontSize=\"1000\">➔</Text>\r\n<Panel id=\"redTurnSquare\" active=\"false\" position=\"-2104 1820 -100\" width=\"1098\" height=\"500\" color=\"rgba(0.856, 0.1, 0.094, 1)\">\r\n\t<Text color=\"White\" fontSize=\"190\" text=\"RED'S TURN\"></Text>\r\n</Panel>\r\n\r\n<!-- Blue team turn -->\r\n<Text id=\"blueTurn\" active=\"false\" position=\"750 1800 -100\" color=\"Blue\" fontSize=\"1000\">➔</Text>\r\n<Panel id=\"blueTurnSquare\" active=\"false\" position=\"2104 1820 -100\" width=\"1098\" height=\"500\" color=\"rgba(0.118, 0.53, 1, 1)\">\r\n\t<Text color=\"White\" fontSize=\"190\" text=\"BLUE'S TURN\"></Text>\r\n</Panel>\r\n<!-- Table background -->\r\n<!-- Blue team box -->\r\n<Panel position=\"1565 479 -100\" width=\"20\" height=\"1696\" color=\"rgba(0.122 0.529 1 1)\"/>\r\n<Panel position=\"2643 479 -100\" width=\"20\" height=\"1696\" color=\"rgba(0.122 0.529 1 1)\"/>\r\n<Panel position=\"2104 1317 -100\" width=\"1098\" height=\"20\" color=\"rgba(0.122 0.529 1 1)\"/>\r\n<Panel position=\"2104 -359 -100\" width=\"1098\" height=\"20\" color=\"rgba(0.122 0.529 1 1)\"/>\r\n\r\n<!-- Red team box -->\r\n<Panel position=\"-1565 479 -100\" width=\"20\" height=\"1696\" color=\"rgba(0.855 0.098 0.094 1)\"/>\r\n<Panel position=\"-2643 479 -100\" width=\"20\" height=\"1696\" color=\"rgba(0.855 0.098 0.094 1)\"/>\r\n<Panel position=\"-2104 1317 -100\" width=\"1098\" height=\"20\" color=\"rgba(0.855 0.098 0.094 1)\"/>\r\n<Panel position=\"-2104 -359 -100\" width=\"1098\" height=\"20\" color=\"rgba(0.855 0.098 0.094 1)\"/>\r\n\r\n<!-- Card boxes -->\r\n<!-- Topleft white corner -->\r\n<Panel position=\"-1440 1268 -100\" width=\"10\" height=\"393\" color=\"White\"/>\r\n<Panel position=\"-1154 1460 -100\" width=\"582\" height=\"10\" color=\"White\"/>\r\n<!-- Topright white corner -->\r\n<Panel position=\"1440 1268 -100\" width=\"10\" height=\"393\" color=\"White\"/>\r\n<Panel position=\"1154 1460 -100\" width=\"582\" height=\"10\" color=\"White\"/>\r\n<!-- Bottomleft white corner -->\r\n<Panel position=\"-1440 -291 -100\" width=\"11\" height=\"393\" color=\"White\"/>\r\n<Panel position=\"-1154 -482 -100\" width=\"582\" height=\"11\" color=\"White\"/>\r\n<!-- Bottomright white corner -->\r\n<Panel position=\"1440 -291 -100\" width=\"11\" height=\"393\" color=\"White\"/>\r\n<Panel position=\"1154 -482 -100\" width=\"582\" height=\"11\" color=\"White\"/>\r\n\r\n<!-- Top red cards -->\r\n<Panel position=\"-3236 -1300 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<Panel position=\"-2073 -1187 -100\" width=\"2335\" height=\"11\" color=\"White\"/>\r\n<Panel position=\"-910 -1300 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<!-- Bottom red cards -->\r\n<Panel position=\"-3236 -1883 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<Panel position=\"-2073 -1996 -100\" width=\"2335\" height=\"11\" color=\"White\"/>\r\n<Panel position=\"-910 -1883 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<!-- Top white cards -->\r\n<Panel position=\"-871 -1300 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<Panel position=\"1 -1187 -100\" width=\"1752\" height=\"11\" color=\"White\"/>\r\n<Panel position=\"872 -1300 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<!-- Bottom white cards -->\r\n<Panel position=\"-871 -2072 -100\" width=\"11\" height=\"613\" color=\"White\"/>\r\n<Panel position=\"1 -2374 -100\" width=\"1752\" height=\"11\" color=\"White\"/>\r\n<Panel position=\"872 -2072 -100\" width=\"11\" height=\"613\" color=\"White\"/>\r\n<!-- Top blue cards -->\r\n<Panel position=\"911 -1300 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<Panel position=\"2074 -1187 -100\" width=\"2335\" height=\"11\" color=\"White\"/>\r\n<Panel position=\"3237 -1300 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<!-- Bottom blue cards -->\r\n<Panel position=\"911 -1883 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n<Panel position=\"2074 -1996 -100\" width=\"2335\" height=\"11\" color=\"White\"/>\r\n<Panel position=\"3237 -1883 -100\" width=\"11\" height=\"235\" color=\"White\"/>\r\n\r\n<!-- Blue team turn -->\r\n<Panel id=\"blueTurnBG\" active=\"false\" position=\"2104 479 -100\" width=\"1060\" height=\"1656\" color=\"rgba(0.118, 0.53, 1, 0.05)\"></Panel>\r\n\r\n<!-- Red team turn -->\r\n<Panel id=\"redTurnBG\" active=\"false\" position=\"-2104 479 -100\" width=\"1060\" height=\"1656\" color=\"rgba(0.856, 0.1, 0.094, 0.05)\"></Panel>\r\n\r\n<!-- Credits / Versioning -->\r\n<Text position=\"-3500 -3050 -100\" fontSize=\"75\" color=\"#3d3a39\">Version 3.2.3-beta (git-BETA)</Text>\r\n<Text position=\"3500 -3050 -100\" fontSize=\"75\" color=\"#3d3a39\">Made with <textcolor color=\"#4c2936\"><textsize size=\"85\">♥</textsize></textcolor> by Rob Ford</Text>\r\n<Text position=\"0 2800 -100\" fontSize=\"100\" color=\"#ffffff\">TTS-CODENAMES.COM</Text>\r\n<Text position=\"0 2600 -100\" width=\"3000\" fontSize=\"90\" color=\"Yellow\">Check out the brand new website above to browse through and create/edit your own custom TTS-Codenames decks!</Text>"
    },
    {
      "GUID": "faccf6",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 25.0,
        "posY": 3.0,
        "posZ": -35.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "de8511",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -25.0,
        "posY": 1.0,
        "posZ": 35.0,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.442999959,
        "g": 0.230999947,
        "b": 0.0899999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Brown",
      "LuaScript": "function onLoad(_)\r\n\tonPlayerChangeColor(\"Brown\")\r\nend\r\nfunction onPlayerChangeColor(color)\r\n\tif color == \"Brown\" and Player[\"Brown\"].steam_id != nil then\r\n\t\tself.UI.setAttribute(\"brownname\",\"text\",Player[\"Brown\"].steam_name)\r\n\telseif Player[\"Brown\"].steam_id == nil then\r\n\t\tself.UI.setAttribute(\"brownname\",\"text\",\"\")\r\n\tend\r\nend",
      "LuaScriptState": "",
      "XmlUI": "<Text id=\"brownname\" position=\"0 0 -35\" fontSize =\"220\" rotation=\"0 0 180\" color=\"#A74E13\"></Text>"
    },
    {
      "GUID": "7f25d1",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 53.0,
        "posY": 3.0,
        "posZ": 18.0,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5f261c",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -53.0,
        "posY": 3.0,
        "posZ": -18.0,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.9559999,
        "g": 0.39199996,
        "b": 0.112999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Orange",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "a9e341",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -53.0,
        "posY": 3.34820342,
        "posZ": 18.0,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.438999981,
        "b": 0.807,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Pink",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7cd19f",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 53.0,
        "posY": 3.0,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.627,
        "g": 0.124999978,
        "b": 0.941,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Purple",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "279d7e",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -25.0,
        "posY": 3.0,
        "posZ": -35.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "18fd38",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 53.0,
        "posY": 3.0,
        "posZ": -18.0,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.128999949,
        "g": 0.694,
        "b": 0.606999934,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Teal",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3f34d2",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 25.0,
        "posY": 3.0,
        "posZ": 35.0,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "033571",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -53.0,
        "posY": 3.0,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.171999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Yellow",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "bab013",
      "Name": "Custom_Model",
      "Transform": {
        "posX": 0.0,
        "posY": -20.1,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 4.0,
        "scaleZ": 4.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "http://cloud-3.steamusercontent.com/ugc/1851543248352151702/F079142CADF38E2FF6E718A5A9B1A8815F815765/",
        "DiffuseURL": "http://cloud-3.steamusercontent.com/ugc/1836908180962011636/2DDDCD7702A8BC0ED23AEBF87C65443491364BD1/",
        "NormalURL": "",
        "ColliderURL": "http://cloud-3.steamusercontent.com/ugc/1851543248352151702/F079142CADF38E2FF6E718A5A9B1A8815F815765/",
        "Convex": false,
        "MaterialIndex": 3,
        "TypeIndex": 4,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "8430cf",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 0.0,
        "posY": -20.0,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 2.0,
        "scaleY": 2.0,
        "scaleZ": 2.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/779618900062930211/F36139927D241A9A4196B5FA118CC0EDC5BAA24D/",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 4,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}