{
  "SaveName": "Codenames (Darker)",
  "EpochTime": 1618339053,
  "Date": "4/13/2021 2:37:33 PM",
  "VersionNumber": "v13.1.1",
  "GameMode": "Codenames",
  "GameType": "",
  "GameComplexity": "",
  "Tags": [],
  "Gravity": 0.5,
  "PlayArea": 0.5,
  "Table": "Table_None",
  "Sky": "Sky_Museum",
  "Note": "",
  "TabStates": {
    "0": {
      "title": "Rules",
      "body": "",
      "color": "Grey",
      "visibleColor": {
        "r": 0.5,
        "g": 0.5,
        "b": 0.5
      },
      "id": 0
    },
    "1": {
      "title": "White",
      "body": "",
      "color": "White",
      "visibleColor": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "id": 1
    },
    "2": {
      "title": "Brown",
      "body": "",
      "color": "Brown",
      "visibleColor": {
        "r": 0.443,
        "g": 0.231,
        "b": 0.09
      },
      "id": 2
    },
    "3": {
      "title": "Red",
      "body": "",
      "color": "Red",
      "visibleColor": {
        "r": 0.856,
        "g": 0.1,
        "b": 0.094
      },
      "id": 3
    },
    "4": {
      "title": "Orange",
      "body": "",
      "color": "Orange",
      "visibleColor": {
        "r": 0.956,
        "g": 0.392,
        "b": 0.113
      },
      "id": 4
    },
    "5": {
      "title": "Yellow",
      "body": "",
      "color": "Yellow",
      "visibleColor": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.172
      },
      "id": 5
    },
    "6": {
      "title": "Green",
      "body": "",
      "color": "Green",
      "visibleColor": {
        "r": 0.192,
        "g": 0.701,
        "b": 0.168
      },
      "id": 6
    },
    "7": {
      "title": "Blue",
      "body": "",
      "color": "Blue",
      "visibleColor": {
        "r": 0.118,
        "g": 0.53,
        "b": 1.0
      },
      "id": 7
    },
    "8": {
      "title": "Teal",
      "body": "",
      "color": "Teal",
      "visibleColor": {
        "r": 0.129,
        "g": 0.694,
        "b": 0.607
      },
      "id": 8
    },
    "9": {
      "title": "Purple",
      "body": "",
      "color": "Purple",
      "visibleColor": {
        "r": 0.627,
        "g": 0.125,
        "b": 0.941
      },
      "id": 9
    },
    "10": {
      "title": "Pink",
      "body": "",
      "color": "Pink",
      "visibleColor": {
        "r": 0.96,
        "g": 0.439,
        "b": 0.807
      },
      "id": 10
    },
    "11": {
      "title": "Black",
      "body": "",
      "color": "Black",
      "visibleColor": {
        "r": 0.25,
        "g": 0.25,
        "b": 0.25
      },
      "id": 11
    }
  },
  "Grid": {
    "Type": 0,
    "Lines": false,
    "Color": {
      "r": 0.0,
      "g": 0.0,
      "b": 0.0
    },
    "Opacity": 0.75,
    "ThickLines": false,
    "Snapping": false,
    "Offset": false,
    "BothSnapping": false,
    "xSize": 1.0,
    "ySize": 1.5,
    "PosOffset": {
      "x": 0.43,
      "y": 1.0,
      "z": -0.4
    }
  },
  "Lighting": {
    "LightIntensity": 0.54,
    "LightColor": {
      "r": 1.0,
      "g": 0.9804,
      "b": 0.8902
    },
    "AmbientIntensity": 1.3,
    "AmbientType": 1,
    "AmbientSkyColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientEquatorColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "AmbientGroundColor": {
      "r": 0.5,
      "g": 0.5,
      "b": 0.5
    },
    "ReflectionIntensity": 1.0,
    "LutIndex": 0,
    "LutContribution": 1.0,
    "LutURL": ""
  },
  "Hands": {
    "Enable": false,
    "DisableUnused": false,
    "Hiding": 0
  },
  "ComponentTags": {
    "labels": []
  },
  "Turns": {
    "Enable": false,
    "Type": 0,
    "TurnOrder": [],
    "Reverse": false,
    "SkipEmpty": false,
    "DisableInteractions": false,
    "PassTurns": true,
    "TurnColor": ""
  },
  "DecalPallet": [],
  "LuaScript": "--[[\n  TTS-Codenames: A LUA script for Codenames on Tabletop Simulator for Steam.\n  Copyright (C) 2021  Ryan6578 (https://ryan6578.com)\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program. If not, see <http://www.gnu.org/licenses/>.\n]]\n\nchatDisclaimer =\n[[\n\n                  [da1918]ANALYTICS DISCLAIMER[-]\n[-]This mod collects certain data to improve the\nexperience and provide meaningful insight\ninto usage and play. By continuing, you\nacknowledge and accept this in accordance\nwith the privacy policy outlined below.\n\nMore info:\n[8bb5ff]https://tts-codenames.com/privacy[-]\n\n]]\n\nredColor  = {0.856, 0.1, 0.094}\nblueColor = {0.118, 0.53, 1}\n\n-- Color = Blue/Red/Black/White\ncards = {\n  -- Row 1 (cards 1-5)\n  {position = {x = -11.4, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = 12.6}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 2 (cards 6-10)\n  {position = {x = -11.4, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = 8.75}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 3 (cards 11-15)\n  {position = {x = -11.4, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z =  4.9}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 4 (cards 16-20)\n  {position = {x = -11.4, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = 1.05}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n\n  -- Row 5 (cards 21-25)\n  {position = {x = -11.4, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  -5.7, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =     0, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =   5.7, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false},\n  {position = {x =  11.4, z = -2.8}, guid = nil, id = nil, value = nil, color = nil, covered = false}\n}\n\nagents = {\n  -- Assassain\n  ['b97df2'] = {position = {x = 0.04, y = 2, z = -17.84 }, color = \"Black\", covering = nil, enabled = true},\n\n  -- Blue agents\n  ['1e9282'] = {position = {x = 0.04, y = 2, z = -14 }, color = \"Blue\", covering = nil, enabled = false},\n  ['7fdaee'] = {position = {x = 12.34, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['99832c'] = {position = {x = 18.07, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['d9324a'] = {position = {x = 23.77, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['19b2d5'] = {position = {x = 29.47, y = 2, z = -13.97 }, color = \"Blue\", covering = nil, enabled = true},\n  ['0f0ec0'] = {position = {x = 12.34, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n  ['d9054c'] = {position = {x = 18.07, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n  ['4de840'] = {position = {x = 23.77, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n  ['05c73d'] = {position = {x = 29.47, y = 2, z = -17.8  }, color = \"Blue\", covering = nil, enabled = true},\n\n  -- Red agents\n  ['3ef1ca'] = {position = {x = 0.04, y = 2, z = -14 }, color = \"Red\", covering = nil, enabled = false},\n  ['746660'] = {position = {x = -12.22, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['9cbe84'] = {position = {x = -17.92, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['6bb4d8'] = {position = {x = -23.62, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['b48ed4'] = {position = {x = -29.32, y = 2, z = -13.97 }, color = \"Red\", covering = nil, enabled = true},\n  ['5c1be6'] = {position = {x = -12.22, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n  ['b89ba7'] = {position = {x = -17.92, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n  ['e1754e'] = {position = {x = -23.62, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n  ['4a2969'] = {position = {x = -29.32, y = 2, z = -17.8  }, color = \"Red\", covering = nil, enabled = true},\n\n  -- Civialians\n  ['1f53f2'] = {position = {x = -5.7, y = 2, z = -14 }, color = \"White\", covering = nil, enabled = true},\n  ['3d7b86'] = {position = {x = 5.74, y = 2, z = -14 }, color = \"White\", covering = nil, enabled = true},\n  ['e44594'] = {position = {x = -5.7, y = 2, z = -17.84 }, color = \"White\", covering = nil, enabled = true},\n  ['1ebedd'] = {position = {x = 5.74, y = 2, z = -17.84 }, color = \"White\", covering = nil, enabled = true},\n  ['f6786b'] = {position = {x = -5.7, y = 2, z = -21.7 }, color = \"White\", covering = nil, enabled = true},\n  ['f8f6a1'] = {position = {x = 0.04, y = 2, z = -21.7 }, color = \"White\", covering = nil, enabled = true},\n  ['a05e4e'] = {position = {x = 5.74, y = 2, z = -21.7 }, color = \"White\", covering = nil, enabled = true}\n}\n\nvotes = {\n  [0] = {\n    [\"Orange\"]  = 0,\n    [\"Yellow\"]  = 0,\n    [\"Pink\"]    = 0,\n    [\"Brown\"]   = 0\n  },\n  [1] = {\n    [\"Teal\"]    = 0,\n    [\"Purple\"]  = 0,\n    [\"Green\"]   = 0,\n    [\"White\"]   = 0\n  }\n}\n\n----------[ Game state ]----------\ngameState =\n{\n  -- Tracks whether the current game has started (-1 = not started, 0 = starting, 1 = started)\n  status = -1,\n\n  -- Current game is on the first turn or not\n  firstTurn = true,\n\n  -- Tracks whose turn it currently is\n  turnTracker = 1,\n\n  -- Tracks how many guesses the team has left\n  guessesLeft = -1,\n\n  -- Tracks if the current team is able to vote\n  canVote = false,\n\n  -- Red clue tracker\n  redClues = {},\n\n  -- Blue clue tracker\n  blueClues = {}\n}\n\n----------[ Game settings ]----------\nsettings =\n{\n  -- Shuffle players at start\n  playerShuffle = true,\n\n  -- Enable codemaster queue\n  codemasterQueue = true,\n\n  -- Quick color switcher buttons\n  colorSwitcher = true,\n\n  -- Disable/Enable \"inf meta\"\n  cardTilting = false,\n\n  -- Show shooting star background\n  starBackground = true,\n\n  -- Show table lighting\n  tableLighting = true,\n\n  -- AFK detection\n  afkDetection =\n  {\n    enabled   = false,\n    threshold = 10\n  },\n\n  -- Timer enabled\n  timer =\n  {\n    enabled     = true,\n    initial     = 8,\n    subsequent  = 4\n  },\n\n  -- Automod functions\n  automod =\n  {\n    autokick = true\n  }\n}\n\n----------[ Decks ]----------\ndeck =\n{\n  -- The currently selected deck(s)\n  selected = {},\n\n  -- Whether or not multiple deck mode is enabled\n  multiple = false,\n\n  -- The current words for the selected deck\n  words = nil\n}\n\n----------[ Game analytics ]----------\nanalytics =\n{\n  url       = \"https://api.tts-codenames.com\",\n  gameID    = nil,\n  host      = nil,\n  clueID    = nil,\n  sessions  = {}\n}\n\nfunction onload(saveState)\n\n  -- Codenames script version\n  version = \"3.0.0\"\n\n  ----------[ Script object initialization ]----------\n  -- Control panels and table objects\n  customTable     = getObjectFromGUID(\"bab013\")\n  tableObject     = getObjectFromGUID(\"0a61c6\")\n\n  -- Game objects\n  cardTemplates   = getObjectFromGUID(\"2fb333\")\n  extraBlue       = getObjectFromGUID(\"1e9282\")\n  extraRed        = getObjectFromGUID(\"3ef1ca\")\n  redToken        = getObjectFromGUID(\"f3cdf2\")\n  blueToken       = getObjectFromGUID(\"3f75b3\")\n  buttonRed       = getObjectFromGUID(\"f16a9a\")\n  buttonBlue      = getObjectFromGUID(\"c91f34\")\n\n  ----------[ Interactable objects ]----------\n  -- Control panels and table objects\n  customTable.interactable    = false\n  tableObject.interactable    = false\n\n  -- Game objects\n  cardTemplates.interactable  = false\n  extraBlue.interactable      = false\n  extraRed.interactable       = false\n  redToken.interactable       = false\n  blueToken.interactable      = false\n\n  -- Get the list of decks\n  api_getDecks()\n\n  buttonBlue.createButton({\n  label=\"[END TURN]\", click_function=\"endTurn\", function_owner=self,\n    position={0,-0.15,0}, rotation={0,90,0}, height=1000, width=2000, font_size=10\n  })\n\n\tbuttonRed.createButton({\n  label=\"[END TURN]\", click_function=\"endTurn\", function_owner=self,\n    position={0,-0.15,0}, rotation={0,90,0}, height=1000, width=2000, font_size=10\n  })\n\n  -- Make agents non-selectable\n  for agentGUID, agentData in pairs(agents) do\n    local agentObject = getObjectFromGUID(agentGUID)\n    if agentObject then\n      agentObject.drag_selectable = false\n    end\n  end\n\n  -- Change seated players views\n  seatedPlayers = Player.getPlayers()\n  for _, player in ipairs(seatedPlayers) do\n    player.print(chatDisclaimer, {1, 1, 1})\n    Wait.frames(function()\n      player.lookAt({\n        position = {0, 0, 0},\n        pitch    = 60,\n        yaw      = 0,\n        distance = 45\n      })\n    end, 1)\n  end\n\n  -- TEMP: Reload the UI to fix TTS UI bugs\n  Wait.frames(function()\n    tableObject.UI.setXml(tableObject.UI.getXml())\n    reloadCardUI()\n  end, 180)\n\n  -- Load save state - if one exists\n  if saveState != \"\" then\n    local decodedSaveState = JSON.decode(saveState)\n\n    -- TODO:\n      -- votes\n      -- currently selected decks\n      -- table ui elements\n\n    if decodedSaveState.version == version and decodedSaveState.gameState.status == 1 then\n      -- Load the previous gameState\n      gameState = decodedSaveState.gameState\n\n      -- Load the previous settings and update the view\n      settings = decodedSaveState.settings\n      tableObject.call(\"updateSettings\")\n\n      -- Load the analytics data\n      analytics = decodedSaveState.analytics\n\n      -- Load the card data and update their UI\n      cards = decodedSaveState.cards\n      dealCards()\n\n      -- Update the enabled property for agents\n      agents = decodedSaveState.agents\n      for agentGUID, agentData in pairs(decodedSaveState.agents) do\n        if agents[agentGUID] ~= nil and agents[agentGUID].covering ~= nil then\n          coverCard(agents[agentGUID].covering, agentGUID)\n        end\n      end\n    end\n  end\n\n  for _, player in ipairs(Player.getPlayers()) do\n    if player.host then\n      analytics.host = player.steam_id\n      break\n    end\n  end\n\n  -- Start the AFK loop checker\n  if settings.afkDetection.enabled then\n    Timer.create({\n      identifier     = \"afkLoop\",\n      function_name  = \"afkCheckLoop\",\n      function_owner = self,\n      delay          = 1,\n      repetitions    = 0\n    })\n  end\nend\n\nfunction onSave()\n  local saveData = {}\n\n  saveData.version    = version\n  saveData.gameState  = gameState\n  saveData.settings   = settings\n  saveData.analytics  = analytics\n  saveData.cards      = cards\n  saveData.agents     = agents\n\n  return JSON.encode(saveData)\nend\n\n------------------------------------------------------------------------\n--------------------[ SETTERS/GETTERS FOR SETTINGS ]--------------------\n------------------------------------------------------------------------\n\nfunction setShuffle(enabled) settings.playerShuffle = enabled end\nfunction getShuffle() return settings.playerShuffle end\n\nfunction setQueue(enabled) settings.codemasterQueue = enabled end\nfunction getQueue() return settings.codemasterQueue end\n\nfunction setSwitcher(enabled) settings.colorSwitcher = enabled end\nfunction getSwitcher() return settings.colorSwitcher end\n\nfunction setTilting(enabled)\n  settings.cardTilting = enabled\nend\nfunction getTilting() return settings.cardTilting end\n\nfunction setAfk(enabled)\n  settings.afkDetection.enabled = enabled\n  Timer.destroy(\"afkLoop\")\n  if settings.afkDetection.enabled then\n    Timer.create({\n      identifier     = \"afkLoop\",\n      function_name  = \"afkCheckLoop\",\n      function_owner = self,\n      delay          = 1,\n      repetitions    = 0\n    })\n  end\nend\n\nfunction setTimer(enabled)\n  settings.timer.enabled = enabled\n  if settings.timer.enabled then\n    startTime()\n  else\n    -- Disable the timer\n  end\nend\nfunction getTimer() return settings.timer.enabled end\n\nfunction setTimer1Time(value) settings.timer.initial = value end\nfunction getTimer1Time() return settings.timer.initial end\n\nfunction setTimer2Time(value) settings.timer.subsequent = value end\nfunction getTimer2Time() return settings.timer.subsequent end\n\nfunction setAutokick(enabled) settings.automod.autokick = enabled end\nfunction getAutokick() return settings.automod.autokick end\n\nfunction toggleDeckMode() deck.multiple = not deck.multiple end\nfunction getMultipleDeckMode() return deck.multiple end\n\nfunction afkCheckLoop()\n  -- Temporarily removed\n  --[[if settings.afkDetection.enabled then\n    local colorsToCheck = {\n      \"Teal\",\n      \"Orange\",\n      \"Purple\",\n      \"Yellow\",\n      \"Green\",\n      \"Pink\",\n      \"White\",\n      \"Brown\"\n    }\n    for _, color in ipairs(colorsToCheck) do\n      local player = Player[color]\n      if player.seated then\n        -- Only if there's a player in this seat\n        local playerInfo = afkTracker[color]\n        local pos = player.getPointerPosition()\n        if playerInfo == nil then\n          -- No player information exists for this color yet\n          afkTracker[color] = {\n            timestamp       = os.time(),\n            cursorPosition  = pos\n          }\n        elseif round(playerInfo.cursorPosition.x, 2) != round(pos.x, 2) or round(playerInfo.cursorPosition.y, 2) != round(pos.y, 2) or round(playerInfo.cursorPosition.z, 2) != round(pos.z, 2) then\n          -- Cursor position isn't the same. log the new position\n          playerInfo.timestamp = os.time()\n          playerInfo.cursorPosition = pos\n          afkTracker[color] = playerInfo\n        else\n          local timeToAFK = round((settings.afkDetection.threshold * 60) - (os.time() - playerInfo.timestamp), 0)\n          if timeToAFK <= 0 then\n            -- Switch player to spectator\n            player.broadcast(\"You have been moved to spectator to AFKing for more than \" .. tostring(settings.afkDetection.threshold) .. \" minute(s).\", redColor)\n            printToAll(\"Player \" .. player.steam_name .. \" has been moved to spectator for being AFK for more than \" .. tostring(settings.afkDetection.threshold) .. \" minute(s).\",  stringColorToRGB(color))\n            player.changeColor(\"Grey\")\n          elseif timeToAFK <= 5 then\n            player.broadcast(\"You will be removed due to AFK in: \" .. timeToAFK, redColor)\n          end\n        end\n      end\n    end\n  end]]\nend\n\nfunction reloadCardUI()\n  for cardIndex, cardData in ipairs(cards) do\n    local cardObject = getObjectFromGUID(cardData.guid)\n    if cardObject ~= nil then\n      cardObject.UI.setXml(cardObject.UI.getXml())\n    end\n  end\nend\n\nfunction clueEntered(player, value)\n  if value:match(\"\\n\") then\n    local color = player.color\n\n    -- Reset the text box\n    local resetInput = {\n      text          = \"\",\n      placeholder   = \"Enter clue here\"\n    }\n    UI.setAttributes(color:lower() .. \"ClueText\", resetInput)\n\n    -- if the game hasn't been started, a clue cannot be entered\n    if gameState.status ~= 1 then\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You must start a game to enter a clue! [a020f0]«\")\n      return\n    end\n\n    -- Make sure that it's the current codemaster's turn\n    if (color == \"Blue\" and gameState.turnTracker == 0) or (color == \"Red\" and gameState.turnTracker == 1) then\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]It's not your turn to enter a clue! [a020f0]«\")\n      return\n    end\n\n    -- Remove the newline, trim the clue, and convert to lowercase\n    value = value:gsub(\"\\n\", \"\"):match(\"%s*(.-)%s*$\"):lower()\n\n    -- Parse the entered clue into its respective parts\n    local clue, number, error = getClueDetails(value)\n\n    -- Handle clue parsing errors\n    if error then\n      -- Clue wasn't able to be parsed - general error\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Invalid clue. Please enter a valid clue and push ENTER! [a020f0]«\")\n      return\n    elseif number != \"inf\" and tonumber(number) > 9 then\n      -- Clue was larger than 9 words (not 0 or inf)\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Clues cannot be for more than 9 words. [a020f0]«\")\n      return\n    elseif string.len(clue) > 20 then\n      -- Clue was larger than 20 characters\n      Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Clues cannot be longer than 20 characters. [a020f0]«\")\n      return\n    end\n\n    -- Don't allow a clue that isn't covered\n    for cardIndex, cardData in ipairs(cards) do\n      if not cardData.covered and cardData.value:lower() == clue:lower() then\n        Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Invalid clue. That word has not been covered yet, so it may not be used! [a020f0]«\")\n        return\n      end\n    end\n\n    -- Track remaining clues\n    if number == \"inf\" then\n      gameState.guessesLeft = -1\n    elseif number == \"0\" then\n      gameState.guessesLeft = -1\n    else\n      gameState.guessesLeft = tostring(number) + 1\n    end\n\n    -- Encode the finished clue\n    encodeClue(color, clue .. \" - \" .. number:gsub(\"inf\", \"∞\"))\n\n    -- Enable voting for the current team\n    gameState.canVote = true\n\n    -- Send analytics data for the a new clue\n    api_newClue(clue, (number == \"inf\" and -1 or number), Player[color].steam_id)\n  end\nend\n\nfunction getClueDetails(processedClue)\n  -- How many hyphens are there?\n  local clue, number\n  local _, hyphenCount = string.gsub(processedClue, \"%-\", \"\")\n  local _, spaceCount = string.gsub(processedClue, \"%s\", \"\")\n\n  if hyphenCount == 0 then\n    -- Single word with space (or no space) as delimiter\n    if spaceCount > 1 then\n      return nil, nil, true\n    end\n\n    local checks = {\n      \"^(%a+)(%s*)(%d+)$\",\n      \"^(%a+)(%s+)(inf)$\"\n    }\n\n    for _, check in ipairs(checks) do\n      local status, clue, _, number = pcall(function() return string.match(processedClue, check) end)\n      if status then\n        -- Parsing successful - check for nil values just in case\n        if clue != nil and number != nil then\n          -- Return the clue and number\n          return clue, number, false\n        end\n      end\n    end\n\n    -- No valid clues detected\n    return nil, nil, true\n\n  elseif hyphenCount == 1 then\n    -- Either a hypenated word with a space (or no space) as delimiter\n    -- or a single word with a hyphen (and possibly spaces) as delimiter\n    if spaceCount > 2 then\n      return nil, nil, true\n    end\n\n    local checks = {\n      \"^(%a+%-%a+)(%s*)(%d+)$\",\n      \"^(%a+%-%a+)(%s+)(inf)$\",\n      \"^(%a+)(%s*%-%s*)(%d+)$\",\n      \"^(%a+)(%s*%-%s*)(inf)$\"\n    }\n\n    for _, check in ipairs(checks) do\n      local status, clue, _, number = pcall(function() return string.match(processedClue, check) end)\n      if status then\n        -- Parsing successful - check for nil values just in case\n        if clue != nil and number != nil then\n          -- Return the clue and number\n          return clue, number, false\n        end\n      end\n    end\n\n    -- No valid clues detected\n    return nil, nil, true\n\n  elseif hyphenCount == 2 then\n\n    if spaceCount > 2 then\n      return nil, nil, true\n    end\n\n    local checks = {\n      \"^(%a+%-%a+)(%s*%-%s*)(%d+)$\",\n      \"^(%a+%-%a+)(%s*%-%s*)(inf)$\"\n    }\n\n    for _, check in ipairs(checks) do\n      local status, clue, _, number = pcall(function() return string.match(processedClue, check) end)\n      if status then\n        -- Parsing successful - check for nil values just in case\n        if clue != nil and number != nil then\n          -- Return the clue and number\n          return clue, number, false\n        end\n      end\n    end\n\n    -- No valid clues detected\n    return nil, nil, true\n\n  else\n    -- Clue has too many hyphens\n    return nil, nil, true\n  end\nend\n\nfunction rotateclues()\n  for cardIndex, cardData in ipairs(cards) do\n    local card = getObjectFromGUID(cardData.guid)\n    if card.interactable then\n      card.setRotation({0, 180, 0})\n    end\n  end\nend\n\nfunction encodeClue(color, clue)\n  local finishedClue\n  local cluePosition\n  local token = color == \"Red\" and redToken or blueToken\n  local broadcastTo = color == \"Red\" and {\"Orange\", \"Yellow\", \"Pink\", \"Brown\"} or {\"Teal\", \"Purple\", \"Green\", \"White\"}\n\n  local clues = color == \"Red\" and gameState.redClues or gameState.blueClues\n  local xPos = color == \"Red\" and -21.05 or 21.05\n  local deletedClues = false\n  local validClues = {}\n\n  -- Check for deleted clues and shift the remaining if need be\n  if #clues > 0 then\n    -- Check for deleted clues\n    for _,clue in ipairs(color == \"Red\" and gameState.redClues or gameState.blueClues) do\n      if getObjectFromGUID(clue) ~= nil then\n        table.insert(validClues, clue)\n      else\n        deletedClues = true\n      end\n    end\n  end\n\n  if deletedClues then\n    if color == \"Red\" then\n      gameState.redClues = validClues\n    else\n      gameState.blueClues = validClues\n    end\n    for i, clue in ipairs(validClues) do\n      local clueObject = getObjectFromGUID(clue)\n      clueObject.setPosition({xPos, 1.5, (12 - (((i - 1) % 8) * 2.05))})\n      clueObject.setRotation({0, 180, 0})\n    end\n  end\n  local finishedClue = token.clone({\n    position     = token.getPosition(),\n    snap_to_grid = true,\n    callback_function = function(clue) table.insert(color == \"Red\" and gameState.redClues or gameState.blueClues, clue.guid) end\n  })\n  finishedClue.createButton({\n      label=clue, function_owner=finishedClue, click_function=\"clue\",\n      position={0,0.2,0}, height=0, width=0, font_size=500, rotation={0,0,0}, scale={2, 2, 4/3}, font_color={1,1,1}\n  })\n  finishedClue.setPosition({xPos, 1.5, (12 - ((#(color == \"Red\" and gameState.redClues or gameState.blueClues) % 8) * 2.05))})\n  finishedClue.setRotation({0, 180, 0})\n  finishedClue.setLock(false)\n  finishedClue.setLuaScript(\n    \"function onload()\\n\"\n      .. \"self.createButton({\\n\"\n        .. \"label='\" .. clue .. \"', click_function='nullFunction', function_owner=self,\\n\"\n        .. \"position={0,0.2,0}, height=0, width=0, font_size=500, rotation={0,0,0}, scale={2, 2, 4/3}, font_color={1,1,1}\\n\"\n      .. \"})\\n\"\n    .. \"end\\n\"\n  )\n  printToAll(\"[a020f0]» \" .. (color == \"Red\" and \"[da1918]RED\" or \"[1f87ff]BLUE\") .. \" [ffffff]team's clue is: \" .. (color == \"Red\" and \"[da1918]\" or \"[1f87ff]\") .. clue .. \" [a020f0]«\")\n  for _, playerColor in ipairs(broadcastTo) do\n    Player[playerColor].broadcast(\"[a020f0]» [ffffff]Your clue is: \" .. (color == \"Red\" and \"[da1918]\" or \"[1f87ff]\") .. clue .. \" [a020f0]«\")\n  end\nend\n\nfunction onObjectEnterContainer(deck, card)\n  -- First to check that we only do this on the first grouping\n  if #deck.getObjects() == 2 then\n    deck.destruct()\n    Wait.frames(function() dealCards() end, 180)\n  end\nend\n\nfunction onPlayerConnect(player)\n  -- Send analytics disclaimer\n  player.print(chatDisclaimer, {1, 1, 1})\n\n  -- Check the blacklist for the player\n  WebRequest.get(analytics.url .. \"/games/player/blacklisted/\" .. player.steam_id, function(responseRaw)\n    if responseRaw.is_done then\n      local response = JSON.decode(responseRaw.text)\n\n      if response.record and response.record.dateAdded ~= nil then\n        if settings.automod.autokick then\n          player.kick()\n        end\n        printToAll(\"\\n\", {1, 1, 1})\n        printToAll(player.steam_name .. \" was found in the global Codenames blacklist!\", redColor)\n        printToAll(\"SteamID     : \" .. player.steam_id, redColor)\n        printToAll(\"Date Added  : \" .. response.record.dateAdded, redColor)\n        printToAll(\"Reason      : \" .. response.record.reason, redColor)\n        printToAll(\"\\n\", {1, 1, 1})\n      end\n    end\n  end)\n\n  -- TEMP: Reload the UI to fix TTS UI bugs\n  Wait.frames(function()\n    tableObject.UI.setXml(tableObject.UI.getXml())\n    reloadCardUI()\n  end, 180)\nend\n\nfunction onPlayerDisconnect(player)\n  -- Destroy the timer for the disclaimer, if one exists\n  Timer.destroy(player.steam_id)\n\n  -- End session with player if one exists\n  if gameState.status == 1 then\n    if analytics.sessions[player.steam_id] ~= nil then\n      api_playerSessionEnd(analytics.sessions[player.steam_id])\n    end\n  end\nend\n\nfunction onPlayerChangeColor(color)\n  -- Change the player's view\n  if color != \"Grey\" then\n    Player[color].lookAt({\n      position = {0, 0, 0},\n      pitch    = 60,\n      yaw      = 0,\n      distance = 45\n    })\n  end\n\n  -- Reset the player's vote (if necessary)\n  if gameState.status == 1 then\n    for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n      if not Player[playerColor].seated and voteData ~= 0 then\n        local card = voteData\n        voteData = 0\n        updateVoteUI(card)\n      end\n    end\n  end\n\n  local endSession = {}\n\n  -- Resolve team changes, if necessary\n  if color == \"Red\" or color == \"Blue\" then\n    Player[color].team = \"Hearts\"\n  elseif color == \"Grey\" then\n    local spectators = Player.getSpectators()\n    for _,spec in ipairs(spectators) do\n      if analytics.sessions[spec.steam_id] ~= nil then\n        table.insert(endSession, analytics.sessions[spec.steam_id])\n      end\n      if spec.team != \"None\" then\n        spec.team = \"None\"\n      end\n    end\n  else\n    if Player[color].team != \"None\" then\n      Player[color].team = \"None\"\n    end\n  end\n\n  if color ~= \"Grey\" and color ~= \"Black\" then\n    if gameState.status == 1 and analytics.sessions[Player[color].steam_id] == nil then\n      api_playerSessionStart(Player[color].steam_id)\n    end\n  elseif gameState.status == 1 and (color == \"Grey\" or color == \"Black\") and #endSession ~= 0 then\n    for _, sessionID in ipairs(endSession) do\n      api_playerSessionEnd(sessionID)\n    end\n  end\nend\n\nfunction startTime()\n  if settings.timer.enabled then\n    if gameState.firstTurn then\n      tableObject.call(\"startTimer\", settings.timer.initial * 60)\n    else\n      tableObject.call(\"startTimer\", settings.timer.subsequent * 60)\n    end\n  end\nend\n\n-- Deck fetching\nfunction setDeck(deckID)\n  if deckID == nil then\n    deck.selected = {}\n    return\n  end\n\n  if not deck.multiple then\n    deck.selected = { deckID }\n  else\n    local exists = 0\n    for deckIndex, deckGUID in ipairs(deck.selected) do\n      if deckGUID == deckID then\n        exists = deckIndex\n      end\n    end\n\n    if exists == 0 then\n      -- Insert the deck into the selected list\n      table.insert(deck.selected, deckID)\n    else\n      -- Remove the deck from the list\n      table.remove(deck.selected, exists)\n    end\n  end\nend\n\n-- Restrict newGame permissions to Red/Blue/Promoted/Host\nfunction startGame(player)\n  -- Check to see whether a new game is currently being set up\n  if gameState.status == 0 then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]A new game is already starting. Please wait. [a020f0]«\")\n    return\n  end\n\n  -- Check to see if a deck has been chosen\n  if #deck.selected == 0 then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You must select a deck before starting. [a020f0]«\")\n    return\n  end\n\n  -- A new game is currently starting - block any other new game requests\n  gameState.status = 0\n\n  -- Reset the game to its original state\n  resetGame()\n\n  if settings.playerShuffle then\n    startLuaCoroutine(tableObject, \"shufflePlayers\")\n  elseif settings.codemasterQueue then\n    startLuaCoroutine(tableObject, \"swapCodemasters\")\n  else\n    api_gameStart()\n  end\nend\n\nfunction resetGame()\n  -- Reset card data\n  for cardNum, cardData in ipairs(cards) do\n    local cardObject = getObjectFromGUID(cardData.guid)\n    if cardObject then\n      cardObject.interactable = true\n      cardObject.setLock(false)\n    end\n\n    cardData.id       = nil\n    cardData.value    = nil\n    cardData.color    = nil\n    cardData.covered  = false\n  end\n\n  -- Reset the agent cards to their start positions\n  for guid, agentData in pairs(agents) do\n    local agentObject = getObjectFromGUID(guid)\n    if agentObject then\n      local isExtraCard = (agentObject.guid == extraBlue.guid) or (agentObject.guid == extraRed.guid)\n      agentObject.interactable = not isExtraCard\n      agentObject.setLock(isExtraCard)\n      agentObject.setPositionSmooth(isExtraCard and {0, -2, -14} or agentData.position)\n      agentObject.setRotationSmooth({0, 180, 180})\n      agents[agentObject.guid].enabled = not isExtraCard\n      agents[agentObject.guid].covering = nil\n    end\n  end\n\n  -- Delete clue tiles\n  for _, clueList in ipairs({gameState.redClues, gameState.blueClues}) do\n    for _, clue in ipairs(clueList) do\n      local clueTile = getObjectFromGUID(clue)\n      if clueTile then\n        clueTile.destruct()\n      end\n    end\n  end\n\n  -- Reset team votes\n  for turnNum, team in pairs(votes) do\n    for seatColor, vote in pairs(team) do\n      votes[turnNum][seatColor] = 0\n    end\n  end\n\n  -- Reset game state variables\n  gameState.firstTurn   = true\n  gameState.guessesLeft = -1\n  gameState.canVote     = false\n  gameState.redClues    = {}\n  gameState.blueClues   = {}\nend\n\nfunction setupGame()\n  -- Determine which team should go first (0 = RED; 1 = BLUE)\n  gameState.turnTracker = math.random(2) - 1\n\n  -- Shuffle the keymap\n  local bank = {\"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Red\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"Blue\", \"White\", \"White\", \"White\", \"White\", \"White\", \"White\", \"White\", \"Black\"}\n  if gameState.turnTracker == 0 then\n    -- Add another red\n    bank = table.insert(bank, \"Red\")\n  else\n    -- Add another blue\n    bank = table.insert(bank, \"Blue\")\n  end\n\n  local words = deck.words\n\n  for i = 1, 25, 1 do\n    local nextCard = table.remove(words, math.random(1, #words))\n    cards[i].id     = nextCard.id\n    cards[i].value  = nextCard.word:upper()\n    cards[i].color  = table.remove(bank, math.random(1, #bank))\n  end\n\n  -- Choose the correct double agent card for which team goes first\n  local extraCard = gameState.turnTracker == 0 and extraRed or extraBlue\n\n  -- Set the correct double card to red\n  extraCard.setLock(false)\n  extraCard.setPositionSmooth(agents[extraCard.guid].position)\n  extraCard.interactable = true\n  agents[extraCard.guid].enabled = true\n\n  -- Change the turn indicator\n  local previousTurn = (gameState.turnTracker == 0 and \"blue\" or \"red\") .. \"Turn\"\n  local currentTurn = (gameState.turnTracker == 0 and \"red\" or \"blue\") .. \"Turn\"\n  local teamColorTurn = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n  tableObject.UI.setAttribute(previousTurn, \"active\", false)\n  tableObject.UI.setAttribute(currentTurn, \"active\", true)\n  tableObject.UI.setAttribute(previousTurn .. \"BG\", \"active\", false)\n  tableObject.UI.setAttribute(currentTurn .. \"BG\", \"active\", true)\n  tableObject.UI.setAttribute(\"timer\", \"outline\", teamColorTurn)\n  printToAll(\"[a020f0]» \" .. (teamColorTurn == \"Red\" and \"[da1918]RED\" or \"[1f87ff]BLUE\") .. \" [ffffff]team's turn! [a020f0]«\")\n\n  dealCards()\n\n  -- Start the timer\n  gameState.firstTurn = true\nend\n\n-- Deals the cards on the board\nfunction dealCards()\n  for i = 1, 25, 1 do\n    local cardObject = getObjectFromGUID(cards[i].guid)\n    if cards[i].guid == nil or cardObject == nil then\n      -- Get new card if it doesn't exist\n      local c = cardTemplates.takeObject({\n        position            = {cards[i].position.x, 1.03, cards[i].position.z},\n        rotation            = {0, 180, 0},\n        snap_to_grid        = true,\n        callback_function   = function(card) setCardData(card, i) end\n      })\n    else\n      -- Set the UI\n      setCardData(cardObject, i)\n    end\n  end\nend\n\nfunction setCardData(card, i)\n  cards[i].guid = card.guid\n\n  card.call(\"setData\", {\n    position  = cards[i].position,\n    text      = cards[i].value,\n    color     = cards[i].color\n  })\n\n  card.setLock(false)\n  card.drag_selectable = false\n\n  card.setName(cards[i].value)\n\n  -- Once the last card has loaded in, allow a new game to be started\n  if i == 25 and gameState.status == 0 then\n    startTime()\n    gameState.status = 1\n  end\nend\n\nfunction findClosestCard(threshold, position)\n  local closestCard =\n  {\n    index = nil,\n    distance = nil\n  }\n\n  for cardIndex,_ in ipairs(cards) do\n    local dX = position.x - cards[cardIndex].position.x\n    local dZ = position.z - cards[cardIndex].position.z\n\n    local d = math.sqrt((dX^2) + (dZ^2))\n\n    if d < threshold then\n      if closestCard.index == nil or d < closestCard.distance then\n        closestCard.index = cardIndex\n        closestCard.distance = d\n      end\n    end\n  end\n\n  return closestCard.index\nend\n\nfunction onObjectDrop(color, agent)\n  -- Ensure that the dropped object is an agent card\n  if gameState.status ~= 1 or agent.tag ~= \"Tile\" or agents[agent.guid] == nil then\n    return\n  end\n\n  -- Find the closest card position to the dropped agent\n  local cardIndex = findClosestCard(1.65, agent.getPosition())\n  if cardIndex == nil or cards[cardIndex].covered then\n    -- Either no close card found, or card is already covered\n    agent.setPositionSmooth(agents[agent.guid].position)\n    return\n  end\n\n  -- Check to see if the agent and the card are the same color\n  local agentColor = agents[agent.guid].color\n  local cardColor = cards[cardIndex].color\n  if cardColor ~= agentColor then\n    agent.setPositionSmooth(agents[agent.guid].position)\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]An agent has been placed incorrectly. You placed a \" .. agentColor .. \" agent on a \" .. cardColor .. \" card. [a020f0]«\")\n    return\n  end\n\n  -- Card has been marked correctly\n  gameState.guessesLeft = gameState.guessesLeft - 1\n  cards[cardIndex].covered = true\n\n  coverCard(cardIndex, agent.guid)\n\n  -- Send analytics data for the guess\n  local players = \"\"\n  local correct = ((gameState.turnTracker == 0 and cardColor == \"Red\") or (gameState.turnTracker == 1 and cardColor == \"Blue\")) and \"TRUE\" or \"FALSE\"\n  for color,_ in pairs(votes[gameState.turnTracker]) do\n    if Player[color].seated then\n      players = players .. ((players == \"\") and Player[color].steam_id or (',' .. Player[color].steam_id))\n    end\n  end\n  api_clueGuess(players, cards[cardIndex].id, correct, cardColor:upper())\n\n  local messageColor = {\n    [\"Red\"] = \"da1918\",\n    [\"Blue\"] = \"1f87ff\",\n    [\"White\"] = \"ffffff\",\n    [\"Black\"] = \"191919\"\n  }\n\n  if correct == \"TRUE\" then\n    -- Play the correct sound effect\n    tableObject.AssetBundle.playTriggerEffect(0)\n    printToAll(\"[a020f0]» [31b32b][✓] [\" .. messageColor[cardColor] .. \"]\" .. cardColor:upper() .. \" [ffffff]team has correctly guessed: [\" .. messageColor[cardColor]  ..\"]\" .. cards[cardIndex].value:upper() .. \" [a020f0]«\")\n  else\n    -- Play the wrong sound effect\n    tableObject.AssetBundle.playTriggerEffect(1)\n    local guessingTeam = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n    printToAll(\"[a020f0]» [da1918][✗] [\" .. messageColor[guessingTeam] .. \"]\" .. guessingTeam:upper() .. \" [ffffff]team has incorrectly guessed: [\" .. messageColor[cardColor]  ..\"]\" .. cards[cardIndex].value:upper() .. \" [a020f0]«\")\n  end\n\n  -- Check to see if either red or blue won\n  local redWon = true\n  local blueWon = true\n  for i = 1, 25, 1 do\n    if cards[i].color == \"Red\" and not cards[i].covered then\n      redWon = false\n    elseif cards[i].color == \"Blue\" and not cards[i].covered then\n      blueWon = false\n    end\n\n    if not redWon and not blueWon then\n      -- Skip unnecessary iterations\n      break\n    end\n  end\n\n  if agentColor == \"Black\" or blueWon or redWon then\n    -- End game scenario\n\n    -- Analytics data for end of game\n    if (agentColor == \"Black\" and gameState.turnTracker == 0) or blueWon then\n      -- Red placed black card, blue wins\n      -- or blue placed all of their cards\n      broadcastToAll(\"[a020f0]» [1f87ff]BLUE [ffffff]team wins! [a020f0]«\")\n      api_gameEnd(\"BLUE\")\n    elseif (agentColor == \"Black\" and gameState.turnTracker == 1) or redWon then\n      -- Blue placed black card, red wins\n      -- or red placed all of their cards\n      broadcastToAll(\"[a020f0]» [da1918]RED [ffffff]team wins! [a020f0]«\")\n      api_gameEnd(\"RED\")\n    end\n\n    -- Move the remaining agents to their codes\n    endGame()\n  elseif gameState.guessesLeft == 0 or agentColor == \"White\" or (agentColor == \"Red\" and gameState.turnTracker == 1) or (agentColor == \"Blue\" and gameState.turnTracker == 0) then\n    toggleTurns()\n  else\n    -- Show the pass turn button and change color\n    tableObject.UI.setAttributes(\"passTurn\", {\n      color = gameState.turnTracker == 0 and \"#da1918\" or \"#1f87ff\",\n      active = true\n    })\n  end\nend\n\nfunction playerVote(color, card)\n  -- Update the player's vote\n  if color == \"Grey\" then\n    -- Ignore votes from spectators\n    return\n  end\n\n  if color == \"Red\" or color == \"Blue\" or color == \"Black\" then\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You cannot vote! [a020f0]«\")\n    return\n  elseif votes[gameState.turnTracker][color] == nil then\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]It's not your turn to vote! [a020f0]«\")\n    return\n  elseif not gameState.canVote then\n    Player[color].broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You can't vote until you've been given a clue! [a020f0]«\")\n    return\n  end\n\n  if votes[gameState.turnTracker][color] == 0 then\n    votes[gameState.turnTracker][color] = card\n    updateVoteUI(card)\n  else\n    if votes[gameState.turnTracker][color] == card then\n      -- Remove this player's vote\n      votes[gameState.turnTracker][color] = 0\n      updateVoteUI(card)\n    else\n      -- Switch the player's current vote to this card\n      local previous = votes[gameState.turnTracker][color]\n      votes[gameState.turnTracker][color] = card\n      updateVoteUI(previous)\n      updateVoteUI(card)\n    end\n  end\n\n  -- Check to see if a vote has passed\n  local votePassed = false\n  local voteCard = nil\n  for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n    if Player[playerColor].seated and not Player[playerColor].blindfolded then\n      if (voteCard == nil and voteData ~= 0) or voteData == voteCard then\n        votePassed = true\n        voteCard = voteData\n      else\n        votePassed = false\n        break\n      end\n    end\n  end\n\n  if votePassed then\n    -- Remove all vote indicators and reset votes\n    local cardsToClear = {}\n    for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n      -- Update the vote UI first\n      if voteData ~= 0 then\n        table.insert(cardsToClear, voteData)\n        votes[gameState.turnTracker][playerColor] = 0\n      end\n    end\n\n    for _, card in ipairs(cardsToClear) do\n      updateVoteUI(card)\n    end\n\n    -- Vote passed to pass turn\n    if card == 26 then\n      toggleTurns()\n      return\n    end\n\n    -- Card has been marked correctly\n    gameState.guessesLeft = gameState.guessesLeft - 1\n    cards[card].covered = true\n\n    -- Cover the card\n    coverCard(card, nil)\n\n    -- Send analytics data for the guess\n    local players = \"\"\n    local correct = ((gameState.turnTracker == 0 and cards[card].color == \"Red\") or (gameState.turnTracker == 1 and cards[card].color == \"Blue\")) and \"TRUE\" or \"FALSE\"\n    for color,_ in pairs(votes[gameState.turnTracker]) do\n      if Player[color].seated then\n        players = players .. ((players == \"\") and Player[color].steam_id or (',' .. Player[color].steam_id))\n      end\n    end\n    api_clueGuess(players, cards[card].id, correct, cards[card].color:upper())\n\n    local messageColor = {\n      [\"Red\"] = \"da1918\",\n      [\"Blue\"] = \"1f87ff\",\n      [\"White\"] = \"ffffff\",\n      [\"Black\"] = \"191919\"\n    }\n\n    if correct == \"TRUE\" then\n      -- Play the correct sound effect\n      tableObject.AssetBundle.playTriggerEffect(0)\n      printToAll(\"[a020f0]» [31b32b][✓] [\" .. messageColor[cards[card].color] .. \"]\" .. cards[card].color:upper() .. \" [ffffff]team has correctly guessed: [\" .. messageColor[cards[card].color]  ..\"]\" .. cards[card].value:upper() .. \" [a020f0]«\")\n    else\n      -- Play the wrong sound effect\n      tableObject.AssetBundle.playTriggerEffect(1)\n      local guessingTeam = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n      printToAll(\"[a020f0]» [da1918][✗] [\" .. messageColor[guessingTeam] .. \"]\" .. guessingTeam:upper() .. \" [ffffff]team has incorrectly guessed: [\" .. messageColor[cards[card].color]  ..\"]\" .. cards[card].value:upper() .. \" [a020f0]«\")\n    end\n\n    -- Check to see if either red or blue won\n    local redWon = true\n    local blueWon = true\n    for i = 1, 25, 1 do\n      if cards[i].color == \"Red\" and not cards[i].covered then\n        redWon = false\n      elseif cards[i].color == \"Blue\" and not cards[i].covered then\n        blueWon = false\n      end\n\n      if not redWon and not blueWon then\n        -- Skip unnecessary iterations\n        break\n      end\n    end\n\n    if cards[card].color == \"Black\" or blueWon or redWon then\n      -- End game scenario\n\n      if (cards[card].color == \"Black\" and gameState.turnTracker == 0) or blueWon then\n        -- Red placed black card, blue wins\n        -- or blue placed all of their cards\n        broadcastToAll(\"[a020f0]» [1f87ff]BLUE [ffffff]team wins! [a020f0]«\")\n        api_gameEnd(\"BLUE\")\n      elseif (cards[card].color == \"Black\" and gameState.turnTracker == 1) or redWon then\n        -- Blue placed black card, red wins\n        -- or red placed all of their cards\n        broadcastToAll(\"[a020f0]» [da1918]RED [ffffff]team wins! [a020f0]«\")\n        api_gameEnd(\"RED\")\n      end\n\n      -- Move the remaining agents to their codes\n      endGame()\n\n    elseif gameState.guessesLeft == 0 or cards[card].color == \"White\" or (cards[card].color == \"Red\" and gameState.turnTracker == 1) or (cards[card].color == \"Blue\" and gameState.turnTracker == 0) then\n      toggleTurns()\n    else\n      -- Show the pass turn button and change color\n      tableObject.UI.setAttributes(\"passTurn\", {\n        color = gameState.turnTracker == 0 and \"#da1918\" or \"#1f87ff\",\n        active = true\n      })\n    end\n  end\nend\n\nfunction coverCard(cardIndex, agentGUID)\n  local cardObject = getObjectFromGUID(cards[cardIndex].guid)\n  for guid, agentData in pairs(agents) do\n    local agentObject = getObjectFromGUID(guid)\n    if agents[guid].enabled and agentData.color == cards[cardIndex].color and agentObject and agentObject.interactable and (agentGUID == nil or agentGUID == guid) then\n      local position = {cards[cardIndex].position.x, 1.03, cards[cardIndex].position.z}\n\n      -- Track the index of the card this agent is covering\n      agents[guid].covering = cardIndex\n\n      -- Lock both cards and set them in place\n      cardObject.interactable = false\n      agentObject.interactable = false\n\n      cardObject.setLock(true)\n      agentObject.setLock(true)\n\n      -- Ensure the tile is on the code\n      cardObject.setRotationSmooth({0, 180, 0})\n      agentObject.setRotationSmooth({0, 180, 180})\n\n      cardObject.setPositionSmooth(position)\n      agentObject.setPositionSmooth(position)\n      break\n    end\n  end\nend\n\nfunction updateVoteUI(card)\n  local uiObject = card == 26 and tableObject or getObjectFromGUID(cards[card].guid)\n\n  local votesToAdd = {}\n  for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n    if voteData == card then\n      votesToAdd[playerColor] = true\n    end\n  end\n  local votesOnCard =\n  {\n    uiObject.UI.getAttribute(\"vote-1\", \"color\"),\n    uiObject.UI.getAttribute(\"vote-2\", \"color\"),\n    uiObject.UI.getAttribute(\"vote-3\", \"color\"),\n    uiObject.UI.getAttribute(\"vote-4\", \"color\")\n  }\n  local newVotes = {}\n\n  -- Keep the order of the current votes\n  for voteIndex, voteColor in ipairs(votesOnCard) do\n    if voteColor ~= \"Black\" then\n      if votes[gameState.turnTracker][voteColor] == card then\n        table.insert(newVotes, voteColor)\n        votesToAdd[voteColor] = nil\n      end\n    else\n      -- Add the uncounted votes\n      for playerColor,_ in pairs(votesToAdd) do\n        table.insert(newVotes, playerColor)\n      end\n      break\n    end\n  end\n\n  for i = 1,4,1 do\n    if newVotes[i] ~= nil then\n      uiObject.UI.setAttributes(\"vote-\" .. i, {\n        color = newVotes[i],\n        active = true\n      })\n    else\n      uiObject.UI.setAttributes(\"vote-\" .. i, {\n        color = \"Black\",\n        active = false\n      })\n    end\n  end\nend\n\nfunction votePass(color)\n  playerVote(color, 26)\nend\n\nfunction onObjectPickUp(color, object)\n  -- Clues\n  if object.tag == \"Card\" and not object.spawning then\n    for i = 1, 25, 1 do\n      if cards[i].guid == object.guid then\n        object.setVelocity({0, 0, 0})\n        object.drop()\n        object.setPosition({cards[i].position.x, 1.03, cards[i].position.z})\n        if #Player[color].getSelectedObjects() <= 1 then\n          playerVote(color, i)\n        end\n        break\n      end\n    end\n  elseif agents[object.guid] ~= nil then\n    -- Prevent picking up of agent tiles from anyone but red or blue\n    if color ~= \"Red\" and color ~= \"Blue\" then\n      object.setVelocity({0, 0, 0})\n      object.drop()\n      object.setPosition({agents[object.guid].position.x, 1.01, agents[object.guid].position.z})\n    end\n  end\nend\n\nfunction onPlayerAction(player, action, objects)\n\n  local processAction     = false\n  local actionsToProcess  = {\n    Player.Action.PickUp,\n    Player.Action.RotateIncrementalLeft,\n    Player.Action.RotateIncrementalRight,\n    Player.Action.RotateOver,\n    Player.Action.FlipIncrementalLeft,\n    Player.Action.FlipIncrementalRight,\n    Player.Action.FlipOver\n  }\n\n  for _, handledAction in ipairs(actionsToProcess) do\n    if action == handledAction then\n      processAction = true\n      break\n    end\n  end\n\n  if not processAction then\n    return\n  end\n\n  local objectIncludesCard = false\n  local objectIncludesAgent = false\n\n  -- See if there is a card included in the table of objects\n  for _, object in ipairs(objects) do\n    if isCard(object.guid) then\n      objectIncludesCard = true\n    elseif agents[object.guid] ~= nil then\n      objectIncludesAgent = true\n    end\n  end\n\n  if objectIncludesCard and (player.color == \"Blue\" or player.color == \"Red\" or player.color == \"Black\") then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You're not allowed to do that! [a020f0]«\")\n    return false\n  end\n\n  -- Disable interacting with agents if player isn't a codemaster\n  if objectIncludesAgent and player.color ~= \"Blue\" and player.color ~= \"Red\" then\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]You're not allowed to do that! [a020f0]«\")\n    return false\n  end\n\n  local isPlayerTurn = (votes[gameState.turnTracker][player.color] ~= nil)\n  local errorMessage\n\n  if action == Player.Action.PickUp then\n    if objectIncludesCard and not isPlayerTurn then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]It's not your turn to vote! [a020f0]«\"\n    elseif settings.cardTilting and gameState.status == 1 and not gameState.canVote then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't vote until you've been given a clue! [a020f0]«\"\n    end\n  elseif action == Player.Action.RotateIncrementalLeft or action == Player.Action.RotateIncrementalRight or action == Player.Action.RotateOver then\n    if objectIncludesCard and not isPlayerTurn then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't tilt cards when it's not your turn! [a020f0]«\"\n    elseif settings.cardTilting and gameState.status == 1 and not gameState.canVote then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't tilt cards until you've been given a clue! [a020f0]«\"\n    end\n  elseif action == Player.Action.FlipIncrementalLeft or action == Player.Action.FlipIncrementalRight or action == Player.Action.FlipOver then\n    if objectIncludesCard and not isPlayerTurn then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't flip cards when it's not your turn! [a020f0]«\"\n    elseif settings.cardTilting and gameState.status == 1 and not gameState.canVote then\n      errorMessage = \"[a020f0]» [da1918]ERROR: [ffffff]You can't flip cards until you've been given a clue! [a020f0]«\"\n    end\n  end\n\n  if errorMessage ~= nil then\n    player.broadcast(errorMessage, redColor)\n    return false\n  end\nend\n\nfunction isCard(guid)\n  for _, cardData in ipairs(cards) do\n    if guid == cardData.guid then\n      return true\n    end\n  end\n  return false\nend\n\nfunction endGame()\n  -- Disable voting for any teams\n  gameState.canVote = false\n\n  -- Set the game back to initial state\n  gameState.status = -1\n\n  -- Stop the timer\n  tableObject.call(\"stopTimer\", true)\n\n  -- Hide the pass turn button and change color\n  tableObject.UI.setAttributes(\"passTurn\", {\n    color = \"#aaaaaa\",\n    active = false\n  })\n\n  -- Assign remaining agents to uncovered clues\n  for i = 1, 25, 1 do\n    if not cards[i].covered then\n      coverCard(i, nil)\n    end\n  end\nend\n\nfunction timeExpired()\n  -- Play the timer expired sound\n  tableObject.AssetBundle.playTriggerEffect(2)\n\n  toggleTurns()\nend\n\n-- Command implementations\nfunction onChat(message, player)\n  if not player.admin then\n    return\n  end\n\n  local command, color = processChat(message)\n  local ranCommand = false\n\n  if command == nil then\n    return\n  end\n\n  if command == \"!kick\" then\n    if not isColor(color) then\n      player.broadcast(\"Invalid color!\", redColor)\n      return false\n    end\n\n    if not Player[color].seated then\n      player.broadcast(\"There's no player seated in \" .. color:lower() .. \"!\", redColor)\n      return false\n    end\n    printToAll(player.steam_name .. \" has kicked \" .. Player[color].steam_name .. \".\", redColor)\n    Player[color].kick()\n    ranCommand = true\n  elseif command == \"!blind\" then\n    if not isColor(color) then\n      player.broadcast(\"Invalid color!\", redColor)\n      return false\n    end\n\n    if not Player[color].seated then\n      player.broadcast(\"There's no player seated in \" .. color:lower() .. \"!\", redColor)\n      return false\n    end\n    printToAll(player.steam_name .. \" has \" .. (not Player[color].blindfolded and \"blindfolded \" or \"unblindfolded \") .. Player[color].steam_name .. \".\", redColor)\n    Player[color].blindfolded = not Player[color].blindfolded\n    ranCommand = true\n  elseif command == \"!stand\" then\n    if not isColor(color) then\n      player.broadcast(\"Invalid color!\", redColor)\n      return false\n    end\n\n    if not Player[color].seated then\n      player.broadcast(\"There's no player seated in \" .. color:lower() .. \"!\", redColor)\n      return false\n    end\n    printToAll(player.steam_name .. \" has stood \" .. Player[color].steam_name .. \".\", redColor)\n    Player[color].changeColor(\"Grey\")\n    ranCommand = true\n  elseif command == \"!reload\" then\n    tableObject.UI.setXml(tableObject.UI.getXml())\n    reloadCardUI()\n    printToAll(player.steam_name .. \" has reloaded the UI!\", redColor)\n    ranCommand = true\n  elseif command == \"!cinematic\" then\n    player.lookAt({\n      position = {0, 0, 0},\n      pitch    = 90,\n      yaw      = 0,\n      distance = 55\n    })\n    ranCommand = true\n  end\n\n  if ranCommand then\n    return false\n  end\nend\n\nfunction isColor(userColor)\n  for _, color in ipairs(Player.getColors()) do\n    if color ~= \"Grey\" and color:lower() == userColor:lower() then\n      return true\n    end\n  end\n  return false\nend\n\nfunction processChat(message)\n  local raw = string.gmatch(message, \"%S+\")\n  local firstWord = true\n  local command = nil\n  local args = \"\"\n  for word in raw do\n    if firstWord then\n      if word:sub(1, 1) ~= \"!\" then\n        return command, args\n      else\n        command = word\n        firstWord = false\n      end\n    else\n      args = args .. word .. \" \"\n    end\n  end\n\n  return command, args:gsub(\"^%s*(.-)%s*$\", \"%1\")\nend\n\nfunction toggleTurns()\n  -- Diable voting for the current team\n  gameState.canVote = false\n\n  -- Remove all vote indicators and reset votes\n  local cardsToClear = {}\n  for playerColor, voteData in pairs(votes[gameState.turnTracker]) do\n    -- Update the vote UI first\n    if voteData ~= 0 then\n      table.insert(cardsToClear, voteData)\n      votes[gameState.turnTracker][playerColor] = 0\n    end\n  end\n\n  for _, card in ipairs(cardsToClear) do\n    updateVoteUI(card)\n  end\n\n  -- Disable card tilting\n  for _, card in ipairs(cards) do\n    if not card.covered then\n      local cardObject = getObjectFromGUID(card.guid)\n      if settings.cardTilting then\n        cardObject.setLock(true)\n      end\n      cardObject.setRotationSmooth({0, 180, 0})\n    end\n  end\n\n  -- Hide the pass turn button\n  tableObject.UI.setAttributes(\"passTurn\", {\n    color = \"#aaaaaa\",\n    active = false\n  })\n\n  -- Reset the timer warning\n  timerWarning = -1\n\n  -- Make sure it isn't the first turn\n  gameState.firstTurn = false\n\n  -- Reset the guesses each team has left\n  gameState.guessesLeft = -1\n\n  -- Reset the clueID\n  analytics.clueID = nil\n\n  -- Play the button press effect\n  local button = (gameState.turnTracker == 0 and buttonRed or buttonBlue)\n  button.AssetBundle.playTriggerEffect(0)\n\n  -- Change the tracker to the other team's turn\n  gameState.turnTracker = (gameState.turnTracker == 0 and 1 or 0)\n\n  -- Change the location of the turn marker\n  local previousTurn = (gameState.turnTracker == 0 and \"blue\" or \"red\") .. \"Turn\"\n  local currentTurn = (gameState.turnTracker == 0 and \"red\" or \"blue\") .. \"Turn\"\n  local teamColorTurn = gameState.turnTracker == 0 and \"Red\" or \"Blue\"\n  tableObject.UI.setAttribute(previousTurn, \"active\", false)\n  tableObject.UI.setAttribute(currentTurn, \"active\", true)\n  tableObject.UI.setAttribute(previousTurn .. \"BG\", \"active\", false)\n  tableObject.UI.setAttribute(currentTurn .. \"BG\", \"active\", true)\n  tableObject.UI.setAttribute(\"timer\", \"outline\", teamColorTurn)\n  printToAll(\"[a020f0]» \" .. (teamColorTurn == \"Red\" and \"[da1918]RED\" or \"[1f87ff]BLUE\") .. \" [ffffff]team's turn! [a020f0]«\")\n\n  startTime()\nend\n\nfunction endTurn(button, color)\n  if color == \"Red\" or color == \"Blue\" then\n    -- Is it the current side's turn?\n    if gameState.turnTracker == 0 and button.guid == buttonBlue.guid or gameState.turnTracker == 1 and button.guid == buttonRed.guid then\n      return\n    end\n\n    toggleTurns()\n\n  end\nend\n\nfunction updateDecks(decks)\n  --gameStatus.deckList = decks\n  for deckNum, deckInfo in ipairs(decks) do\n    tableObject.UI.setAttribute(\"deck\" .. deckNum .. \"Button\", \"onClick\", \"setDeck(\" .. deckInfo.id .. \")\")\n    tableObject.UI.setAttribute(\"deck\" .. deckNum .. \"Official\", \"active\", deckInfo.author == nil and true or false)\n    tableObject.UI.setAttributes(\"deck\" .. deckNum .. \"Name\", {\n      text      = deckInfo.name,\n      alignment = (deckInfo.description == nil and \"MiddleLeft\" or \"LowerLeft\")\n    })\n    tableObject.UI.setAttributes(\"deck\" .. deckNum .. \"Description\", {\n      text    = deckInfo.description,\n      active  = (deckInfo.description == nil and \"false\" or \"true\")\n    })\n    tableObject.UI.setAttribute(\"deck\" .. deckNum, \"active\", true)\n  end\nend\n\n-------------------------------------------------------------------------------\n--------------------------------[[ ANALYTICS ]]--------------------------------\n-------------------------------------------------------------------------------\n\nfunction apiGet(api, callback)\n  WebRequest.get(analytics.url .. api, callback)\nend\n\nfunction apiPost(api, payload, callback)\n  WebRequest.post(analytics.url .. api, payload, callback)\nend\n\nfunction getJSON(responseRaw)\n  if not responseRaw.is_done then\n    -- Don't process until the response is ready\n    return nil\n  end\n\n  local response = JSON.decode(responseRaw.text)\n\n  if response.status == \"error\" then\n    print(\"API Error: \" .. response.message)\n    return nil\n  end\n\n  return response\nend\n\n-------------- /games/decks --------------\nfunction api_getDecks()\n  apiGet(\"/games/decks\", api_getDecksCB)\nend\n\nfunction api_getDecksCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Update the deck selector\n  updateDecks(response.deckList)\nend\n\n-------------- /games/player/blacklisted/:steamID --------------\nfunction api_getBlacklistInfo(steamID)\n  apiGet(\"/games/player/blacklisted/\" .. steamID, api_getBlacklistInfoCB)\nend\n\nfunction api_getBlacklistInfoCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  if response.dateAdded ~= nil then\n    if settings.automod.autokick then\n      --player.kick()\n    end\n    --[[\n    printToAll(\"\\n\", {1, 1, 1})\n    printToAll(player.steam_name .. \" was found in the global Codenames blacklist!\", redColor)\n    printToAll(\"SteamID     : \" .. player.steam_id, redColor)\n    printToAll(\"Date Added  : \" .. response.dateAdded, redColor)\n    printToAll(\"Reason      : \" .. response.reason, redColor)\n    printToAll(\"\\n\", {1, 1, 1})]]\n  end\nend\n\n-------------- /games/start --------------\nfunction api_gameStart()\n  local request =\n  {\n    host    = analytics.host,\n    decks   = \"\",\n    first   = gameState.turnTracker == 0 and \"RED\" or \"BLUE\",\n    players = \"\"\n  }\n\n  for deckIndex, deck in ipairs(deck.selected) do\n    if deckIndex == 1 then\n      request.decks = request.decks .. deck\n    else\n      request.decks = request.decks .. \",\" .. deck\n    end\n  end\n\n  for _, player in ipairs(Player.getPlayers()) do\n    local color = player.color\n    if color ~= \"Grey\" and color ~= \"Black\" then\n      request.players = request.players .. ((request.players == \"\") and player.steam_id or (',' .. player.steam_id))\n    end\n  end\n\n  apiPost(\"/games/start\", request, api_gameStartCB)\nend\n\nfunction api_gameStartCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Set the current game ID\n  analytics.gameID = response.gameID\n\n  -- Reset player sessions\n  analytics.sessions = {}\n  for _, session in ipairs(response.sessions) do\n    analytics.sessions[session.steamID] = session.sessionID\n  end\n\n  -- Set the words for the current deck\n  deck.words = response.words\n\n  -- Reset the previous clue ID\n  analytics.clueID = nil\n\n  -- Continue setup of the game\n  setupGame()\nend\n\n-------------- /games/end --------------\nfunction api_gameEnd(winner)\n  local request =\n  {\n    gameID  = analytics.gameID,\n    winner  = winner\n  }\n\n  apiPost(\"/games/end\", request, api_gameEndCB)\nend\n\nfunction api_gameEndCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Set the current game ID\n  analytics.gameID = nil\n\n  -- Reset player sessions\n  analytics.sessions = {}\n\n  -- Reset the clue ID\n  analytics.clueID = nil\nend\n\n-------------- /games/clues/new --------------\nfunction api_newClue(clue, number, codemaster)\n  local request =\n  {\n    gameID      = analytics.gameID,\n    clue        = tostring(clue),\n    number      = tostring(number),\n    codemaster  = tostring(codemaster),\n    team        = tostring(gameState.turnTracker == 0 and \"RED\" or \"BLUE\")\n  }\n\n  apiPost(\"/games/clues/new\", request, api_newClueCB)\nend\n\nfunction api_newClueCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  analytics.clueID = response.clueID\nend\n\n-------------- /games/clues/guess --------------\nfunction api_clueGuess(players, guess, correct, color)\n  local request =\n  {\n    clueID  = analytics.clueID,\n    players = players,\n    guess   = guess,\n    correct = correct,\n    color   = color\n  }\n\n  apiPost(\"/games/clues/guess\", request, api_clueGuessCB)\nend\n\nfunction api_clueGuessCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\nend\n\n-------------- /games/players/sessions/start --------------\nfunction api_playerSessionStart(player)\n  local request =\n  {\n    gameID  = analytics.gameID,\n    player  = player\n  }\n\n  apiPost(\"/games/players/sessions/start\", request, api_playerSessionStartCB)\nend\n\nfunction api_playerSessionStartCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Record the session ID\n  analytics.sessions[response.steamID] = response.sessionID\nend\n\n-------------- /games/players/sessions/end --------------\nfunction api_playerSessionEnd(sessionID)\n  local request =\n  {\n    sessionID = sessionID\n  }\n\n  apiPost(\"/games/players/sessions/end\", request, api_playerSessionEndCB)\nend\n\nfunction api_playerSessionEndCB(responseRaw)\n  local response = getJSON(responseRaw)\n  if response == nil then\n    return\n  end\n\n  -- Remove the session ID\n  for steamID, sessionID in pairs(analytics.sessions) do\n    if sessionID == response.sessionID then\n      analytics.sessions[steamID] = nil\n    end\n  end\nend",
  "LuaScriptState": "",
  "XmlUI": "<!-- Xml UI. See documentation: https://api.tabletopsimulator.com/ui/introUI/ -->\r\n\r\n<!-- ANNOUNCES -->\r\n<Defaults>\r\n  <Text class=\"youAreOn\"\r\n        fontsize=\"60\"\r\n        color=\"#ffffff\"\r\n        alignment=\"LowerCenter\"\r\n        outline=\"#000000\"\r\n        outlinesize=\"2 -2\">\r\n    YOU ARE ON\r\n  </Text>\r\n\r\n  <Panel class=\"announcePanel\"\r\n         active=\"false\"\r\n         rectAlignment=\"MiddleCenter\"\r\n         showAnimation=\"FadeIn\"\r\n         hideAnimation=\"FadeOut\"\r\n         animationDuration=\"1\">\r\n   </Panel>\r\n\r\n   <Text class=\"youAreOn\"\r\n         fontsize=\"60\"\r\n         color=\"#ffffff\"\r\n         alignment=\"LowerCenter\"\r\n         outline=\"#000000\"\r\n         outlinesize=\"2 -2\">\r\n   </Text>\r\n\r\n   <Text class=\"teamRed\"\r\n         fontsize=\"175\"\r\n         color=\"#da1918\"\r\n         alignment=\"UpperCenter\"\r\n         fontstyle=\"Bold\"\r\n         outline=\"#000000\"\r\n         outlinesize=\"3 -3\">\r\n   </Text>\r\n\r\n   <Text class=\"teamBlue\"\r\n         fontsize=\"175\"\r\n         color=\"#1f87ff\"\r\n         alignment=\"UpperCenter\"\r\n         fontstyle=\"Bold\"\r\n         outline=\"#000000\"\r\n         outlinesize=\"3 -3\">\r\n   </Text>\r\n\r\n   <ToggleButton class=\"subMenu\"\r\n         colors=\"#FFFFFF|#FFFFFF|#C8C8C8|rgba(0,0,0,0.5)\">\r\n   </ToggleButton>\r\n\r\n</Defaults>\r\n\r\n<Panel id=\"redAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Red\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Red\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamRed\"\r\n                visibility=\"Red\">\r\n          TEAM RED\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"orangeAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Orange\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Orange\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamRed\"\r\n                visibility=\"Orange\">\r\n          TEAM RED\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"yellowAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Yellow\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Yellow\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamRed\"\r\n                visibility=\"Yellow\">\r\n          TEAM RED\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"pinkAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Pink\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Pink\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamRed\"\r\n                visibility=\"Pink\">\r\n          TEAM RED\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"brownAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Brown\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Brown\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamRed\"\r\n                visibility=\"Brown\">\r\n          TEAM RED\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"blueAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Blue\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Blue\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamBlue\"\r\n                visibility=\"Blue\">\r\n          TEAM BLUE\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"tealAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Teal\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Teal\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamBlue\"\r\n                visibility=\"Teal\">\r\n          TEAM BLUE\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"purpleAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Purple\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Purple\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamBlue\"\r\n                visibility=\"Purple\">\r\n          TEAM BLUE\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"greenAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"Green\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"Green\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamBlue\"\r\n                visibility=\"Green\">\r\n          TEAM BLUE\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"whiteAnnounce\"\r\n       class=\"announcePanel\"\r\n       visibility=\"White\">\r\n\r\n       <VerticalLayout>\r\n          <Text class=\"youAreOn\"\r\n                visibility=\"White\">\r\n          YOU ARE ON\r\n          </Text>\r\n          <Text class=\"teamBlue\"\r\n                visibility=\"White\">\r\n          TEAM BLUE\r\n          </Text>\r\n        </VerticalLayout>\r\n</Panel>\r\n\r\n<Panel id=\"redClues\"\r\n       visibility=\"Red\"\r\n       rectAlignment=\"LowerCenter\"\r\n       color=\"#da1918\"\r\n       height=\"100\"\r\n       width=\"650\"\r\n       outline=\"#ffffff\"\r\n       outlineSize=\"2 -2\">\r\n\r\n       <Panel rectAlignment=\"UpperRight\" width=\"25\" height=\"25\">\r\n         <Text id=\"codemasterHelp\"\r\n             fontStyle=\"Bold\"\r\n             fontSize=\"20\"\r\n             color=\"#ffffff\"\r\n             tooltip=\"Type in your clue and push ENTER once you're finished. Clues can&#xA;only be one word or contain one hyphen in them. You must include&#xA;a number (0, inf, 1-9) in your clue.&#xA;&#xA;Clues can be in any of the following formats:&#xA;* clue - 0&#xA;* clue inf&#xA;* clue1&#xA;* clue-clue 9&#xA;* etc\">?\r\n           </Text>\r\n       </Panel>\r\n\r\n       <InputField id=\"redClueText\"\r\n                   placeholder=\"Enter clue here\"\r\n                   alignment=\"MiddleCenter\"\r\n                   height=\"30\"\r\n                   width=\"550\"\r\n                   lineType=\"MultiLineNewLine\"\r\n                   onValueChanged=\"clueEntered\">\r\n       </InputField>\r\n\r\n</Panel>\r\n\r\n<Panel id=\"blueClues\"\r\n       visibility=\"Blue\"\r\n       rectAlignment=\"LowerCenter\"\r\n       color=\"#1f87ff\"\r\n       height=\"100\"\r\n       width=\"650\"\r\n       outline=\"#ffffff\"\r\n       outlineSize=\"2 -2\">\r\n\r\n       <Panel rectAlignment=\"UpperRight\" width=\"25\" height=\"25\">\r\n         <Text id=\"codemasterHelp\"\r\n             fontStyle=\"Bold\"\r\n             fontSize=\"20\"\r\n             color=\"#ffffff\"\r\n             tooltip=\"Type in your clue and push ENTER once you're finished. Clues can&#xA;only be one word or contain one hyphen in them. You must include&#xA;a number (0, inf, 1-9) in your clue.&#xA;&#xA;Clues can be in any of the following formats:&#xA;* clue - 0&#xA;* clue inf&#xA;* clue1&#xA;* clue-clue 9&#xA;* etc\">?\r\n           </Text>\r\n       </Panel>\r\n\r\n       <InputField id=\"blueClueText\"\r\n                   placeholder=\"Enter clue here\"\r\n                   alignment=\"MiddleCenter\"\r\n                   height=\"30\"\r\n                   width=\"550\"\r\n                   lineType=\"MultiLineNewLine\"\r\n                   onValueChanged=\"clueEntered\">\r\n       </InputField>\r\n\r\n</Panel>\r\n\r\n<!--<Panel id=\"redTeamStatus\"\r\n       visibility=\"Orange|Yellow|Pink|Brown\"\r\n       rectAlignment=\"LowerCenter\"\r\n       color=\"Red\"\r\n       height=\"75\"\r\n       width=\"650\"\r\n       outline=\"#ffffff\"\r\n       outlineSize=\"2 -2\">\r\n\r\n       <Text id=\"redClueWaiting\" active=\"false\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"25\">Waiting for clue...</Text>\r\n\r\n        <TableLayout cellBackgroundColor=\"rgba(1,1,1,0)\">\r\n          <Row>\r\n            <Cell><Text color=\"#ffffff\" fontStyle=\"Italic\">─── Clue ───</Text></Cell>\r\n            <Cell><Text color=\"#ffffff\" fontStyle=\"Italic\">── Guesses Left ──</Text></Cell>\r\n            <Cell><Text color=\"#ffffff\" fontStyle=\"Italic\">── Time Left ──</Text></Cell>\r\n          </Row>\r\n          <Row>\r\n            <Cell><Text alignment=\"UpperCenter\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"27\">Animalstetingweofqiweof</Text></Cell>\r\n            <Cell><Text alignment=\"UpperCenter\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"27\">6</Text></Cell>\r\n            <Cell><Text alignment=\"UpperCenter\" color=\"#ffffff\" fontStyle=\"Bold\" fontSize=\"27\">1:34</Text></Cell>\r\n          </Row>\r\n        </TableLayout>\r\n\r\n</Panel>-->",
  "CustomUIAssets": [
    {
      "Name": "hazard",
      "URL": "http://cloud-3.steamusercontent.com/ugc/1011564389373718645/698E4D0CF7B620C07753FF98B6DAE8F54ED53F89/"
    },
    {
      "Name": "bg",
      "URL": "http://cloud-3.steamusercontent.com/ugc/1808733683587071175/EC5F0245200D70F5C13E5DDDAAF5407FEB806B1B/"
    }
  ],
  "SnapPoints": [
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": -2.8000195
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 1.04998076
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 4.89998055
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 12.5999813
      }
    },
    {
      "Position": {
        "x": -11.4000111,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": -5.70001125,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": -5.70001125,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": -5.70001125,
        "y": 0.9611347,
        "z": 4.89998055
      }
    },
    {
      "Position": {
        "x": -5.70001173,
        "y": 0.9611347,
        "z": 1.04998076
      }
    },
    {
      "Position": {
        "x": -5.700011,
        "y": 0.9611347,
        "z": -2.80002022
      }
    },
    {
      "Position": {
        "x": -1.14192007E-05,
        "y": 0.9611347,
        "z": -2.80001974
      }
    },
    {
      "Position": {
        "x": -1.14166323E-05,
        "y": 0.9611347,
        "z": 1.04998028
      }
    },
    {
      "Position": {
        "x": -1.12004127E-05,
        "y": 0.9611347,
        "z": 4.89998
      }
    },
    {
      "Position": {
        "x": -1.12115758E-05,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": -1.09853609E-05,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": 5.699988,
        "y": 0.9611347,
        "z": 4.89998055
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": 1.04998
      }
    },
    {
      "Position": {
        "x": 5.69998837,
        "y": 0.9611347,
        "z": -2.80001974
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": -2.8000195
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 1.04998028
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 4.89998
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 8.74998
      }
    },
    {
      "Position": {
        "x": 11.3999882,
        "y": 0.9611347,
        "z": 12.59998
      }
    },
    {
      "Position": {
        "x": -5.699988,
        "y": 0.9611347,
        "z": -14.0000191
      }
    },
    {
      "Position": {
        "x": -5.699988,
        "y": 0.9611347,
        "z": -17.85002
      }
    },
    {
      "Position": {
        "x": -5.699988,
        "y": 0.9611347,
        "z": -21.70002
      }
    },
    {
      "Position": {
        "x": 1.16321171E-05,
        "y": 0.9611347,
        "z": -17.85002
      }
    },
    {
      "Position": {
        "x": 1.17367581E-05,
        "y": 0.9611347,
        "z": -14.0000191
      }
    },
    {
      "Position": {
        "x": 1.16156953E-05,
        "y": 0.9611347,
        "z": -21.70002
      }
    },
    {
      "Position": {
        "x": 5.70001173,
        "y": 0.9611347,
        "z": -21.70002
      }
    },
    {
      "Position": {
        "x": 5.70001173,
        "y": 0.9611347,
        "z": -17.85002
      }
    },
    {
      "Position": {
        "x": 5.70001173,
        "y": 0.9611347,
        "z": -14.0000191
      }
    },
    {
      "Position": {
        "x": -12.2199888,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -17.9199886,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -17.9199886,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": -23.61999,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": -23.61999,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -29.3199883,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -29.3199883,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 12.3400116,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 12.3400116,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": 18.0700111,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 23.7700119,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 23.7700119,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": 29.47001,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": 29.47001,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": 18.0700111,
        "y": 0.9611347,
        "z": -17.8000183
      }
    },
    {
      "Position": {
        "x": -12.2199888,
        "y": 0.9611347,
        "z": -13.9700193
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": -2.35
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": -0.3
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 1.75
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 3.8
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 5.85
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 7.9
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 9.95
      }
    },
    {
      "Position": {
        "x": -21.05,
        "y": 0.9611347,
        "z": 12.0
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 12.0000048
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 9.949997
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 7.89999771
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 5.850011
      }
    },
    {
      "Position": {
        "x": 21.0500031,
        "y": 0.9611349,
        "z": 3.80001044
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": 1.74999976
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": -0.299986571
      }
    },
    {
      "Position": {
        "x": 21.05,
        "y": 0.9611349,
        "z": -2.35
      }
    }
  ],
  "ObjectStates": [
    {
      "GUID": "3f75b3",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 20.8007851,
        "posY": -2.0,
        "posZ": 14.4678,
        "rotX": 1.0876895E-06,
        "rotY": 180.0086,
        "rotZ": 5.2589553E-07,
        "scaleX": 0.5000005,
        "scaleY": 0.5000005,
        "scaleZ": 0.75
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.117989548,
        "g": 0.53,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://tts-codenames.com/assets/clue_token.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 4,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "function clue()\r\nend",
      "LuaScriptState": ""
    },
    {
      "GUID": "f3cdf2",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": -20.9492245,
        "posY": -2.0,
        "posZ": 14.5125818,
        "rotX": -1.18295156E-05,
        "rotY": 180.0086,
        "rotZ": 2.65259729E-07,
        "scaleX": 0.5000005,
        "scaleY": 0.5000005,
        "scaleZ": 0.75
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 0.0,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://tts-codenames.com/assets/clue_token.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 4,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "function clue()\r\nend",
      "LuaScriptState": ""
    },
    {
      "GUID": "7fdaee",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 12.3398275,
        "posY": 0.968943059,
        "posZ": -13.9699974,
        "rotX": -0.000383328472,
        "rotY": 179.30925,
        "rotZ": 180.022522,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "0f0ec0",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 12.3400211,
        "posY": 0.968986332,
        "posZ": -17.7999973,
        "rotX": -0.0006565703,
        "rotY": 180.000015,
        "rotZ": 180.0225,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "99832c",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 18.070015,
        "posY": 0.9668242,
        "posZ": -13.9700022,
        "rotX": 0.004391502,
        "rotY": 180.0,
        "rotZ": 180.0203,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "d9054c",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 18.07002,
        "posY": 0.9667328,
        "posZ": -17.8,
        "rotX": -0.0006736247,
        "rotY": 180.000229,
        "rotZ": 180.022522,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "d9324a",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 23.7700176,
        "posY": 0.9649097,
        "posZ": -13.970005,
        "rotX": 0.00511894375,
        "rotY": 180.0,
        "rotZ": 180.01799,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "4de840",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 23.7700176,
        "posY": 0.9646446,
        "posZ": -17.8000031,
        "rotX": 0.001728059,
        "rotY": 180.000092,
        "rotZ": 180.020218,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "19b2d5",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 29.4700165,
        "posY": 0.96312,
        "posZ": -13.970005,
        "rotX": 0.00512794359,
        "rotY": 179.999969,
        "rotZ": 180.018,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "05c73d",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 29.4700146,
        "posY": 0.9627793,
        "posZ": -17.8000031,
        "rotX": 0.005110967,
        "rotY": 179.999924,
        "rotZ": 180.01799,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "746660",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -12.2198639,
        "posY": 0.973736942,
        "posZ": -13.9700041,
        "rotX": -0.000704924343,
        "rotY": 180.497772,
        "rotZ": 179.999756,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "9cbe84",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -17.92,
        "posY": 0.973727167,
        "posZ": -13.97,
        "rotX": -0.000398745935,
        "rotY": 180.0,
        "rotZ": 179.999954,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "6bb4d8",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -23.62,
        "posY": 0.9737413,
        "posZ": -13.97,
        "rotX": -0.000114499628,
        "rotY": 179.999924,
        "rotZ": 180.000275,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b48ed4",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -29.32,
        "posY": 0.9737666,
        "posZ": -13.97,
        "rotX": -7.30936663E-05,
        "rotY": 180.0,
        "rotZ": 180.000244,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5c1be6",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -12.22,
        "posY": 0.973784,
        "posZ": -17.8,
        "rotX": -0.000673751638,
        "rotY": 180.000076,
        "rotZ": 179.999771,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b89ba7",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -17.92,
        "posY": 0.973761439,
        "posZ": -17.8,
        "rotX": -0.000707741943,
        "rotY": 179.9998,
        "rotZ": 179.999817,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "e1754e",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -23.62,
        "posY": 0.973754764,
        "posZ": -17.8,
        "rotX": -0.000228826888,
        "rotY": 179.999908,
        "rotZ": 179.999969,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "4a2969",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -29.32,
        "posY": 0.9737708,
        "posZ": -17.8,
        "rotX": -7.85704251E-05,
        "rotY": 180.0,
        "rotZ": 180.000244,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "e44594",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -5.69999933,
        "posY": 0.9738091,
        "posZ": -17.84,
        "rotX": -0.0006683651,
        "rotY": 180.0,
        "rotZ": 179.9998,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f6786b",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -5.7,
        "posY": 0.973857,
        "posZ": -21.7,
        "rotX": -0.0006570668,
        "rotY": 180.0,
        "rotZ": 179.9998,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1f53f2",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -5.69999933,
        "posY": 0.9737634,
        "posZ": -14.0,
        "rotX": -0.0006675507,
        "rotY": 179.29953,
        "rotZ": 179.999771,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f8f6a1",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 0.0400002748,
        "posY": 0.973775864,
        "posZ": -21.6999912,
        "rotX": 359.99408,
        "rotY": 180.000015,
        "rotZ": 180.012619,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "a05e4e",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 5.73999739,
        "posY": 0.9716284,
        "posZ": -21.7,
        "rotX": -0.000704180857,
        "rotY": 180.000046,
        "rotZ": 180.022552,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1ebedd",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 5.74002075,
        "posY": 0.9715828,
        "posZ": -17.84,
        "rotX": -0.0006701473,
        "rotY": 180.000015,
        "rotZ": 180.0225,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3d7b86",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 5.740165,
        "posY": 0.971538067,
        "posZ": -14.0000067,
        "rotX": -0.00100234849,
        "rotY": 180.731567,
        "rotZ": 180.022537,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_white.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "b97df2",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 0.04002732,
        "posY": 0.9738037,
        "posZ": -17.839983,
        "rotX": -0.001514459,
        "rotY": 179.999481,
        "rotZ": 180.013428,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 0.728654265,
        "b": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": false,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_black.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "1e9282",
      "Name": "Custom_Token",
      "Transform": {
        "posX": -0.000104554696,
        "posY": -1.0,
        "posZ": -13.9999208,
        "rotX": -8.102868E-06,
        "rotY": 179.977173,
        "rotZ": 180.0,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_blue.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3ef1ca",
      "Name": "Custom_Token",
      "Transform": {
        "posX": 7.07386062E-06,
        "posY": -1.0,
        "posZ": -14.00002,
        "rotX": 3.03448928E-07,
        "rotY": 179.994934,
        "rotZ": 180.0,
        "scaleX": 1.10080636,
        "scaleY": 1.0,
        "scaleZ": 1.10080636
      },
      "Nickname": "Words",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": false,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomImage": {
        "ImageURL": "https://tts-codenames.com/assets/agent_red.png",
        "ImageSecondaryURL": "",
        "ImageScalar": 1.0,
        "WidthScale": 0.0,
        "CustomToken": {
          "Thickness": 0.1,
          "MergeDistancePixels": 5.0,
          "StandUp": false,
          "Stackable": false
        }
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "f16a9a",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": -21.0,
        "posY": 0.96,
        "posZ": -6.0,
        "rotX": -6.648801E-07,
        "rotY": 270.0,
        "rotZ": 2.68558665E-06,
        "scaleX": 1.24999976,
        "scaleY": 1.24999976,
        "scaleZ": 1.24999976
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.124985449,
        "g": 0.124985449,
        "b": 0.124985449
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://tts-codenames.com/assets/end_red.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "c91f34",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 21.0,
        "posY": 0.96,
        "posZ": -6.00125742,
        "rotX": 1.64464709E-07,
        "rotY": 269.989044,
        "rotZ": 2.24210726E-06,
        "scaleX": 1.24999976,
        "scaleY": 1.24999976,
        "scaleZ": 1.24999976
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.12498533,
        "g": 0.12498533,
        "b": 0.12498533
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": false,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://tts-codenames.com/assets/end_blue.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "2fb333",
      "Name": "Infinite_Bag",
      "Transform": {
        "posX": -9.65522347E-08,
        "posY": -1.0,
        "posZ": 35.0,
        "rotX": -5.03513E-07,
        "rotY": 0.0,
        "rotZ": 5.637331E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.3058885,
        "g": 0.372555166,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "MaterialIndex": -1,
      "MeshIndex": -1,
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": "",
      "ContainedObjects": [
        {
          "GUID": "cd1bf7",
          "Name": "CardCustom",
          "Transform": {
            "posX": -0.14500311,
            "posY": 6.370847,
            "posZ": 27.5290585,
            "rotX": 0.5147819,
            "rotY": 179.999725,
            "rotZ": 359.939331,
            "scaleX": 1.0,
            "scaleY": 1.0,
            "scaleZ": 1.0
          },
          "Nickname": "",
          "Description": "",
          "GMNotes": "",
          "ColorDiffuse": {
            "r": 0.713235259,
            "g": 0.713235259,
            "b": 0.713235259
          },
          "LayoutGroupSortIndex": 0,
          "Value": 0,
          "Locked": false,
          "Grid": true,
          "Snap": true,
          "IgnoreFoW": false,
          "MeasureMovement": false,
          "DragSelectable": true,
          "Autoraise": true,
          "Sticky": true,
          "Tooltip": true,
          "GridProjection": false,
          "HideWhenFaceDown": true,
          "Hands": true,
          "CardID": 300,
          "SidewaysCard": false,
          "CustomDeck": {
            "3": {
              "FaceURL": "https://tts-codenames.com/assets/card_front.png",
              "BackURL": "https://tts-codenames.com/assets/card_back.png",
              "NumWidth": 1,
              "NumHeight": 1,
              "BackIsHidden": true,
              "UniqueBack": false,
              "Type": 0
            }
          },
          "LuaScript": "position  = nil\r\nrotation  = {x = 0, y = 180, z = 0}\r\ntext      = nil\r\ncolor     = nil\r\n\r\nfunction onCollisionEnter(collision_info)\r\n  if position ~= nil and (collision_info == nil or collision_info.collision_object.guid != 'bab013') then\r\n    self.setLock(true)\r\n    self.setPosition(position)\r\n    self.setRotation(rotation)\r\n    Wait.frames(function()\r\n      self.setPosition(position)\r\n      self.setRotation(rotation)\r\n      if self.interactable then\r\n        self.setLock(false)\r\n      end\r\n    end, 10)\r\n  end\r\nend\r\n\r\nfunction setData(data)\r\n  -- Set the card position\r\n  position = {x = data.position.x, y = 1.03, z = data.position.z}\r\n\r\n  -- Set the card text\r\n  text = data.text\r\n  self.UI.setValue(\"frontText\", data.text)\r\n  self.UI.setValue(\"frontTextSub\", data.text)\r\n  self.UI.setValue(\"backText\", data.text)\r\n  self.UI.setValue(\"backTextSub\", data.text)\r\n\r\n  -- Set the card color\r\n  color = data.color\r\n  self.UI.setAttribute(\"cardPanel\", \"color\", data.color)\r\n  if data.color == \"Black\" then\r\n    self.UI.setAttribute(\"blackCardImage\", \"active\", true)\r\n  else\r\n    self.UI.setAttribute(\"blackCardImage\", \"active\", false)\r\n  end\r\nend\r\n",
          "LuaScriptState": "",
          "XmlUI": "<!-- Codemaster border -->\r\n<Panel\r\n  id=\"cardPanel\"\r\n  visibility=\"Blue|Red|Black\"\r\n  color=\"\"\r\n  width=\"248\"\r\n  height=\"375\">\r\n  <Image id=\"blackCardImage\" active=\"false\" image=\"hazard\" preserveAspect=\"1\" type=\"Sliced\" />\r\n</Panel>\r\n\r\n<!-- Voting -->\r\n<Panel id=\"vote-1\" active=\"false\" scale=\"0.5 1\" position=\"69 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n<Panel id=\"vote-2\" active=\"false\" scale=\"0.5 1\" position=\"23 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n<Panel id=\"vote-3\" active=\"false\" scale=\"0.5 1\" position=\"-23 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n<Panel id=\"vote-4\" active=\"false\" scale=\"0.5 1\" position=\"-69 -75 -100\" width=\"75\" height=\"75\" color=\"Black\"></Panel>\r\n\r\n<!-- Front texts -->\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"0 66 -25\"\r\n  scale=\"0.5 1\"\r\n  width=\"340\"\r\n  height=\"75\">\r\n  <Text\r\n    id=\"frontText\"\r\n    rotation=\"0 0 180\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#000000\">\r\n  </Text>\r\n</Panel>\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"24 -15 -25\"\r\n  scale=\"0.5 1\"\r\n  width=\"225\"\r\n  height=\"30\">\r\n  <Text\r\n    id=\"frontTextSub\"\r\n    alignment=\"MiddleLeft\"\r\n    rotation=\"0 0 0\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#7e6d5c\">\r\n  </Text>\r\n</Panel>\r\n\r\n<!-- Back texts -->\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"0 66 25\"\r\n  scale=\"0.5 1\"\r\n  width=\"340\"\r\n  height=\"75\">\r\n  <Text\r\n    id=\"backText\"\r\n    rotation=\"180 0 0\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#505050\">\r\n  </Text>\r\n</Panel>\r\n<Panel\r\n  padding=\"0 0 0 0\"\r\n  position=\"-24 -15 25\"\r\n  scale=\"0.5 1\"\r\n  width=\"225\"\r\n  height=\"30\">\r\n  <Text\r\n    id=\"backTextSub\"\r\n    alignment=\"MiddleLeft\"\r\n    rotation=\"0 180 0\"\r\n    fontStyle=\"Bold\"\r\n    resizeTextMaxSize=\"1000\"\r\n    resizeTextForBestFit=\"true\"\r\n    color=\"#505050\">\r\n  </Text>\r\n</Panel>"
        }
      ]
    },
    {
      "GUID": "0a61c6",
      "Name": "Custom_Assetbundle",
      "Transform": {
        "posX": 0.0,
        "posY": 0.0,
        "posZ": 0.0,
        "rotX": -1.25153889E-07,
        "rotY": -2.80403E-09,
        "rotZ": 4.990223E-07,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomAssetbundle": {
        "AssetbundleURL": "https://tts-codenames.com/assets/sounds.unity3d",
        "AssetbundleSecondaryURL": "",
        "MaterialIndex": 0,
        "TypeIndex": 0,
        "LoopingEffectIndex": 0
      },
      "LuaScript": "-- UI elements for the table\r\n\r\n-- Tracks the players currently in queue\r\nqueue = {}\r\n\r\n-- Tracks color switching\r\nseatTracker =\r\n{\r\n  [\"Blue\"]    = false,\r\n  [\"Teal\"]    = false,\r\n  [\"Purple\"]  = false,\r\n  [\"Green\"]   = false,\r\n  [\"White\"]   = false,\r\n\r\n  [\"Red\"]     = false,\r\n  [\"Orange\"]  = false,\r\n  [\"Yellow\"]  = false,\r\n  [\"Pink\"]    = false,\r\n  [\"Brown\"]   = false\r\n}\r\n\r\nredColor = {0.856, 0.1, 0.094}\r\n\r\nfunction onLoad(saveState)\r\n  if saveState != \"\" then\r\n    local decodedSaveState = JSON.decode(saveState)\r\n\r\n    queue = decodedSaveState.queue\r\n    updateQueue()\r\n  end\r\n\r\n  -- Update the tracker with vacant seats and show buttons for available seats\r\n  for seatColor,_ in pairs(seatTracker) do\r\n    if Player[seatColor].seated then\r\n      seatTracker[seatColor] = true\r\n    else\r\n      seatTracker[seatColor] = false\r\n\r\n      -- Show the button to switch seats\r\n      self.UI.setAttribute(\"sit\" .. seatColor, \"active\", true)\r\n    end\r\n  end\r\nend\r\n\r\nfunction onSave()\r\n  local saveData = {}\r\n\r\n  saveData.queue  = queue\r\n\r\n  return JSON.encode(saveData)\r\nend\r\n\r\nfunction votePass(player)\r\n  Global.call(\"votePass\", player.color)\r\nend\r\n\r\nfunction onPlayerChangeColor(color)\r\n  local switcherEnabled = Global.call(\"getSwitcher\")\r\n\r\n  if not switcherEnabled then\r\n    return\r\n  end\r\n\r\n  for seatColor,_ in pairs(seatTracker) do\r\n    if Player[seatColor].seated != seatTracker[seatColor] then\r\n      seatTracker[seatColor] = Player[seatColor].seated\r\n      self.UI.setAttribute(\"sit\" .. seatColor, \"active\", not seatTracker[seatColor])\r\n    end\r\n  end\r\nend\r\n\r\nfunction onPlayerConnect(player)\r\n  for _,queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      queuePlayer.steam_name = player.steam_name\r\n      updateQueue()\r\n      break\r\n    end\r\n  end\r\nend\r\n\r\nfunction updateSettings()\r\n  shuffle(nil,     Global.call(\"getShuffle\") == true and \"True\" or \"False\")\r\n  queues(nil,      Global.call(\"getQueue\") == true and \"True\" or \"False\")\r\n  switcher(nil,    Global.call(\"getSwitcher\") == true and \"True\" or \"False\")\r\n  tilting(nil,     Global.call(\"getTilting\") == true and \"True\" or \"False\")\r\n  --afk(player)\r\n  --afkTime(player)\r\n  timer(nil,       Global.call(\"getTimer\") == true and \"True\" or \"False\")\r\n  timer1Time(nil,  Global.call(\"getTimer1Time\"))\r\n  timer2Time(nil,  Global.call(\"getTimer2Time\"))\r\n  autokick(nil,    Global.call(\"getAutokick\") == true and \"True\" or \"False\")\r\nend\r\n\r\nfunction reloadUI(player)\r\n  self.UI.setXml(self.UI.getXml())\r\n  Global.call(\"reloadCardUI\")\r\n  printToAll(player.steam_name .. \" has reloaded the UI!\", redColor)\r\nend\r\n\r\n---------------------------------------------------------------\r\n---------------------------[ TIMER ]---------------------------\r\n---------------------------------------------------------------\r\nfunction startTimer(time)\r\n  -- Cancel any existing timers\r\n  if currentTimer then\r\n    stopTimer(false)\r\n  end\r\n\r\n  local minutes = math.floor(time / 60)\r\n  local seconds = time % 60\r\n\r\n  timeLeft = time\r\n\r\n  local timerColor = \"White\"\r\n  if timeLeft <= 10 then\r\n    timerColor = \"Red\"\r\n    broadcastToAll(\"[a020f0]» [ffffff]\" .. (timeLeft == 0 and \"Time's up!\" or (tostring(timeLeft) .. \" seconds remaining!\")) .. \" [a020f0]«\")\r\n  elseif timeLeft <= 30 then\r\n    timerColor = \"Yellow\"\r\n  end\r\n\r\n  -- Set the correct time on the clock\r\n  self.UI.setAttributes(\"time\", {\r\n    text  = tostring(minutes) .. \":\" .. (seconds < 10 and (\"0\" .. tostring(seconds)) or tostring(seconds)),\r\n    color = timerColor\r\n  })\r\n\r\n  -- Set the toggle button to the correct text\r\n  self.UI.setAttributes(\"timerControl\", {\r\n    text      = \"ll\",\r\n    fontStyle = \"Bold\"\r\n  })\r\n\r\n  -- Start the countdown\r\n  currentTimer = Wait.time(tickTimer, 1, time)\r\nend\r\n\r\nfunction tickTimer()\r\n  -- Tick the timer down by 1 second\r\n  timeLeft = timeLeft - 1\r\n\r\n  local minutes = math.floor(timeLeft / 60)\r\n  local seconds = timeLeft % 60\r\n\r\n  local timerColor = \"White\"\r\n  if timeLeft <= 10 then\r\n    timerColor = \"Red\"\r\n\r\n    -- Play the ticking sound\r\n    self.AssetBundle.playTriggerEffect(3)\r\n\r\n    broadcastToAll(\"[a020f0]» [ffffff]\" .. (timeLeft == 0 and \"Time's up!\" or (tostring(timeLeft) .. \" seconds remaining!\")) .. \" [a020f0]«\")\r\n  elseif timeLeft <= 30 then\r\n    timerColor = \"Yellow\"\r\n  end\r\n\r\n  -- Set the correct time on the clock\r\n  self.UI.setAttributes(\"time\", {\r\n    text  = tostring(minutes) .. \":\" .. (seconds < 10 and (\"0\" .. tostring(seconds)) or tostring(seconds)),\r\n    color = timerColor\r\n  })\r\n\r\n  -- Swap turns if time expired\r\n  if timeLeft == 0 then\r\n    Global.call(\"timeExpired\")\r\n  end\r\n\r\nend\r\n\r\nfunction toggleTimer(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color ~= \"Red\" and player.color ~= \"Blue\" and not player.admin then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may control the timer! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Pause/start the current timer if it exists\r\n  if currentTimer then\r\n    -- Pause the current timer\r\n    stopTimer(false)\r\n\r\n    -- Change the toggle button text\r\n    self.UI.setAttributes(\"timerControl\", {\r\n      text      = \"▶\",\r\n      fontStyle = \"Normal\"\r\n    })\r\n  else\r\n    -- Start the previous timer (if one existed)\r\n    if timeLeft and (timeLeft > 0) then\r\n      startTimer(timeLeft)\r\n\r\n      -- Change the toggle button text\r\n      self.UI.setAttributes(\"timerControl\", {\r\n        text      = \"ll\",\r\n        fontStyle = \"Bold\"\r\n      })\r\n    end\r\n  end\r\n\r\nend\r\n\r\nfunction stopTimer(endGame)\r\n  if currentTimer then\r\n    Wait.stop(currentTimer)\r\n    currentTimer = nil\r\n  end\r\n\r\n  if endGame then\r\n    timeLeft = nil\r\n\r\n    -- Set the correct time on the clock\r\n    self.UI.setAttributes(\"time\", {\r\n      text  = \"0:00\",\r\n      color = \"Red\"\r\n    })\r\n\r\n    -- Set the toggle button to the correct text\r\n    self.UI.setAttributes(\"timerControl\", {\r\n      text      = \"▶\",\r\n      fontStyle = \"Normal\"\r\n    })\r\n  end\r\nend\r\n\r\n---------------------------------------------------------------\r\n--------------------[ GAME SETTINGS PANEL ]--------------------\r\n---------------------------------------------------------------\r\nfunction shuffle(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"shuffle\", \"isOn\", self.UI.getAttribute(\"shuffle\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setShuffle\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"shuffle\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction queues(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"queues\", \"isOn\", self.UI.getAttribute(\"queues\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setQueue\", toboolean(enabled))\r\n\r\n  -- Hide/show the queue\r\n  self.UI.setAttribute(\"codemasterQueue\", \"active\", toboolean(enabled))\r\n  if not enabled then\r\n    queue = {}\r\n  end\r\n  updateQueue()\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"queues\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction switcher(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"switcher\", \"isOn\", self.UI.getAttribute(\"switcher\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setSwitcher\", toboolean(enabled))\r\n\r\n  local colors =\r\n  {\r\n    \"Blue\",\r\n    \"Red\",\r\n    \"Teal\",\r\n    \"Orange\",\r\n    \"Purple\",\r\n    \"Yellow\",\r\n    \"Green\",\r\n    \"Pink\",\r\n    \"White\",\r\n    \"Brown\"\r\n  }\r\n  for _, color in ipairs(colors) do\r\n    if toboolean(enabled) then\r\n      if Player[color].seated then\r\n        self.UI.setAttribute(\"sit\" .. color, \"active\", false)\r\n      else\r\n        self.UI.setAttribute(\"sit\" .. color, \"active\", toboolean(enabled))\r\n      end\r\n    else\r\n      self.UI.setAttribute(\"sit\" .. color, \"active\", toboolean(enabled))\r\n    end\r\n  end\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"switcher\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction tilting(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"tilting\", \"isOn\", self.UI.getAttribute(\"tilting\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTilting\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"tilting\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction afk(player)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"afk\", \"isOn\", self.UI.getAttribute(\"afk\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setAfk\", toboolean(enabled))\r\n\r\n  -- Update the promoted player view\r\n  self.UI.setAttribute(\"afk\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction afkTime(player)\r\n  if player ~= nil and not player.admin then\r\n    return\r\n  end\r\nend\r\n\r\nfunction timer(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"timer\", \"isOn\", self.UI.getAttribute(\"timer\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTimer\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"timer\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\nfunction timer1Time(player, value)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"timer1Time\", \"value\", self.UI.getAttribute(\"timer1Time\", \"value\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTimer1Time\", tonumber(value))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"timer1Time\", \"value\", tonumber(value))\r\n  self.UI.setAttribute(\"timer1TimeValue\", \"text\", value)\r\nend\r\n\r\nfunction timer2Time(player, value)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"timer2Time\", \"value\", self.UI.getAttribute(\"timer2Time\", \"value\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setTimer2Time\", tonumber(value))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"timer2Time\", \"value\", tonumber(value))\r\n  self.UI.setAttribute(\"timer2TimeValue\", \"text\", value)\r\nend\r\n\r\nfunction autokick(player, enabled)\r\n  if player ~= nil and not player.admin then\r\n    self.UI.setAttribute(\"autokick\", \"isOn\", self.UI.getAttribute(\"autokick\", \"isOn\"))\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may change game settings! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Handle in the Global script\r\n  Global.call(\"setAutokick\", toboolean(enabled))\r\n\r\n  -- Update the view for everyone\r\n  self.UI.setAttribute(\"autokick\", \"isOn\", toboolean(enabled))\r\nend\r\n\r\n\r\n---------------------------------------------------------------\r\n--------------------[ DECK SELECTOR PANEL ]--------------------\r\n---------------------------------------------------------------\r\nfunction setDeck(player, deck, button)\r\n  if player.color == \"Grey\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Red\" or player.color == \"Blue\" or player.admin then\r\n    Global.call(\"setDeck\", deck)\r\n\r\n    local multipleDeckMode = Global.call(\"getMultipleDeckMode\")\r\n    for i = 1, 20, 1 do\r\n      local buttonName = \"deck\" .. i .. \"Button\"\r\n      if buttonName == button then\r\n        local currentColor = self.UI.getAttribute(buttonName, \"color\")\r\n        if multipleDeckMode and currentColor == \"#aaeaa7\" then\r\n          self.UI.setAttribute(buttonName, \"color\", \"#ffffff\")\r\n        else\r\n          self.UI.setAttribute(buttonName, \"color\", \"#aaeaa7\")\r\n        end\r\n      else\r\n        if not multipleDeckMode then\r\n          self.UI.setAttribute(buttonName, \"color\", \"#ffffff\")\r\n        end\r\n      end\r\n    end\r\n  else\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may select a deck! [a020f0]«\")\r\n  end\r\nend\r\n\r\nfunction startGame(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Red\" or player.color == \"Blue\" or player.admin then\r\n    Global.call(\"startGame\", player)\r\n  else\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may start the game! [a020f0]«\")\r\n  end\r\nend\r\n\r\nfunction refreshDecks(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  Global.call(\"api_getDecks\", player)\r\n  player.broadcast(\"[a020f0]» [ffffff]Deck list refreshed! [a020f0]«\", redColor)\r\nend\r\n\r\nfunction deckMode(player, button)\r\n  if player.color == \"Grey\" or button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Red\" or player.color == \"Blue\" or player.admin then\r\n    Global.call(\"toggleDeckMode\", player)\r\n  else\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only Codemasters or promoted players may change the deck mode! [a020f0]«\")\r\n  end\r\n\r\n  local multipleDeckMode = Global.call(\"getMultipleDeckMode\")\r\n\r\n  if not multipleDeckMode then\r\n    Global.call(\"setDeck\", nil)\r\n    for i = 1, 20, 1 do\r\n      local buttonName = \"deck\" .. i .. \"Button\"\r\n      self.UI.setAttribute(buttonName, \"color\", \"#ffffff\")\r\n    end\r\n  end\r\n\r\n  if multipleDeckMode then\r\n    self.UI.setAttribute(\"deckModeSwitch\", \"color\", \"#96e592\")\r\n    player.broadcast(\"[a020f0]» [ffffff]Multiple deck mode: [31b32b]ENABLED [a020f0]«\")\r\n  else\r\n    self.UI.setAttribute(\"deckModeSwitch\", \"color\", \"#ffffff\")\r\n    player.broadcast(\"[a020f0]» [ffffff]Multiple deck mode: [da1918]DISABLED [a020f0]«\")\r\n  end\r\nend\r\n\r\n\r\n------------------------------------------------------------------\r\n--------------------[ CODEMASTER QUEUE PANEL ]--------------------\r\n------------------------------------------------------------------\r\nfunction join(player, button)\r\n  if button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only seated players may join the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Check to see if the player already exists in the queue\r\n  for _,queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      if queuePlayer.stay then\r\n        queuePlayer.stay = false\r\n        updateQueue()\r\n      end\r\n      return\r\n    end\r\n  end\r\n\r\n  if #queue >= 10 then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Codemaster queue is full. Please wait until someone leaves or is removed! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Join the player to the queue and make them stay\r\n  table.insert(queue, {\r\n    steam_id   = player.steam_id,\r\n    steam_name = player.steam_name,\r\n    stay       = false\r\n  })\r\n  updateQueue()\r\nend\r\n\r\nfunction stay(player, button)\r\n  if button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only seated players may join the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Check to see if the player already exists in the queue\r\n  for _,queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      if not queuePlayer.stay then\r\n        queuePlayer.stay = true\r\n        updateQueue()\r\n      end\r\n      return\r\n    end\r\n  end\r\n\r\n  if #queue >= 10 then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Codemaster queue is full. Please wait until someone leaves or is removed! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Join the player to the queue and make them stay\r\n  table.insert(queue, {\r\n    steam_id   = player.steam_id,\r\n    steam_name = player.steam_name,\r\n    stay       = true\r\n  })\r\n  updateQueue()\r\nend\r\n\r\nfunction leave(player, button)\r\n  if button ~= \"-1\" then\r\n    return\r\n  end\r\n\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only seated players may leave the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Check to see if the player already exists in the queue\r\n  for i, queuePlayer in ipairs(queue) do\r\n    if queuePlayer.steam_id == player.steam_id then\r\n      table.remove(queue, i)\r\n      updateQueue()\r\n      return\r\n    end\r\n  end\r\nend\r\n\r\nfunction remove(player, queuePosition)\r\n  if player ~= nil and not player.admin then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]Only promoted players may remove player from the queue! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  -- Remove this player from the queue\r\n  local removedPlayer = findPlayerBySteamID(table.remove(queue, queuePosition).steam_id)\r\n  updateQueue()\r\n\r\n  if removedPlayer ~= nil then\r\n    -- Notify the player they've been removed\r\n    removedPlayer.broadcast(\"[a020f0]» [ffffff]\" .. player.steam_name .. \" has removed you from the codemaster queue! [a020f0]«\")\r\n  end\r\nend\r\n\r\n\r\n----------------------------------------------------------\r\n--------------------[ COLOR SWITCHER ]--------------------\r\n----------------------------------------------------------\r\nfunction changeSeat(player, to)\r\n  if player.color == \"Grey\" or player.color == \"Black\" then\r\n    return\r\n  end\r\n\r\n  -- Ensure the seat is empty\r\n  if Player[to].seated then\r\n    player.broadcast(\"[a020f0]» [da1918]ERROR: [ffffff]\" .. to .. \" seat is not empty! [a020f0]«\")\r\n    return\r\n  end\r\n\r\n  player.changeColor(to)\r\nend\r\n\r\n\r\n-------------------------------------------------------------\r\n--------------------[ UTILITY FUNCTIONS ]--------------------\r\n-------------------------------------------------------------\r\nfunction toboolean(string)\r\n  if string == \"True\" then\r\n    return true\r\n  elseif string == \"False\" then\r\n    return false\r\n  else\r\n    return nil\r\n  end\r\nend\r\n\r\n----------------------------------------------------------------------------------------------------------------------\r\nfunction updateQueue()\r\n  for i=1,10,1 do\r\n    if queue[i] ~= nil then\r\n      self.UI.setAttribute(\"queueText\" .. i, \"text\", queue[i].steam_name)\r\n      self.UI.setAttributes(\"queueButton\" .. i, {\r\n        active  = true,\r\n        color   = queue[i].stay and \"#96e592\" or \"White\"\r\n      })\r\n    else\r\n      self.UI.setAttributes(\"queueButton\" .. i, {\r\n        active  = false,\r\n        color   = \"White\"\r\n      })\r\n      self.UI.setAttribute(\"queueText\" .. i, \"text\", \"\")\r\n    end\r\n  end\r\nend\r\n\r\nfunction shufflePlayers()\r\n\r\n  -- Whether or not the codemaster queue is enabled\r\n  local queueEnabled = Global.call(\"getQueue\")\r\n\r\n  -- Colors to use when sitting people\r\n  local colorPool =\r\n  {\r\n    \"Blue\",\r\n    \"Red\",\r\n    \"Teal\",\r\n    \"Orange\",\r\n    \"Purple\",\r\n    \"Yellow\",\r\n    \"Green\",\r\n    \"Pink\",\r\n    \"White\",\r\n    \"Brown\"\r\n  }\r\n  local colors = {}\r\n\r\n  -- Get all current seated players to shuffle and stand them\r\n  local seatedPlayers = {}\r\n  for _, player in ipairs(Player.getPlayers()) do\r\n    if player.color ~= \"Grey\" and player.color ~= \"Black\" then\r\n      table.insert(seatedPlayers, player)\r\n      player.changeColor(\"Grey\")\r\n      coroutine.yield(0)\r\n\r\n      -- Add a color to the list of colors\r\n      table.insert(colors, (#seatedPlayers % 2 == 0) and table.remove(colorPool, 1) or table.remove(colorPool, math.random(1, 2)))\r\n    end\r\n  end\r\n\r\n  local requeue = {}\r\n  local numCodemasters = 0\r\n\r\n  while #seatedPlayers > 0 do\r\n    local nextPlayer\r\n    if queueEnabled and numCodemasters < 2 and #queue > 0 then\r\n      -- Draw from the queue first\r\n      local nextInQueue\r\n      while #queue > 0 do\r\n        nextInQueue = table.remove(queue, 1)\r\n        nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)\r\n\r\n        if nextPlayer ~= nil then\r\n          -- Check to see they were seated\r\n          local seated = false\r\n          for i, player in ipairs(seatedPlayers) do\r\n            if player.steam_id == nextPlayer.steam_id then\r\n              seated = true\r\n              table.remove(seatedPlayers, i)\r\n              break\r\n            end\r\n          end\r\n\r\n          if seated and not nextPlayer.blindfolded then\r\n            if nextInQueue.stay then\r\n              table.insert(requeue, nextPlayer)\r\n            end\r\n            -- We found a valid player - break\r\n            numCodemasters = numCodemasters + 1\r\n            break\r\n          else\r\n            nextPlayer.broadcast(\"[a020f0]» [ffffff]You were removed from the codemaster queue because you were either not sitting for your turn or were AFK! [a020f0]«\")\r\n          end\r\n        end\r\n      end\r\n    elseif #seatedPlayers > 0 then\r\n      nextPlayer = table.remove(seatedPlayers, math.random(1, #seatedPlayers))\r\n    else\r\n      -- No more players to seat\r\n      break\r\n    end\r\n\r\n    -- Seat the next player\r\n    nextPlayer.changeColor(table.remove(colors, 1))\r\n    coroutine.yield(0)\r\n  end\r\n\r\n  -- Requeue players if unnecessary\r\n  for _, requeuePlayer in ipairs(requeue) do\r\n    table.insert(queue, {\r\n      steam_id   = requeuePlayer.steam_id,\r\n      steam_name = requeuePlayer.steam_name,\r\n      stay       = true\r\n    })\r\n  end\r\n  updateQueue()\r\n  Global.call(\"api_gameStart\")\r\n  return 1\r\nend\r\n\r\nfunction swapCodemasters()\r\n\r\n  local colorPool =\r\n  {\r\n    \"Blue\",\r\n    \"Red\"\r\n  }\r\n\r\n  local requeue = {}\r\n\r\n  local nextInQueue\r\n  while #queue > 0 and #colorPool > 0 do\r\n    nextInQueue = table.remove(queue, 1)\r\n    nextPlayer = findPlayerBySteamID(nextInQueue.steam_id)\r\n\r\n    if nextPlayer ~= nil then\r\n      -- Check to see they were seated\r\n      if nextPlayer.seated and not nextPlayer.blindfolded then\r\n        if nextInQueue.stay then\r\n          table.insert(requeue, nextPlayer)\r\n        end\r\n        -- We found a valid player - break\r\n        local codemasterSeat = table.remove(colorPool, math.random(1, #colorPool))\r\n        local oldCodemaster = Player[codemasterSeat]\r\n        if oldCodemaster.seated then\r\n          local switchColor = nextPlayer.color\r\n          nextPlayer.changeColor(\"Grey\")\r\n          coroutine.yield(0)\r\n          oldCodemaster.changeColor(switchColor)\r\n          coroutine.yield(0)\r\n        end\r\n        nextPlayer.changeColor(codemasterSeat)\r\n        coroutine.yield(0)\r\n      else\r\n        nextPlayer.broadcast(\"[a020f0]» [ffffff]You were removed from the codemaster queue because you were either not sitting for your turn or were AFK! [a020f0]«\")\r\n      end\r\n    end\r\n  end\r\n\r\n  -- Requeue players if unnecessary\r\n  for _, requeuePlayer in ipairs(requeue) do\r\n    table.insert(queue, {\r\n      steam_id   = requeuePlayer.steam_id,\r\n      steam_name = requeuePlayer.steam_name,\r\n      stay       = true\r\n    })\r\n  end\r\n  updateQueue()\r\n  Global.call(\"api_gameStart\")\r\n  return 1\r\nend\r\n\r\nfunction findPlayerBySteamID(steam_id)\r\n  for _, player in ipairs(Player.getPlayers()) do\r\n    if player.steam_id == steam_id then\r\n      return player\r\n    end\r\n  end\r\n  return nil\r\nend\r\n",
      "LuaScriptState": "",
      "XmlUI": "<Defaults>\r\n  <!-- GENERIC PANELS -->\r\n  <Panel\r\n    class=\"settingsPanel\"\r\n    width=\"750\"\r\n    height=\"1100\"\r\n    padding=\"10 10 10 10\"\r\n    color=\"Black\">\r\n  </Panel>\r\n\r\n  <Text\r\n    class=\"panelHeader\"\r\n    color=\"#ffffff\"\r\n    alignment=\"UpperMiddle\"\r\n    fontSize=\"75\">\r\n  </Text>\r\n\r\n  <Panel\r\n    class=\"timerPanel\"\r\n    width=\"1000\"\r\n    height=\"500\"\r\n    padding=\"10 10 10 10\"\r\n    color=\"Black\"\r\n    outline=\"#ffffff\"\r\n    outlineSize=\"7 -7\">\r\n  </Panel>\r\n\r\n\r\n  <!-- DECK SELECTOR PANEL -->\r\n  <Row\r\n    class=\"deckEntry\"\r\n    active=\"false\"\r\n    preferredHeight=\"150\">\r\n  </Row>\r\n\r\n  <Button\r\n    class=\"deckButton\"\r\n    color=\"#ffffff\">\r\n  </Button>\r\n\r\n  <TableLayout\r\n    class=\"deckTable\"\r\n    columnWidths=\"150 0\"\r\n    cellBackgroundColor=\"rgba(0,0,0,0)\">\r\n  </TableLayout>\r\n\r\n  <VerticalLayout\r\n    class=\"deckOfficial\"\r\n    active=\"false\"\r\n    childForceExpandHeight=\"false\"\r\n    childForceExpandWidth=\"false\"\r\n    childAlignment=\"MiddleCenter\"\r\n    flexibleHeight=\"1\">\r\n  </VerticalLayout>\r\n\r\n  <Text\r\n    class=\"officialStar\"\r\n    fontSize=\"100\"\r\n    color=\"Yellow\">\r\n  </Text>\r\n\r\n  <Text\r\n    class=\"officialText\"\r\n    fontSize=\"20\"\r\n    color=\"Black\">\r\n  </Text>\r\n\r\n  <Text\r\n    class=\"deckName\"\r\n    alignment=\"MiddleLeft\"\r\n    fontSize=\"40\"\r\n    fontStyle=\"Bold\">\r\n  </Text>\r\n\r\n  <Text\r\n    class=\"deckDescription\"\r\n    active=\"false\"\r\n    alignment=\"UpperLeft\"\r\n    fontSize=\"20\">\r\n  </Text>\r\n\r\n\r\n  <!-- GAME SETTINGS PANEL -->\r\n  <Row\r\n    class=\"subcategoryRow\"\r\n    preferredHeight=\"55\">\r\n  </Row>\r\n\r\n  <Text\r\n    class=\"subcategoryText\"\r\n    color=\"#99aab5\"\r\n    alignment=\"UpperMiddle\"\r\n    fontSize=\"45\">\r\n  </Text>\r\n\r\n  <Row\r\n    class=\"settingRow\"\r\n    preferredHeight=\"75\">\r\n  </Row>\r\n\r\n  <Text\r\n    class=\"settingText\"\r\n    color=\"#ffffff\"\r\n    fontSize=\"30\">\r\n  </Text>\r\n\r\n  <Toggle\r\n    class=\"settingToggle\"\r\n    scale=\"2 2\">\r\n  </Toggle>\r\n\r\n  <TableLayout\r\n    class=\"sliderTable\"\r\n    columnWidths=\"275 0\"\r\n    cellBackgroundColor=\"rgba(1,1,1,0)\">\r\n  </TableLayout>\r\n\r\n  <Slider\r\n    class=\"settingSlider\"\r\n    minValue=\"1\"\r\n    maxValue=\"10\"\r\n    wholeNumbers=\"true\"\r\n    interactable=\"true\"\r\n    scale=\"0.9 0.4\">\r\n  </Slider>\r\n\r\n  <Text\r\n    class=\"sliderNumber\"\r\n    fontSize=\"30\"\r\n    color=\"#ffffff\">\r\n  </Text>\r\n\r\n\r\n  <!-- CODEMASTER QUEUE PANEL -->\r\n  <Button\r\n    class=\"queueButton\"\r\n    active=\"false\"\r\n    color=\"#ffffff\">\r\n  </Button>\r\n\r\n  <Text\r\n    class=\"queueText\"\r\n    fontSize=\"50\">\r\n  </Text>\r\n\r\n\r\n  <!-- PASS TURN INDICATORS -->\r\n  <Panel\r\n    class=\"passIndicator\"\r\n    active=\"false\"\r\n    width=\"350\"\r\n    height=\"350\"\r\n    color=\"Black\">\r\n  </Panel>\r\n\r\n\r\n  <!-- SWITCH COLOR BUTTONS -->\r\n  <Button\r\n    class=\"switchButton\"\r\n    active=\"false\"\r\n    visibility=\"Red|Orange|Yellow|Pink|Brown|Blue|Teal|Purple|Green|White\"\r\n    width=\"900\"\r\n    height=\"400\">\r\n  </Button>\r\n\r\n  <Text\r\n    class=\"switchText\"\r\n    fontSize=\"150\"\r\n    color=\"#ffffff\"\r\n    outline=\"#191919\"\r\n    outlineSize=\"5 -5\">\r\n  </Text>\r\n\r\n</Defaults>\r\n\r\n<Button\r\n  id=\"passTurn\"\r\n  active=\"false\"\r\n  onClick=\"votePass()\"\r\n  width=\"2500\"\r\n  height=\"400\"\r\n  position=\"0 -825 -100\"\r\n  color=\"#aaaaaa\">\r\n  <Text fontSize=\"150\" color=\"White\">PASS TURN</Text>\r\n  <Panel id=\"vote-1\" class=\"passIndicator\" offsetXY=\"-1025 0\"></Panel>\r\n  <Panel id=\"vote-2\" class=\"passIndicator\" offsetXY=\"-650 0\"></Panel>\r\n  <Panel id=\"vote-3\" class=\"passIndicator\" offsetXY=\"650 0\"></Panel>\r\n  <Panel id=\"vote-4\" class=\"passIndicator\" offsetXY=\"1025 0\"></Panel>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitRed\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Red)\"\r\n  position=\"-2500 -2850 -100\"\r\n  rotation=\"0 0 180\"\r\n  color=\"Red\">\r\n  <Text class=\"switchText\">Switch to RED</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitOrange\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Orange)\"\r\n  position=\"-4625 -1800 -100\"\r\n  rotation=\"0 0 90\"\r\n  color=\"Orange\">\r\n  <Text class=\"switchText\">Switch to ORANGE</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitYellow\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Yellow)\"\r\n  position=\"-4625 0 -100\"\r\n  rotation=\"0 0 90\"\r\n  color=\"Yellow\">\r\n  <Text class=\"switchText\">Switch to YELLOW</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitPink\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Pink)\"\r\n  position=\"-4625 1800 -100\"\r\n  rotation=\"0 0 90\"\r\n  color=\"Pink\">\r\n  <Text class=\"switchText\">Switch to PINK</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitBrown\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Brown)\"\r\n  position=\"-2500 2850 -100\"\r\n  rotation=\"0 0 0\"\r\n  color=\"Brown\">\r\n  <Text class=\"switchText\">Switch to BROWN</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitBlue\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Blue)\"\r\n  position=\"2500 -2850 -100\"\r\n  rotation=\"0 0 180\"\r\n  color=\"Blue\">\r\n  <Text class=\"switchText\">Switch to BLUE</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitTeal\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Teal)\"\r\n  position=\"4625 -1800 -100\"\r\n  rotation=\"0 0 -90\"\r\n  color=\"Teal\">\r\n  <Text class=\"switchText\">Switch to TEAL</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitPurple\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Purple)\"\r\n  position=\"4625 0 -100\"\r\n  rotation=\"0 0 -90\"\r\n  color=\"Purple\">\r\n  <Text class=\"switchText\">Switch to PURPLE</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitGreen\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(Green)\"\r\n  position=\"4625 1800 -100\"\r\n  rotation=\"0 0 -90\"\r\n  color=\"Green\">\r\n  <Text class=\"switchText\">Switch to GREEN</Text>\r\n</Button>\r\n\r\n<Button\r\n  id=\"sitWhite\"\r\n  class=\"switchButton\"\r\n  onClick=\"changeSeat(White)\"\r\n  position=\"2500 2850 -100\"\r\n  rotation=\"0 0 0\"\r\n  color=\"White\">\r\n  <Text class=\"switchText\">Switch to WHITE</Text>\r\n</Button>\r\n\r\n\r\n<!-- DECK SELECTOR -->\r\n<Panel\r\n  class=\"settingsPanel\"\r\n  position=\"0 -4400 -100\">\r\n\r\n  <VerticalLayout spacing=\"10\" childForceExpandHeight=\"false\">\r\n\r\n    <Text class=\"panelHeader\">Deck Selector</Text>\r\n    <InputField active=\"false\" fontSize=\"30\" placeholder=\"Search for a deck...\" preferredHeight=\"50\"></InputField>\r\n\r\n    <VerticalScrollView flexibleHeight=\"1\" scrollSensitivity=\"100\">\r\n      <TableLayout padding=\"15 15 10 10\" cellSpacing=\"10\" autoCalculateHeight=\"true\" color=\"#23272a\">\r\n\r\n        <Row id=\"deck1\" class=\"deckEntry\">\r\n          <Button id=\"deck1Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck1Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck1Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck1Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck2\" class=\"deckEntry\">\r\n          <Button id=\"deck2Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck2Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck2Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck2Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck3\" class=\"deckEntry\">\r\n          <Button id=\"deck3Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck3Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck3Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck3Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck4\" class=\"deckEntry\">\r\n          <Button id=\"deck4Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck4Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck4Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck4Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck5\" class=\"deckEntry\">\r\n          <Button id=\"deck5Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck5Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck5Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck5Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck6\" class=\"deckEntry\">\r\n          <Button id=\"deck6Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck6Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck6Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck6Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck7\" class=\"deckEntry\">\r\n          <Button id=\"deck7Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck7Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck7Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck7Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck8\" class=\"deckEntry\">\r\n          <Button id=\"deck8Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck8Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck8Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck8Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck9\" class=\"deckEntry\">\r\n          <Button id=\"deck9Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck9Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck9Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck9Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck10\" class=\"deckEntry\">\r\n          <Button id=\"deck10Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck10Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck10Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck10Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck11\" class=\"deckEntry\">\r\n          <Button id=\"deck11Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck11Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck11Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck11Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck12\" class=\"deckEntry\">\r\n          <Button id=\"deck12Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck12Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck12Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck12Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck13\" class=\"deckEntry\">\r\n          <Button id=\"deck13Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck13Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck13Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck13Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck14\" class=\"deckEntry\">\r\n          <Button id=\"deck14Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck14Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck14Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck14Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck15\" class=\"deckEntry\">\r\n          <Button id=\"deck15Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck15Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck15Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck15Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck16\" class=\"deckEntry\">\r\n          <Button id=\"deck16Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck16Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck16Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck16Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck17\" class=\"deckEntry\">\r\n          <Button id=\"deck17Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck17Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck17Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck17Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck18\" class=\"deckEntry\">\r\n          <Button id=\"deck18Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck18Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck18Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck18Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck19\" class=\"deckEntry\">\r\n          <Button id=\"deck19Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck19Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck19Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck19Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row id=\"deck20\" class=\"deckEntry\">\r\n          <Button id=\"deck20Button\" class=\"deckButton\">\r\n            <TableLayout class=\"deckTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <VerticalLayout id=\"deck20Official\" class=\"deckOfficial\">\r\n                    <Text class=\"officialStar\">★</Text>\r\n                    <Text class=\"officialText\">Official Deck</Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n                <Cell>\r\n                  <VerticalLayout>\r\n                    <Text id=\"deck20Name\" class=\"deckName\"></Text>\r\n                    <Text id=\"deck20Description\" class=\"deckDescription\"></Text>\r\n                  </VerticalLayout>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Button>\r\n        </Row>\r\n\r\n      </TableLayout>\r\n    </VerticalScrollView>\r\n    <HorizontalLayout childForceExpandHeight=\"false\">\r\n      <Button preferredHeight=\"150\" fontSize=\"65\" fontStyle=\"Bold\" id=\"deckModeSwitch\" onClick=\"deckMode()\">+</Button>\r\n      <Button preferredHeight=\"150\" preferredWidth=\"500\" color=\"#31b32b\" onClick=\"startGame()\"><Text color=\"#ffffff\" fontSize=\"65\">Start Game</Text></Button>\r\n      <Button preferredHeight=\"150\" fontSize=\"65\" fontStyle=\"Bold\" onClick=\"refreshDecks()\">↻</Button>\r\n    </HorizontalLayout>\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n\r\n<!-- GAME SETTINGS -->\r\n<Panel\r\n  class=\"settingsPanel\"\r\n  position=\"800 -4400 -100\">\r\n\r\n  <VerticalLayout spacing=\"10\" childForceExpandHeight=\"false\">\r\n\r\n    <Text class=\"panelHeader\">Game Settings</Text>\r\n\r\n    <VerticalScrollView flexibleHeight=\"1\" scrollSensitivity=\"100\">\r\n      <TableLayout padding=\"0 0 0 0\" autoCalculateHeight=\"true\" cellBackgroundColor=\"#23272a\" rowBackgroundColor=\"#23272a\">\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text color=\"#99aab5\" alignment=\"UpperMiddle\" fontSize=\"45\">General Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Shuffle Players at Start</Text></Cell>\r\n          <Cell><Toggle id=\"shuffle\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"shuffle()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Enable Codemaster Queue</Text></Cell>\r\n          <Cell><Toggle id=\"queues\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"queues()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Enable Quick Color Switching</Text></Cell>\r\n          <Cell><Toggle id=\"switcher\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"switcher()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Disable Tilting Before Clue Given</Text></Cell>\r\n          <Cell><Toggle id=\"tilting\" class=\"settingToggle\" isOn=\"false\" onValueChanged=\"tilting()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text class=\"subcategoryText\">AFK Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">AFK Detection</Text></Cell>\r\n          <Cell><Toggle id=\"afk\" class=\"settingToggle\" isOn=\"false\" interactable=\"false\" onValueChanged=\"afk()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">AFK Minutes</Text></Cell>\r\n          <Cell>\r\n            <TableLayout class=\"sliderTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <Slider id=\"afkTime\" class=\"settingSlider\" interactable=\"false\" onValueChanged=\"afkTime()\" />\r\n                </Cell>\r\n                <Cell>\r\n                  <Text class=\"sliderNumber\">0</Text>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Cell>\r\n        </Row>\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text class=\"subcategoryText\">Time Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Timer Enabled</Text></Cell>\r\n          <Cell><Toggle id=\"timer\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"timer()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Timer (round 1)</Text></Cell>\r\n          <Cell>\r\n            <TableLayout class=\"sliderTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <Slider id=\"timer1Time\" class=\"settingSlider\" value=\"8\" onValueChanged=\"timer1Time()\" />\r\n                </Cell>\r\n                <Cell>\r\n                  <Text id=\"timer1TimeValue\" class=\"sliderNumber\">8</Text>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Cell>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Timer (round 2+)</Text></Cell>\r\n          <Cell>\r\n            <TableLayout class=\"sliderTable\">\r\n              <Row>\r\n                <Cell>\r\n                  <Slider id=\"timer2Time\" class=\"settingSlider\" value=\"4\" onValueChanged=\"timer2Time()\" />\r\n                </Cell>\r\n                <Cell>\r\n                  <Text id=\"timer2TimeValue\" class=\"sliderNumber\">4</Text>\r\n                </Cell>\r\n              </Row>\r\n            </TableLayout>\r\n          </Cell>\r\n        </Row>\r\n\r\n        <Row class=\"subcategoryRow\">\r\n          <Text class=\"subcategoryText\">Automod Settings</Text>\r\n        </Row>\r\n\r\n        <Row class=\"settingRow\">\r\n          <Cell><Text class=\"settingText\">Autokick Players on Blacklist</Text></Cell>\r\n          <Cell><Toggle id=\"autokick\" class=\"settingToggle\" isOn=\"true\" onValueChanged=\"autokick()\"></Toggle></Cell>\r\n        </Row>\r\n\r\n      </TableLayout>\r\n    </VerticalScrollView>\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n\r\n<!-- CODEMASTER QUEUE -->\r\n<Panel\r\n  id=\"codemasterQueue\"\r\n  class=\"settingsPanel\"\r\n  position=\"-800 -4400 -100\">\r\n\r\n  <VerticalLayout spacing=\"10\" childForceExpandHeight=\"false\">\r\n\r\n    <Text class=\"panelHeader\">Codemaster Queue</Text>\r\n\r\n    <VerticalLayout flexibleHeight=\"1\">\r\n      <TableLayout padding=\"15 15 10 10\" cellSpacing=\"10\" autoCalculateHeight=\"true\">\r\n\r\n        <Row id=\"reorder1\" preferredHeight=\"75\">\r\n          <Button id=\"queueButton1\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(1)\">\r\n            <Text id=\"queueText1\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton2\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(2)\">\r\n            <Text id=\"queueText2\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton3\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(3)\">\r\n            <Text id=\"queueText3\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton4\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(4)\">\r\n            <Text id=\"queueText4\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton5\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(5)\">\r\n            <Text id=\"queueText5\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton6\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(6)\">\r\n            <Text id=\"queueText6\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton7\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(7)\">\r\n            <Text id=\"queueText7\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton8\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(8)\">\r\n            <Text id=\"queueText8\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton9\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(9)\">\r\n            <Text id=\"queueText9\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n        <Row preferredHeight=\"75\">\r\n          <Button id=\"queueButton10\" class=\"queueButton\" color=\"#ffffff\" onclick=\"remove(10)\">\r\n            <Text id=\"queueText10\" class=\"queueText\" fontSize=\"50\"></Text>\r\n          </Button>\r\n        </Row>\r\n\r\n      </TableLayout>\r\n      <HorizontalLayout>\r\n        <Button fontSize=\"60\" onClick=\"join()\">Join</Button>\r\n        <Button fontSize=\"60\" onClick=\"stay()\">Stay</Button>\r\n        <Button fontSize=\"60\" onClick=\"leave()\">Leave</Button>\r\n      </HorizontalLayout>\r\n    </VerticalLayout>\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n\r\n<!-- Timer -->\r\n<Panel\r\n  id=\"timer\"\r\n  class=\"timerPanel\"\r\n  position=\"0 1800 -100\">\r\n\r\n  <VerticalLayout childForceExpandHeight=\"true\">\r\n\r\n    <Text color=\"#ffffff\" alignment=\"UpperMiddle\" fontSize=\"60\">──── Time Remaining ────</Text>\r\n\r\n    <VerticalLayout flexibleHeight=\"1\" childForceExpandWidth=\"true\" childForceExpandHeight=\"true\" childAlignment=\"MiddleCenter\">\r\n      <Text id=\"time\" color=\"White\" width=\"100%\" alignment=\"MiddleCenter\" fontSize=\"300\">0:00</Text>\r\n      <HorizontalLayout childForceExpandWidth=\"false\" childAlignment=\"MiddleCenter\">\r\n        <Text color=\"#ffffff\" fontSize=\"60\" text=\"────── \"></Text>\r\n        <Button id=\"timerControl\" fontSize=\"60\" preferredHeight=\"75\" preferredWidth=\"125\" onClick=\"toggleTimer()\">▶</Button>\r\n        <Text color=\"#ffffff\" fontSize=\"60\" text=\" ──────\"></Text>\r\n      </HorizontalLayout>\r\n    </VerticalLayout>\r\n  </VerticalLayout>\r\n</Panel>\r\n\r\n<!-- Red team turn -->\r\n<Text id=\"redTurn\" active=\"false\" position=\"-750 1800 -100\" rotation=\"0 180 0\" color=\"Red\" fontSize=\"1000\">➔</Text>\r\n\r\n<!-- Blue team turn -->\r\n<Text id=\"blueTurn\" active=\"false\" position=\"750 1800 -100\" color=\"Blue\" fontSize=\"1000\">➔</Text>\r\n\r\n<!-- Table background -->\r\n<Image position=\"0 -457 -100\" scale=\"0.655 0.655 1\" preserveAspect=\"true\" raycastTarget=\"false\" image=\"bg\"></Image>\r\n\r\n<!-- Blue team turn -->\r\n<Panel id=\"blueTurnBG\" active=\"false\" position=\"2104 479 -100\" width=\"1060\" height=\"1656\" color=\"rgba(0.118, 0.53, 1, 0.05)\">\r\n</Panel>\r\n\r\n<!-- Red team turn -->\r\n<Panel id=\"redTurnBG\" active=\"false\" position=\"-2104 479 -100\" width=\"1060\" height=\"1656\" color=\"rgba(0.856, 0.1, 0.094, 0.05)\">\r\n</Panel>\r\n\r\n<!-- Credits / Versioning -->\r\n<Text position=\"-3500 -3050 -100\" fontSize=\"75\" color=\"#3d3a39\">Version 3.1.0-BETA (git-BETA)</Text>\r\n<Text position=\"3500 -3050 -100\" fontSize=\"75\" color=\"#3d3a39\">Made with <textcolor color=\"#4c2936\"><textsize size=\"85\">♥</textsize></textcolor> by Rob Ford</Text>\r\n<Text position=\"0 2800 -100\" fontSize=\"100\" color=\"#ffffff\">TTS-CODENAMES.COM</Text>\r\n<Text position=\"0 2600 -100\" width=\"3000\" fontSize=\"90\" color=\"Yellow\">TTS-Codenames is hosting a Codenames tournament! Each winner receives a $15 Steam gift card. Find out more or register here: <textcolor color=\"#f4641d\">https://tts-codenames.com/tournament</textcolor></Text>\r\n<Button position=\"0 2250 -100\" color=\"Black\" width=\"1000\" height=\"350\" onClick=\"reloadUI\">\r\n  <VerticalLayout>\r\n    <Text color=\"Red\" width=\"100%\" alignment=\"LowerCenter\" fontSize=\"75\">TEMPORARY FIX</Text>\r\n    <Text color=\"White\" width=\"100%\" alignment=\"UpperCenter\" fontSize=\"75\">Click here to fix visual issues</Text>\r\n</VerticalLayout>\r\n</Button>"
    },
    {
      "GUID": "faccf6",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 25.0,
        "posY": 3.0,
        "posZ": -35.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.117999978,
        "g": 0.53,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Blue",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "de8511",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -25.0,
        "posY": 3.0,
        "posZ": 35.0,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.442999959,
        "g": 0.230999947,
        "b": 0.0899999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Brown",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7f25d1",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 53.0,
        "posY": 3.0,
        "posZ": 18.0,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.191999972,
        "g": 0.701,
        "b": 0.167999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Green",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "5f261c",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -53.0,
        "posY": 3.0,
        "posZ": -18.0,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.9559999,
        "g": 0.39199996,
        "b": 0.112999953,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Orange",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "a9e341",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -53.0,
        "posY": 3.34820342,
        "posZ": 18.0,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.96,
        "g": 0.438999981,
        "b": 0.807,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Pink",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "7cd19f",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 53.0,
        "posY": 3.0,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.627,
        "g": 0.124999978,
        "b": 0.941,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Purple",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "279d7e",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -25.0,
        "posY": 3.0,
        "posZ": -35.0,
        "rotX": 0.0,
        "rotY": 0.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.856,
        "g": 0.09999997,
        "b": 0.09399996,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Red",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "18fd38",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 53.0,
        "posY": 3.0,
        "posZ": -18.0,
        "rotX": 0.0,
        "rotY": 270.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.128999949,
        "g": 0.694,
        "b": 0.606999934,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Teal",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "3f34d2",
      "Name": "HandTrigger",
      "Transform": {
        "posX": 25.0,
        "posY": 3.0,
        "posZ": 35.0,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "White",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "033571",
      "Name": "HandTrigger",
      "Transform": {
        "posX": -53.0,
        "posY": 3.0,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 90.0,
        "rotZ": 0.0,
        "scaleX": 1.0,
        "scaleY": 1.0,
        "scaleZ": 1.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 0.905,
        "g": 0.898,
        "b": 0.171999961,
        "a": 0.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": false,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "FogColor": "Yellow",
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    },
    {
      "GUID": "bab013",
      "Name": "Custom_Model",
      "Transform": {
        "posX": 0.0,
        "posY": -20.1,
        "posZ": 0.0,
        "rotX": 0.0,
        "rotY": 180.0,
        "rotZ": 0.0,
        "scaleX": 4.0,
        "scaleY": 4.0,
        "scaleZ": 4.0
      },
      "Nickname": "",
      "Description": "",
      "GMNotes": "",
      "ColorDiffuse": {
        "r": 1.0,
        "g": 1.0,
        "b": 1.0
      },
      "LayoutGroupSortIndex": 0,
      "Value": 0,
      "Locked": true,
      "Grid": true,
      "Snap": true,
      "IgnoreFoW": false,
      "MeasureMovement": false,
      "DragSelectable": true,
      "Autoraise": true,
      "Sticky": true,
      "Tooltip": true,
      "GridProjection": false,
      "HideWhenFaceDown": false,
      "Hands": false,
      "CustomMesh": {
        "MeshURL": "https://tts-codenames.com/assets/table.obj",
        "DiffuseURL": "https://tts-codenames.com/assets/table_dark.png",
        "NormalURL": "",
        "ColliderURL": "https://tts-codenames.com/assets/table.obj",
        "Convex": false,
        "MaterialIndex": 3,
        "TypeIndex": 4,
        "CustomShader": {
          "SpecularColor": {
            "r": 1.0,
            "g": 1.0,
            "b": 1.0
          },
          "SpecularIntensity": 0.0,
          "SpecularSharpness": 2.0,
          "FresnelStrength": 0.0
        },
        "CastShadows": true
      },
      "LuaScript": "",
      "LuaScriptState": "",
      "XmlUI": ""
    }
  ]
}
